////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Dit is RSOpen, de open source versie van het model RuimteScanner. Het scipt wordt uitgegeven onder GNU-GPL licentie.
//
// RSOpen is ontwikkeld door PBL Planbureau voor de Leefomgeving, i.s.m Object Vision B.V. en VU Vrije Universiteit Amsterdam.
// Opdrachtgever/ontwikkelaar PBL: Bart Rijken
// Contactpersoon/ontwikkelaar Object Vision B.V.: Jip Claassens (jclaassens@objectvision.nl)
// Contacpersoon PBL: Bas van Bemmel (Bas.vanBemmel@pbl.nl)
//
// Deze file bevat de bronData (SourceData) die het model nodig heeft voor de verschillende berekeningen/analyses.De Data worden ingelezen vanuit de SourceRVF_DataDir.
// De bronnen zijn divers. Tenzij anders aangegeven is dat het PBL.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

container VariantOptimalisatie: using = "Classifications;Classifications/Vastgoed;Classifications/Actor;Classifications/Time;Units;Geography"
{
	unit<ipoint> Grid := /Geography/AdminDomain;
	
	unit<uint32> WaterschapK: NrOfRows = 10
	{
		attribute<string> name: [ 'Friesland', 'HDSR', 'AGV', 'HHNK', 'HHSK', 'Rijnland', 'WSRL', 'WDODELTA', 'HEA' , 'NZV'];
		attribute<string> lhmname: [ '_MIPWA', '_HYDROMEDAH', '', '', '', '', '_MORIA','_MIPWA','_MIPWA', ''];
		attribute<string> Label := name;
	
		attribute<string> dir_name               : [ 'WaterschapFriesland', 'HDSR', 'AGV', 'HHNK'                       , 'HHSK'                       , 'Rijnland', 'WSRL', 'WDODELTA', 'HEA', 'NZV'];
		attribute<string> grid_subdir            : ['/v2'                 , ''    , ''   , '/v2'                        , '/v2'                        , '', '' , '', '', ''];
		attribute<string> grid_suffix            : [''                    , ''    , ''   , '_zonder_onderbemalingen_mca', '_zonder_onderbemalingen_mca', '', '' , '', '', ''];
		attribute<string> gdb_Peilgebieden_suffix: ['_vastgesteld'        , ''    , ''   , '_zonder_onderbemalingen'    , '_zonder_onderbemalingen'    , '', '' , '', '', ''];
		attribute<string> gdb_name               : [ 'waterschapfriesland_v6', 'HDSR_v4', 'AGV_v3', 'HHNK_v2', 'HHSK_v4', 'Rijnland_v3', 'WSRL_v3' , 'WDODelta', 'HEA', 'NZV_v2']; 
		
		attribute<string> Label_ext: [
			'beheersgebied Waterschap Friesland (WF)',
			'beheersgebied Hoogheemraadschap De Stichtse Rijnlanden (HDSR)',
			'beheersgebied Hoogheemraadschap Amstel, Gooi en Vecht (AGV)',
			'beheersgebied Hoogheemraadschap Hollands Noorderkwartier  (HHNK)',
			'beheersgebied Hoogheemraadschap van Schieland en de Krimpenerwaard  (HHSK)',
			'beheersgebied Hoogheemraadschap van Rijnland',
			'beheersgebied Waterschap Rivierenland (WSRL)',
			'beheersgebied Drents Overijsselse Delta (WDODELTA)',
			'beheersgebied Waterschap Hunze en Aa''s',
			'beheersgebied Waterschap Noorderzijlvest'
		];
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	container Waterschappen := for_each_ne(WaterschapK/name, 'WaterschapT('+quote(WaterschapK/name)+')');
	
	Template WaterschapT
	{
		//
		parameter<string> name;
		//
		
		parameter<string> Label_ext               := rjoin(lowercase(name), lowercase(WaterschapK/name), WaterschapK/Label_ext);
		parameter<string> dir_name                := rjoin(lowercase(name), lowercase(WaterschapK/name), WaterschapK/dir_name);
		parameter<string> gdb_name                := rjoin(lowercase(name), lowercase(WaterschapK/name), WaterschapK/gdb_name);
		parameter<string> grid_subdir             := rjoin(lowercase(name), lowercase(WaterschapK/name), WaterschapK/grid_subdir);
		parameter<string> grid_suffix             := rjoin(lowercase(name), lowercase(WaterschapK/name), WaterschapK/grid_suffix);
		parameter<string> gdb_Peilgebieden_suffix := rjoin(lowercase(name), lowercase(WaterschapK/name), WaterschapK/gdb_Peilgebieden_suffix);
		
		container Naar_grid
		{
			parameter<string> foldername := '%RS_Lb_DataDir%/Waterschap/'+dir_name+'/grid'+grid_subdir;
			
			attribute<uint16> Peilgebied_code_grid (Grid)
			:	Label       = "='Peilgebieden '+Label_ext"
			,	Source      = "=name"
			,	StorageName = "=foldername+'/Peilgebieden'+grid_suffix+'.tif'";
			
			unit<uint64> Peilgebied := unique(Peilgebied_code_grid), DialogType = "Map", DialogData = "Peilgebied_grid";
			
			attribute<Peilgebied> Peilgebied_grid (Grid) := rlookup(Peilgebied_code_grid, Peilgebied/values);
		}
		
		container Gdb:
			StorageName = "='%RS_Lb_DataDir%/Waterschap/'+dir_name+'/vector/'+gdb_name+'.gdb'",
			StorageType = "gdal.vect",
			StorageReadOnly = "True",
			DialogData = "rdc_meter",
			SyncMode = "AllTables";
	}
	
	unit<uint32> Peilgebied := ='union_unit('+AsItemList(replace('Waterschappen/@WS@/Naar_grid/Peilgebied','@WS@',WaterschapK/name))+')', DialogType = "Map", DialogData = "Per_grid"
	{
		attribute<uint32> PeilgebiedCount (WaterschapK) := ='union_data(WaterschapK, '+AsItemList(replace('#(Waterschappen/@WS@/Naar_grid/Peilgebied)[uint32]','@WS@',WaterschapK/name))+')';
		attribute<uint32> CumulCount      (WaterschapK) := cumulate(PeilgebiedCount);
		attribute<uint32> Baseid          (WaterschapK) := MakeDefined(CumulCount[sub_or_null(id(WaterschapK),1)], 0);
		
		attribute<.> Per_grid (Grid) :=
			='MakeDefined('+
				AsItemList(
					replace('uint32(Waterschappen/@WS@/Naar_grid/Peilgebied_grid)+Baseid[@id@]'
					,	'@WS@',WaterschapK/name
					,	'@id@',string(id(WaterschapK))
					)
				)+
			')[Peilgebied]';
		
		attribute<WaterschapK> waterschap_rel := ='union_data(., '+ AsItemList(replace('const('+string(id(WaterschapK))+'[WaterschapK], Waterschappen/@WS@/Naar_grid/Peilgebied)','@WS@',WaterschapK/name))+')';
		
		attribute<uint64> waterschap_Peilgebied_rel := ='union_data(., '+AsItemList(replace('id(Waterschappen/@WS@/Naar_grid/Peilgebied)','@WS@',WaterschapK/name))+')';
	}
	
	unit<uint8> ScenarioK := /Classifications/Modellering/ScenarioK;
	unit<uint8> BoervariantK := /Classifications/Actor/BoervariantK;
	unit<uint8> CO2PrijsK := /Classifications/CO2PriceK;
	unit<uint8> VariantK := /VariantParameters/VariantK;
	unit<uint8> ZichtjaarK := /Classifications/Time/Zichtjaar;
	unit<uint32> GrondgebruikK := /Classifications/Actor/LU_ModelType;
	
	unit<uint32> GrondgebruikContext := combine(ScenarioK, BoervariantK, VariantK, ZichtjaarK)
	{
		attribute<string> Scenario_name := ScenarioK/name[first_rel];
		attribute<string> Boervariant_name := BoervariantK/name[second_rel];
		attribute<string> Variant_name := VariantK/name[third_rel];
		attribute<string> Zichtjaar_name := ZichtjaarK/name[fourth_rel];
		attribute<string> name := Scenario_name+'/'+Boervariant_name+'/'+Variant_name+'/'+Zichtjaar_name;
		attribute<string> Label := replace(name, '/', '_');
	}
	
	unit<uint32> CO2Context := combine(CO2PrijsK, VariantK, ZichtjaarK)
	{
		attribute<string> CO2Prijs_name := CO2PrijsK/name[first_rel];
		attribute<string> Variant_name := VariantK/name[second_rel];
		attribute<string> Zichtjaar_name := ZichtjaarK/name[third_rel];
		attribute<string> name := CO2Prijs_name+'/'+Variant_name+'/'+Zichtjaar_name;
		attribute<string> Label := replace(name, '/', '_');
	}
	
	unit<uint32> AggregatieContext := combine(ScenarioK, BoervariantK, CO2PrijsK, VariantK, ZichtjaarK)
	{
		attribute<string> Scenario_name := ScenarioK/name[first_rel];
		attribute<string> Boervariant_name := BoervariantK/name[second_rel];
		attribute<string> CO2Prijs_name := CO2PrijsK/name[third_rel];
		attribute<string> Variant_name := VariantK/name[fourth_rel];
		attribute<string> Zichtjaar_name := ZichtjaarK/name[fifth_rel];
		attribute<string> name := Scenario_name+'/'+Boervariant_name+'/'+CO2Prijs_name+'/'+Variant_name+'/'+Zichtjaar_name;
		attribute<string> Label := replace(name, '/', '_');
	}
	
	unit<uint32> OptimalisatieContext := combine(ScenarioK, BoervariantK, CO2PrijsK, ZichtjaarK)
	{
		attribute<string> Scenario_name := ScenarioK/name[first_rel];
		attribute<string> Boervariant_name := BoervariantK/name[second_rel];
		attribute<string> CO2Prijs_name := CO2PrijsK/name[third_rel];
		attribute<string> Zichtjaar_name := ZichtjaarK/name[fourth_rel];
		attribute<string> name := Scenario_name+'/'+Boervariant_name+'/'+CO2Prijs_name+'/'+Zichtjaar_name;
		attribute<string> Label := replace(name, '/', '_');
	}
	
	// @Jip, hier graag de ontkoppelde allocatieresultaten inlezen, gebruik makende van de attributen van de GrondgebruikContext unit
	container Grondgebruik := for_each_nedv(
		GrondgebruikContext/name,
		'const(GrondgebruikK/V/Landbouw_GG_vee, Grid)', // hack om items hierna te kunnen testen, te vervangen door goede link
		Grid,
		GrondgebruikK
	);
	
	//@Jip, hier graag de ontkoppelde NPV van gealloceerd Grondgebruik inlezen, gebruik makende van de attributen van de GrondgebruikContext unit
	container NPVGrondgebruik := for_each_nedv(
		GrondgebruikContext/name,
		'const(111[Eur], Grid)',  // hack om items hierna te kunnen testen, te vervangen door goede link
		Grid,
		Eur
	);
	
	//@Jip, hier graag de ontkoppelde NPV van de CO2 emissie inlezen, gebruik makende van de attributen van de CO2Context unit
	container NPVCO2Emissie := for_each_nedv(
		CO2Context/name,
		'const(222[Eur], Grid)',  // hack om items hierna te kunnen testen, te vervangen door goede link
		Grid,
		Eur
	);
	
	container NPVTotaal :=
		for_each_nedv(
			AggregatieContext/name,
			replace(
				'add(NPVGrondgebruik/@S@/@B@/@V@/@Z@, NPVCO2Emissie/@C@/@V@/@Z@)',
				'@S@', AggregatieContext/Scenario_name,
				'@B@', AggregatieContext/Boervariant_name,
				'@C@', AggregatieContext/CO2Prijs_name,
				'@V@', AggregatieContext/Variant_name,
				'@Z@', AggregatieContext/Zichtjaar_name
			),
			Grid,
			Eur
		)
	{
		container PerPeilgebied := for_each_nedv(
			AggregatieContext/name,
			'sum(NPVTotaal/'+AggregatieContext/name+', Peilgebied/per_grid)',
			Peilgebied,
			Eur
		);
	}
	
	container Optima
	{
		container Variant :=
			for_each_nedv(
				OptimalisatieContext/name,
				replace(
					'ArgMax('+AsItemList('NPVTotaal/PerPeilgebied/@S@/@B@/@C@/'+VariantK/name+'/@Z@')+')[VariantK]',
					'@S@', OptimalisatieContext/Scenario_name,
					'@B@', OptimalisatieContext/Boervariant_name,
					'@C@', OptimalisatieContext/CO2Prijs_name,
					'@Z@', OptimalisatieContext/Zichtjaar_name
				),
				Peilgebied,
				VariantK
			)
		{
			container PerGrid := for_each_nedv(
				OptimalisatieContext/name,
				'Variant/'+OptimalisatieContext/name+'[Peilgebied/per_grid]',
				Grid,
				VariantK
			);
		}
		
		container Grondgebruik := for_each_nedv(
			OptimalisatieContext/name,
			replace(
				'merge(uint16(Variant/PerGrid/@O@), GrondgebruikK,'+AsItemList('VariantOptimalisatie/Grondgebruik/@S@/@B@/'+VariantK/name+'/@Z@')+')',
				'@O@', OptimalisatieContext/name,
				'@S@', OptimalisatieContext/Scenario_name,
				'@B@', OptimalisatieContext/Boervariant_name,
				'@Z@', OptimalisatieContext/Zichtjaar_name
			),
			Grid,
			GrondgebruikK
		);
		
		container NPV_Grondgebruik := for_each_nedv(
			OptimalisatieContext/name,
			replace(
				'merge(uint16(Variant/PerGrid/@O@), Eur,'+AsItemList('VariantOptimalisatie/NPVGrondgebruik/@S@/@B@/'+VariantK/name+'/@Z@')+')',
				'@O@', OptimalisatieContext/name,
				'@S@', OptimalisatieContext/Scenario_name,
				'@B@', OptimalisatieContext/Boervariant_name,
				'@Z@', OptimalisatieContext/Zichtjaar_name
			),
			Grid,
			Eur
		);
		
		container NPV_CO2Emissie := for_each_nedv(
			OptimalisatieContext/name,
			replace(
				'merge(uint16(Variant/PerGrid/@O@), Eur,'+AsItemList('VariantOptimalisatie/NPVCO2Emissie/@C@/'+VariantK/name+'/@Z@')+')',
				'@O@', OptimalisatieContext/name,
				'@C@', OptimalisatieContext/CO2Prijs_name,
				'@Z@', OptimalisatieContext/Zichtjaar_name
			),
			Grid,
			Eur
		);
		
		container NPV_Totaal := for_each_nedv(
			OptimalisatieContext/name,
			replace(
				'merge(uint16(Variant/PerGrid/@O@), Eur,'+AsItemList('VariantOptimalisatie/NPVTotaal/@S@/@B@/@C@/'+VariantK/name+'/@Z@')+')',
				'@O@', OptimalisatieContext/name,
				'@S@', OptimalisatieContext/Scenario_name,
				'@B@', OptimalisatieContext/Boervariant_name,
				'@C@', OptimalisatieContext/CO2Prijs_name,
				'@Z@', OptimalisatieContext/Zichtjaar_name
			),
			Grid,
			Eur
		);
	}
}