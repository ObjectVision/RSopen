Template IterSubsector_T_Wind
{
	//
	parameter<SubSector> id;
	unit<uint8> SubSector;
	container StateVoorAllocatie;
	container Context0;
	//
	
	container Context := Context0
	{
		container ThisSubsector := ..;
	}
	
	parameter<string> name               := SubSector/name[id];
	parameter<string> SubSector_pathname := SubSector/Sector_name_ThisName[id];
	parameter<string> Zichtjaar_name     := Context/ThisZichtjaar/name;
	parameter<string> AllocRegio_name    := Context/ThisSectorAllocRegio/allocregio_name;
	
	unit<uint32> TredeK := = 'VariantData/Trede/SectorXSubSectoren/'+SubSector_pathname+'/Klasse';
	
	unit<uint64> CompactedAdminDomain := Geography/CompactedAdminDomain
	{
		attribute<bool> Beschikbaar_src                                  := = 'PotentieleState/'+Zichtjaar_name+'/SectorXSubsectoren/'+SubSector_pathname+'/Beschikbaar && !(IsDefined(StateVoorAllocatie/Subsector_rel))';
		attribute<bool> IsNietToegestaan_Dynamisch_PrevSectorAllocRegios := =Context/ThisSectorAllocRegio/name+'/Restricties_Dynamisch_Wind/IsNietToegestaan_Dynamisch';
		attribute<bool> IsNietToegestaan_Dynamisch_PrevIter              := Restricties_Dynamisch/bestaande_turbines/IsNietToegestaan;
		attribute<bool> Beschikbaar                                      := Beschikbaar_src && !IsNietToegestaan_Dynamisch_PrevSectorAllocRegios && !IsNietToegestaan_Dynamisch_PrevIter;
		
		container Restricties_Dynamisch
		{
			// 4.  bestaande turbines --> afstand = 4 * rotordiameter
			container bestaande_turbines
			{
				parameter<string> Gealloceerd_str := 'StateVoorAllocatie/Wind/Totaal > 0f';
				
				attribute<bool> Gealloceerd        (CompactedAdminDomain) := =Gealloceerd_str;
				attribute<bool> Gealloceerd_buffer (CompactedAdminDomain) := Buffer/proximity_res;
				
				container Buffer := Templates/Buffer_gridcel_T(Gealloceerd,  4f * CaseClassifications/WindTurbineType/RotorDiameter);
				
				attribute<bool> IsNietToegestaan (CompactedAdminDomain) := Gealloceerd_buffer;
			}
		}
		
		#include<StempelProcedure.dms>
		
		container Results
		{
			parameter<string>                   ArgMax_str        := 'ArgMax('+AsList('StempelProcedure/Stempels/'+StempelProcedure/Stempel/name+'/windmolen_grid/locaties_toegestanekolommen_uint32/AantalLocaties',',')+')[StempelProcedure/Stempel]';
			parameter<StempelProcedure/Stempel> ArgMax            := =ArgMax_str;
			parameter<string>                   BesteStempel_name := StempelProcedure/Stempel/name[ArgMax];
			
			parameter<string> PotentieleStateNaAllocatie_dynamisch := 'StempelProcedure/Stempels/'+Results/BesteStempel_name+'/windmolen_grid/locaties_toegestanekolommen_uint32/IsBeschikbaar[float32] * CaseClassifications/WindTurbineType/MW_per_turbine';
			parameter<string> PotentieleStateNaAllocatie_statisch  := 'StempelProcedure/Stempels/'+StempelProcedure/Stempel/name[Context/ThisIter/id[StempelProcedure/Stempel]]+'/windmolen_grid/locaties_toegestanekolommen_uint32/IsBeschikbaar[float32] * CaseClassifications/WindTurbineType/MW_per_turbine';
			parameter<string> PotentieleStateNaAllocatieExpr       := =ModelParameters/Windpotentie_StempelAan ? 'PotentieleStateNaAllocatie_dynamisch' : 'PotentieleStateNaAllocatie_statisch';
		}
		
		attribute<MW> PotentieleStateNaAllocatie_AdminDomain (AdminDomain) := =Results/PotentieleStateNaAllocatieExpr;
		attribute<MW> PotentieleStateNaAllocatie    (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, PotentieleStateNaAllocatie_AdminDomain);
		
		attribute<float32> Geschiktheid_srcsrc := = 'VariantData/Suitability/'+Context/ThisZichtjaar/name+'/'+SubSector_pathname+'[CompactedAdminDomain/CompactedAllocDomain_rel]';
		attribute<float32> Geschiktheid_src    := (PotentieleStateNaAllocatie > 0[MW]) ? Geschiktheid_srcsrc : 0f/0f;
		
		attribute<uint32>  Geschiktheid_src_ordered := invert(index(Geschiktheid_src))[uint32];
		parameter<uint32>  Geschiktheid_src_range   := max(Geschiktheid_src_ordered)+100;
		attribute<uint32>  TredeScore               := (#TredeK - 1) - collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, TredeK/per_AdminDomain), IntegrityCheck = "max(collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, TredeK/per_AdminDomain)) < #TredeK";
		attribute<float32> Geschiktheid             := float32(TredeScore) * float32(Geschiktheid_src_range) + float32(Geschiktheid_src_ordered);
	}
	
	unit<uint32> AllocRegio := Context/ThisSectorAllocRegio/AllocRegio
	{
		attribute<float32> RestClaim := = replace(
			'VariantData/Claims/@Z@/SectorAllocRegios/@AS@/@S@ - sum(StateVoorAllocatie/@SP@, per_CompactedAdminDomain)',
			'@Z@' , Zichtjaar_name,
			'@AS@', Context/ThisSectorAllocRegio/name,
			'@S@' , Context/ThisSubsector/name,
			'@SP@', Subsector_pathname
		);
		
		attribute<ha>     Ruimte                := sum(float32(CompactedAdminDomain/Beschikbaar) * AdminDomain/NrHaPerCell, AllocRegio/per_CompactedAdminDomain);
		attribute<bool>   GeenRuimteOfRestclaim := Ruimte == 0[ha] || RestClaim <= 0[float32];
		attribute<uint64> MaxGeschiktheid       := max(CompactedAdminDomain/Geschiktheid, AllocRegio/per_CompactedAdminDomain)[uint64];
		
		parameter<uint64> MaxGeschiktheid_value := max(CompactedAdminDomain/Geschiktheid)[uint64];
		
		attribute<uint64> Afkapgrens0 := MaxGeschiktheid_value - nth_element_weighted(
			MaxGeschiktheid_value - CompactedAdminDomain/Geschiktheid[uint64], // rank
			max_elem(RestClaim, 0f),                                           // target
			CompactedAdminDomain/PotentieleStateNaAllocatie,                   // weight, hier geen potentiele delta gebruikt; evt sloop van deze subsector heralloceren we in volgende iteraties
			per_CompactedAdminDomain
		);
		
		attribute<uint64> Afkapgrens := GeenRuimteOfRestclaim ? (0/0)[uint64] : MakeDefined(Afkapgrens0, MaxGeschiktheid);
	}
}