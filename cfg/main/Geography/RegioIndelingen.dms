container RegioIndelingen
{ 
	#include<Impl.dms>
	
	unit<uint32> PC4 // missing value -99997
	:	StorageName     = "%RSLDataDir%/RegioIndelingen/pc4/2020/cbs_pc4_2020.gpkg"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "true"
	,	Source          = ""
	,	url             = "https://service.pdok.nl/cbs/pc4/atom/v1_0/cbs_pc4_2020.xml"
	{
		attribute<rdc_meter> Geometry (poly);
		
		attribute<.> per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<.> per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
	}
	
	unit<uint32> MRA8
	:	StorageName = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/MRA.fss"
	,	StorageReadOnly = "true"
	{
		attribute<rdc_meter> geometry (poly);
		attribute<string>    Label                   : DialogType = "LabelText";
		attribute<string>    name                    := label;
		attribute<MRA1>      MRA1_rel                := const(0[MRA1], .);
		attribute<.>         per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<.>         per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		
		unit<uint32> Excl
		:	StorageName = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/MRA_Excl.fss"
		,	StorageReadOnly = "true"
		{
			attribute<rdc_meter> geometry (poly);
			attribute<string>    Label                   : DialogType = "LabelText";
			attribute<string>    name                    := label;
			attribute<MRA1/Excl> MRA1_Excl_rel           := const(0[MRA1/Excl], .);
			attribute<.>         per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<.>         per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		}
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint32> MRA1: NrOfRows = 1
	{
		attribute<rdc_meter> geometry (polygon)      := partitioned_union_polygon(ipolygon(MRA8/geometry), MRA8/MRA1_rel)[rdc_meter];
		attribute<string>    name                    : ['MRA'];
		attribute<string>    Label                   := name, DialogType = "LabelText";
		attribute<.>         MRA1_rel                := const(0[.], .);
		
		unit<uint32> Excl: NrOfRows = 1
		{
			attribute<rdc_meter> geometry (polygon)      := partitioned_union_polygon(ipolygon(MRA8/Excl/geometry), MRA8/Excl/MRA1_Excl_rel)[rdc_meter];
			attribute<string>    name                    : ['MRA'];
			attribute<string>    Label                   := name, DialogType = "LabelText";
			attribute<.>         MRA1_rel                := const(0[.], .);
		}
	}
	
	unit<uint32> Gemeente2019 := Gemeente/Gemeente2019
	{
		attribute<Gemeente2019_single> Gemeente2019_single_rel := rlookup(name, Gemeente2019_single/name);
	}
	
	unit<uint32> Gemeente2019_single := unique(Gemeente2019/name)
	{
		attribute<string> name := replace(values, '/', '_', '-', '_', ' ', '_');
		attribute<ipoint> geometry0 (polygon) : = partitioned_union_polygon(ipolygon(Gemeente2019/geometry), Gemeente2019/Gemeente2019_single_rel);
		attribute<rdc_meter> geometry (polygon)  : = geometry0[rdc_meter];
		attribute<.> per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		attribute<.> per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		
		attribute<string> GM_CODE := Gemeente2019/GM_CODE[invert(Gemeente2019/Gemeente2019_single_rel)];
		attribute<string> GM_NAAM := Gemeente2019/GM_NAAM[invert(Gemeente2019/Gemeente2019_single_rel)];
		attribute<string> Label := GM_NAAM, DialogType = "LabelText";
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	container Gemeente
	{
		unit<uint32>  Gemeente2018
		: StorageName = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/gem_2018.fss"
		, StorageReadOnly = "True"
		{
			attribute<rdc_meter> Geometry (poly);
			attribute<string>    GEMNAAM;
			attribute<string>    RESNAAM;
			attribute<float64>   gemcode;
			
			attribute<RESregio>     RESregio_rel               := rlookup(RESnaam, RESregio/values);
			attribute<.>            per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<string>       label                      := GEMNAAM, DialogType = "LabelText";
			attribute<Impl/GemMRA8> MRA_rel                    := rlookup(GEMNAAM, Impl/GemMRA8/gemeente);
			attribute<Impl/GemMRA8/Excl> MRA_Excl_rel          := rlookup(GEMNAAM, Impl/GemMRA8/Excl/gemeente);
			attribute<MRA1>         MRA1_rel                   := IsDefined(MRA_rel) ? 1[MRA1] : (0/0)[MRA1];
			attribute<MRA1/Excl>    MRA1_Excl_rel              := IsDefined(MRA_Excl_rel) ? 1[MRA1/Excl] : (0/0)[MRA1/Excl];
			attribute<Impl/GemMRA8/MRA8> MRA8_rel              := Impl/GemMRA8/MRA8_rel[MRA_rel];
			attribute<string>       MRA8_naam                  := Impl/GemMRA8/MRA8_name[MRA_rel];
			attribute<bool> IsG4 := id(.) == 168[.] || id(.) == 191[.] || id(.) == 121[.] || id(.) == 111[.];
		}
		
		unit<uint32> Gemeente2019
		:	StorageName     = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/gem_2019.fss"
		,	StorageReadOnly = "True"
		{
			attribute<rdc_meter>    geometry (poly);
			attribute<string>       GM_CODE;
			attribute<string>       GM_NAAM;
			attribute<string>       Label      := GM_NAAM, DialogType = "LabelText";
			attribute<.>            per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<string>       name := replace(GM_NAAM, '/', '_', '-', '_', ' ', '_','(','',')','','\''','','â','a','ú','u',',','','.','');
			
			attribute<MRA8> MRA8_rel := rlookup(GM_NAAM, MRA8/name);
			
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		
		unit<uint32> Gemeente2021
		:	StorageName     = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/gem_2021.fss"
		,	StorageReadOnly = "True"
		{
			attribute<rdc_meter>    geometry (poly);
			attribute<rdc_mm_i32>   geometry_mm (poly) := geometry[rdc_mm_i32];
			attribute<string>       GM_CODE;
			attribute<uint32>       Code := uint32(right(GM_CODE, 4));
			attribute<string>       GM_NAAM;
			attribute<string>       Water;
			attribute<string>       Label      := GM_NAAM, DialogType = "LabelText";
			attribute<.>            per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<string>       name := replace(GM_NAAM, '/', '_', '-', '_', ' ', '_','(','',')','','\''','','â','a','ú','u',',','','.','');
			attribute<string>       name2 := AsItemName(GM_NAAM); // when OK, remove the line above
			attribute<Gemeente2021_single> Gemeente2021_single_rel := rlookup(name, Gemeente2021_single/name);
			
			attribute<MRA8> MRA8_rel := rlookup(GM_NAAM, MRA8/name);
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			
			unit<uint32> Land := select_with_attr_by_cond(., Water == 'NEE')
			{
				attribute<.> per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			}
		}
		
		unit<uint32>  Gemeente2022
		:	StorageName = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/gem_2022.fss"
		,	StorageReadOnly = "True"
		{
			attribute<rdc_meter> geometry (poly);
			attribute<string>    statcode;
			attribute<string>    statnaam;
			attribute<string>    GM_NAAM;
			attribute<string>    name;
			
			attribute<uint32>    gem_nr := uint32(right(statcode, 4));
			attribute<.> per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<.> per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		}
		
		unit<uint32> Gemeente2021_single := unique(Gemeente2021/name)
		{
			attribute<string> name := replace(values, '/', '_', '-', '_', ' ', '_');
			attribute<ipoint> geometry0 (polygon) : = partitioned_union_polygon(ipolygon(Gemeente2021/geometry), Gemeente2021/Gemeente2021_single_rel);
			attribute<rdc_meter> geometry (polygon)  : = geometry0[rdc_meter];
			attribute<.> per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<.> per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
			
			attribute<string> GM_CODE := Gemeente2021/GM_CODE[invert(Gemeente2021/Gemeente2021_single_rel)];
			attribute<uint32> Code := uint32(right(GM_CODE, 4));
			attribute<string> GM_NAAM := Gemeente2021/GM_NAAM[invert(Gemeente2021/Gemeente2021_single_rel)];
			attribute<string> Label := GM_NAAM, DialogType = "LabelText";
			
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
	}
	
	unit<uint32> NL := subset(id(impl/Nl_src) == Impl/Nl_src/V/Nederland)
	{
		attribute<rdc_meter>  Geometry    (poly)            := impl/Nl_src/Geometry[nr_OrgEntity];
		attribute<.>          per_rdc_25m     (rdc_25m)     := poly2grid(geometry, rdc_25m);
		attribute<.>          per_rdc_250m    (rdc_250m)    := poly2grid(geometry, rdc_250m);
		attribute<.>          per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		attribute<.>          per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<.>          per_CompactedAdminDomain (CompactedAdminDomain) := select_data(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
		attribute<.>          per_CompactedAllocDomain (CompactedAllocDomain) := select_data(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
		attribute<bool>       IsNederland_25m  (rdc_25m)    := per_rdc_25m == 0;
		attribute<bool>       IsNederland_250m (rdc_250m)   := per_rdc_250m == 0;
		attribute<bool>       IsNederland_AllocDomain  (AllocDomain)       := per_AllocDomain == 0;
		attribute<bool>       IsNederland_AdminDomain  (AdminDomain)    := per_AdminDomain == 0;
		attribute<string>     name                          := impl/Nl_src/name[nr_OrgEntity];
		attribute<bool>       IsRegio (AllocDomain) := IsNederland_AllocDomain;
		
		parameter<bool> HeeftBuitengebied: [false];
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		
		unit<uint32> NL_BoundingBox : nrofrows = 1
		{
			parameter<rdc_mm_i32>  union_buurten    (poly)     := RegioIndelingen/buurt/src_2019/Land/union;
			parameter<rdc_mm_i32>  BoudingBox_minus_NL (poly)   := union_polygon - union_buurten;
			
			unit<uint32> OutsideNL : nrofrows = 1
			{
				attribute<rdc_meter> geometry (poly) := union_data(.,BoudingBox_minus_NL[rdc_meter]);
			}
			
			parameter<meter> x_min  := 0[meter];
			parameter<meter> x_max  := 280000[meter]; 
			parameter<meter> y_min  := 300000[meter];
			parameter<meter> y_max  := 625000[meter];
			
			parameter<rdc_meter> top_left     := point(x_min,y_max, rdc_meter);
			parameter<rdc_meter> top_right    := point(x_max,y_max, rdc_meter);
			parameter<rdc_meter> bottom_left  := point(x_min,y_min, rdc_meter);
			parameter<rdc_meter> bottom_right := point(x_max,y_min, rdc_meter);
			
			unit<uint32>              point_set    : nrofrows = 5
			{
				attribute<rdc_meter>      point        := union_data(., top_left, top_right, bottom_right, bottom_left, top_left);
				attribute<NL_BoundingBox> sequence_rel := const(0, .);
				attribute<.>              ordinal      := id(.);
			}
			
			attribute<rdc_meter>       polygon (poly)      := points2sequence(point_set/point, point_set/sequence_rel, point_set/ordinal);
			parameter<rdc_mm_i32>    union_polygon (poly) := union_polygon(polygon[rdc_mm_i32]);
		}
		
	}
	
	unit<uint32> Provincie
	: StorageName = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/provincie_2019.fss"
	, StorageReadOnly = "True"
	{
		attribute<rdc_meter>    Geometry (poly);
		attribute<string>       Label;
		attribute<string>       name;
		attribute<string>       afko;
		
		attribute<.>            per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<.>            per_CompactedAdminDomain (CompactedAdminDomain) := select_data(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
		attribute<.>            per_CompactedAllocDomain (CompactedAllocDomain) := select_data(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
		attribute<impl/Nl_src>  NL_src_rel                           := const(1[impl/Nl_src], .);
		
		unit<uint32> Sub := subset(id(Provincie) > 0[Provincie])
		{
			attribute<rdc_meter> Geometry (poly) := ../Geometry[Nr_OrgEntity];
			attribute<string> name := ../name[Nr_OrgEntity];
			
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		
		parameter<bool> HeeftBuitengebied: [true];
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint32>  Corop
	: StorageName = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/corop_2020.fss"
	, StorageReadOnly = "True"
	{
		attribute<rdc_meter> Geometry (poly);
		attribute<.>         id := id(.); //laten staan tbv discrete_alloc vereiste
		attribute<String>    Label;
		attribute<string>    name;
		attribute<string>    numbered_name;
		attribute<.>         per_rdc_10m  (rdc_10m)  := poly2grid(geometry, rdc_10m); //  tbv /SourceData/Grondgebruik/BBG/Dominant/Make100mgrids_allocation/J2015/Input/Compacted/ADomain
		attribute<.>         per_rdc_25m  (rdc_25m)  := poly2grid(geometry, rdc_25m); //  tbv /SourceData/Grondgebruik/BBG/Dominant/Make100mgrids_allocation/J2015/Input/Compacted/ADomain
		attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(geometry, rdc_100m); //  tbv /SourceData/Grondgebruik/BBG/Dominant/Make100mgrids_allocation/J2015/Input/Compacted/ADomain
		attribute<.>         per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		attribute<.>         per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<.>         per_CompactedAdminDomain (CompactedAdminDomain) := select_data(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
		attribute<.>         per_CompactedAllocDomain (CompactedAllocDomain) := select_data(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
		
		parameter<bool> HeeftBuitengebied: [false];
		
		container Relaties
		{
			attribute<..> Corop (..) := id(..);
			attribute<Geography/RegioIndelingen/Provincie> Provincie (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/Provincie/geometry);
		}
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint32>  Randstad
	: StorageName = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/Randstad.fss"
	, StorageReadOnly = "True"
	{
		attribute<rdc_meter> Geometry (poly);
		attribute<int32>     IsRandstad;
		attribute<.>         per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		attribute<.>         per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
	}
	
	unit<uint32>  NVM := NVM_2011;

	unit<uint32>  NVM_2011
	: StorageName = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/NVMregios_2011.fss"
	,	StorageReadOnly = "True"
	{
		attribute<rdc_meter>    Geometry (poly);
		attribute<string>       name;
		attribute<string>       label : DialogType = "LabelText";
		
		attribute<.>            per_AdminDomain          (AdminDomain)          := poly2grid(geometry, AdminDomain);
		attribute<.>            per_AllocDomain          (AllocDomain)          := poly2grid(geometry, AllocDomain);
		attribute<.>            per_CompactedAdminDomain (CompactedAdminDomain) := select_data(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
		attribute<.>            per_CompactedAllocDomain (CompactedAllocDomain) := select_data(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
		attribute<string>       NVM_2011_2_name := name == 'Almere' ? 'Amsterdam' : name;
		attribute<NVM_2011_2>   NVM_2011_2_rel := rlookup(NVM_2011_2_name, NVM_2011_2/name);
		
		parameter<bool> HeeftBuitengebied: [false];
		
		attribute<bool>         IsAmsterdam    := name == 'Amsterdam';
		
		container Relaties
		{
			attribute<RegioIndelingen/Gemeente/Gemeente2018> Gemeente2018 (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/Gemeente/Gemeente2018/Geometry);
			attribute<RegioIndelingen/Gemeente/Gemeente2019> Gemeente2019 (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/Gemeente/Gemeente2019/Geometry);
			attribute<RegioIndelingen/MRA8>                          MRA8 (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/MRA8/geometry);
			attribute<RegioIndelingen/MRA1>                          MRA1 (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/MRA1/geometry);
			attribute<Geography/RegioIndelingen/Corop>              Corop (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/Corop/geometry);
			attribute<Geography/RegioIndelingen/Provincie>      Provincie (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/Provincie/geometry);
		}
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint32>  NVM_2011_2
	: StorageName = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/NVMregios_2011_2.fss"
	,	StorageReadOnly = "True"
	{
		attribute<rdc_meter>    Geometry (poly);
		attribute<string>    name;
		attribute<string>    label : DialogType = "LabelText";
		attribute<.>         per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		attribute<.>         per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
	}
	
	unit<uint32> RESregio := unique(Gemeente/Gemeente2018/RESnaam)
	, DialogData  = "geometry"
	, DialogType  = "Map"
	{
		attribute<string>    label := values;
		attribute<rdc_meter> geometry (polygon) := partitioned_union_polygon(ipolygon(Gemeente/Gemeente2018/Geometry),Gemeente/Gemeente2018/RESregio_rel)[rdc_meter];
		attribute<.>         per_AllocDomain (AllocDomain) := poly2grid(Geometry, AllocDomain);
		attribute<.>         per_AdminDomain (AdminDomain) := poly2grid(Geometry, AdminDomain);
		
		parameter<bool> HeeftBuitengebied: [false];
	}
	
	unit<uint32> RES := RESregio
	{
		attribute<string> name := AsItemName(label);
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint32> Wijk2019 := Wijk/src_2019
	{
		parameter<.> Ijburg2Proxy: [867];
	}
	
	container Wijk
	{
		unit<uint32> src_2015
		:	StorageName     = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/wijk_2015.fss"
		,	StorageReadOnly = "True"
		{
			attribute<rdc_meter>    geometry (polygon);
			attribute<string>       WK_NAAM;
			attribute<string>       WK_CODE;
			attribute<string>       GM_NAAM;
			attribute<string>       label               := WK_NAAM ;
			attribute<string>       Gemeente_wijk       := GM_NAAM + "_" + WK_NAAM;
			attribute<.>            per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		}
		
		unit<uint32> src_2019
		:	StorageName     = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/wijk_2019.fss"
		,	StorageReadOnly = "True"
		{
			attribute<rdc_meter>    geometry (polygon);
			attribute<string>       WK_NAAM;
			attribute<string>       WK_CODE;
			attribute<string>       GM_NAAM;
			attribute<string>       Water;
			attribute<string>       label               := WK_NAAM ;
			attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.>            Per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<string> name := WK_NAAM;
			
			unit<uint32> Land := subset(Water == 'NEE')
			{
				attribute<rdc_meter>    Geometry (poly) := ../Geometry[nr_OrgEntity];
			}
			
			attribute<string> name2 := AsItemName(name);
		
			container V := for_each_nedv(name2, string(id(.))+'[..]', void, .);
		}
	}
	
	unit<uint32> Buurt2019 := Buurt/src_2021;
	
	container Buurt
	{
		unit<uint32> src_2015
		:	StorageName     = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/buurt_2015.fss"
		,	StorageReadOnly = "True"
		{
			attribute<rdc_meter>    geometry (polygon);
			attribute<string>       BU_NAAM;
			attribute<string>       BU_CODE;
			attribute<string>       label := BU_NAAM ;
			attribute<.>            per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		}
		
		unit<uint32> src_2019
		:	StorageName     = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/buurt_2019.fss"
		,	StorageReadOnly = "True"
		{
			attribute<rdc_meter>    geometry (polygon);
			attribute<string>       BU_NAAM;
			attribute<string>       BU_CODE;
			attribute<string>       Water;
			attribute<string>       label := BU_NAAM;
			attribute<string>       name := BU_NAAM;
			attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.>            per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			
			unit<uint32> Land := subset(Water == 'NEE')
			{
				attribute<rdc_meter>    Geometry (poly) := ../Geometry[nr_OrgEntity];
				parameter<rdc_mm_i32>   union (poly) := union_polygon(geometry[rdc_mm_i32]);
				attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(Geometry, AllocDomain);
				attribute<.>            per_AdminDomain (AdminDomain) := poly2grid(Geometry, AdminDomain);
			}
		}
		unit<uint32> src_2021
		:	StorageName     = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/buurt_2021.fss"
		,	StorageReadOnly = "True"
		{
			attribute<rdc_meter>    geometry (polygon);
			attribute<string>       BU_NAAM;
			attribute<string>       BU_CODE;
			attribute<string>       Water;
			attribute<string>       label := BU_NAAM;
			attribute<string>       name := BU_NAAM;
			attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.>            per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			
			unit<uint32> Land := subset(Water == 'NEE')
			{
				attribute<rdc_meter>    Geometry (poly) := ../Geometry[nr_OrgEntity];
				parameter<rdc_mm_i32>   union (poly) := union_polygon(geometry[rdc_mm_i32]);
				attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(Geometry, AllocDomain);
				attribute<.>            per_AdminDomain (AdminDomain) := poly2grid(Geometry, AdminDomain);
				
				attribute<string>       name := ../name[nr_OrgEntity];
				attribute<string>       label   := ../label[nr_OrgEntity];
				attribute<string>       BU_CODE := ../BU_CODE[nr_OrgEntity];
			}
		}
	}
	
	unit<uint32> LMSSubzone
	: 	StorageName = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/LMS_2011.fss"
	,	StorageReadOnly = "True"
	{
		attribute<rdc_meter>    Geometry (poly);
		attribute<uint32>       ZONE_ID;
		attribute<uint32>       GEM2011;
		attribute<string>       GEM_NAAM;
		attribute<uint32>       LMSSUB;
		attribute<uint32>       LMSSUB2004; // = LMSSubzone1379 zo lijkt het. Checken!
		attribute<uint8>        LAND;
		attribute<uint32>       gem11nr: = GEM2011;
		attribute<uint32>       code := ZONE_ID;
		attribute<string>       name0 := RegioIndelingen/Gemeente/Gemeente2019/Label[Relaties/Gemeente2019] + '_' + string(ZONE_ID);
		attribute<string>       name := replace(name0, '/', '_', '-', '_', ' ', '_','(','',')','','\''','','â','a','ú','u',',','','.','');
		attribute<.>            LMSSubzone_rel := id(.);
		attribute<bool>         IsIjburg2 := id(.) == 620[.];
		attribute<bool>         IsIjburg1 := id(.) == 621[.];
		attribute<Bool>         InNl := LAND == 1[uint8];
		attribute<uint32>       LmsSubF := LmsSub;
		attribute<.>            per_rdc_100m    (rdc_100m) := poly2grid(geometry, rdc_100m);
		attribute<.>            per_rdc_10m     (rdc_10m) := poly2grid(geometry, rdc_10m);
		attribute<.>            per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<string> Label := name, DialogType = "LabelText";
		
		parameter<.> Ijburg1: [621];
		
		container Relaties
		{
			attribute<..> LMSSubzone (..) := id(..);
			attribute<RegioIndelingen/Gemeente/Gemeente2018> Gemeente2018 (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/Gemeente/Gemeente2018/Geometry);
			attribute<RegioIndelingen/Gemeente/Gemeente2019> Gemeente2019 (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/Gemeente/Gemeente2019/Geometry);
			attribute<RegioIndelingen/Gemeente2019_single> Gemeente2019_single (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/Gemeente2019_single/Geometry);
			attribute<RegioIndelingen/Gemeente/Gemeente2021_single> Gemeente2021_single (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/Gemeente/Gemeente2021_single/Geometry);
			attribute<RegioIndelingen/MRA8>                          MRA8 (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/MRA8/geometry);
			attribute<RegioIndelingen/MRA1>                          MRA1 (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/MRA1/geometry);
			attribute<RegioIndelingen/NVM_2011>                  NVM_2011 (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/NVM_2011/geometry);
			attribute<RegioIndelingen/NVM_2011_2>              NVM_2011_2 (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/NVM_2011_2/geometry);
			attribute<Geography/RegioIndelingen/Corop>              Corop (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/Corop/geometry);
			attribute<Geography/RegioIndelingen/Provincie>      Provincie (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/Provincie/geometry);
			attribute<Classifications/StRegio>                    StRegio (..) := point_in_polygon(centroid_or_mid(../Geometry), Classifications/StRegio/geometry);
			attribute<Geography/RegioIndelingen/NL>                    NL (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/NL/geometry);
		}
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint32> Grootstedelijke_agglomeraties 
	: StorageName = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/CBS_grootstedelijke_agglomeratie_2012.fss"
	,	StorageReadOnly = "True"
	{
		attribute<rdc_meter>    Geometry (poly);
		attribute<string>       statnaam;
		attribute<string>       label := statnaam, DialogType = "LabelText";
		attribute<.>            per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
	} 
	
	unit<uint32> Bevolkingskern_2011
	: StorageName = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/bevolkingskern_2011.fss"
	,	StorageReadOnly = "True"
	{
		attribute<rdc_meter>    Geometry (poly);
		attribute<float64>      BEV11TOT;
		attribute<bool>         isMeerdan5000inw := BEV11TOT >= 5000[float64];
		attribute<bool>         isMeerdan10Kinw  := BEV11TOT >= 10000[float64];
		attribute<bool>         isMeerdan15Kinw  := BEV11TOT >= 15000[float64];
		attribute<bool>         isMeerdan20Kinw  := BEV11TOT >= 20000[float64];
		attribute<bool>         isMeerdan25Kinw  := BEV11TOT >= 25000[float64];
		attribute<bool>         isMeerdan50Kinw  := BEV11TOT >= 50000[float64];
		attribute<bool>         isMeerdan75Kinw  := BEV11TOT >= 75000[float64];
		attribute<bool>         isMeerdan100Kinw := BEV11TOT >= 100000[float64];
		attribute<bool>         isMeerdan300Kinw := BEV11TOT >= 300000[float64];
		attribute<bool>         isMinderdan20Kinw := BEV11TOT < 20000[float64];
		attribute<bool>         isMinderdan50Kinw := BEV11TOT < 50000[float64];
		
		attribute<.>            per_AdminDomain    (AdminDomain) := poly2grid(geometry, AdminDomain);
		attribute<.>            per_AllocDomain    (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<bool>         Is_bbg_AdminDomain (AdminDomain) := IsDefined(per_AdminDomain);
		attribute<bool>         Is_bbg_AllocDomain (AllocDomain) := IsDefined(Per_AllocDomain);
		
		unit<uint32> MetMeerdan5Kinw := subset(isMeerdan5000inw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
		
		unit<uint32> MetMinderdan20Kinw := subset(isMinderdan20Kinw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
		
		unit<uint32> MetMeerdan20Kinw := subset(isMeerdan20Kinw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
		
		unit<uint32> MetMeerdan25Kinw := subset(isMeerdan25Kinw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
		
		unit<uint32> MetMeerdan50Kinw := subset(isMeerdan50Kinw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
		
		unit<uint32> MetMinderdan50Kinw := subset(isMinderdan50Kinw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
		
		unit<uint32> MetMeerdan100Kinw := subset(isMeerdan100Kinw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
		
		unit<uint32> MetMeerdan300Kinw := subset(isMeerdan300Kinw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
	}
}