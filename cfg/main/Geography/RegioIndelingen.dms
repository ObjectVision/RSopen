container RegioIndelingen
{ 
	#include<Impl.dms>
	
	unit<uint32> CBS_Gebiedsindelingen_jaren := range(uint32, 2015, 2023)
	{
		attribute<uint32> jaar            := id(.);
		attribute<string> name            := 'Y'+string(jaar);
		attribute<bool>   IsGeneraliseerd := jaar < 2019;
	}
	container CBS :=
		for_each_ne(
			CBS_Gebiedsindelingen_jaren/name
			, 'Read_Gebiedsindelingen_gpkg_T('+quote(string(CBS_Gebiedsindelingen_jaren/jaar))+')'
		)
	{
		container Last := =last(CBS_Gebiedsindelingen_jaren/name);
	}

	Template Read_Gebiedsindelingen_gpkg_T
	{
		parameter<string> jaar;
		//
		parameter<bool>   IsGeneraliseerd     := rjoin('Y'+jaar, CBS_Gebiedsindelingen_jaren/name, CBS_Gebiedsindelingen_jaren/IsGeneraliseerd);
		parameter<string> gegeneraliseerd_str := IsGeneraliseerd ? '_gegeneraliseerd' : '_niet_gegeneraliseerd';
		
		container gpkg
		:	StorageName     = "='%RSLDataDir%/RegioIndelingen/cbsgebiedsindelingen'+jaar+'.gpkg'"
		, 	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "alltables"
		,	DialogData      = "rdc_meter"
		,	URL             = "https://www.cbs.nl/nl-nl/dossier/nederland-regionaal/geografische-data/cbs-gebiedsindelingen"
		{
			unit<uint32> provincie_gegeneraliseerd
			{
				attribute<string>    label := statnaam;	
			}
		}
		unit<uint32> Buurt     := ='gpkg/buurt'+gegeneraliseerd_str
		{
			attribute<rdc_meter> geometry                                 (poly) := ='gpkg/buurt'+gegeneraliseerd_str+'/geometry[rdc_meter]';
			attribute<string>    label                                           := statnaam;
			attribute<string>    name                                            := AsItemName(statnaam);
			attribute<.>         per_AdminDomain                   (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		unit<uint32> Wijk      := ='gpkg/wijk'+gegeneraliseerd_str
		{
			attribute<rdc_meter> geometry                                 (poly) := ='gpkg/wijk'+gegeneraliseerd_str+'/geometry[rdc_meter]';
			attribute<string>    label                                           := statnaam;
			attribute<string>    name                                            := AsItemName(statnaam);
			attribute<.>         per_AdminDomain                   (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		unit<uint32> Gemeente  := ='gpkg/gemeente'+gegeneraliseerd_str
		{
			attribute<rdc_meter>      geometry                                 (poly) := ='gpkg/gemeente'+gegeneraliseerd_str+'/geometry[rdc_meter]';
			// attribute<rdc_meter_base> geometry_base                       (poly) := ='gpkg/gemeente'+gegeneraliseerd_str+'/geometry';
			attribute<string>    label                                           := statnaam;
			attribute<string>    name                                            := AsItemName(statnaam);
			attribute<uint32>    gem_nr                                          := uint32(right(statcode, 4));
			attribute<.>         per_AdminDomain                   (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.>         per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
			attribute<.>         per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
			
			// attribute<Impl/Read_NVM_2011_COROP2022Begrenzing_shp/ZonderBuitengebied>  NVM_2011_rel := point_in_polygon(centroid_or_mid(geometry), Impl/Read_NVM_2011_COROP2022Begrenzing_shp/ZonderBuitengebied/geometry);
			attribute<Impl/Read_NVM_2011_shp/ZonderBuitengebied>  NVM_2011_rel := point_in_polygon(centroid_or_mid(geometry), Impl/Read_NVM_2011_shp/ZonderBuitengebied/geometry);
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		unit<uint32> COROP     := gpkg/coropgebied_gegeneraliseerd
		{
			attribute<rdc_meter> geometry                                 (poly) := gpkg/coropgebied_gegeneraliseerd/geometry[rdc_meter];
			attribute<string>    label                                           := statnaam;
			attribute<string>    name                                            := AsItemName(statnaam);
			attribute<.>         per_AdminDomain                   (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.>         per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
			attribute<.>         per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
			parameter<bool>      HeeftBuitengebied                               : [false];
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		unit<uint32> Provincie := gpkg/provincie_gegeneraliseerd
		{
			attribute<rdc_meter> geometry                                 (poly) := gpkg/provincie_gegeneraliseerd/geometry[rdc_meter];
			// attribute<string>    label                                           := statnaam;
			attribute<string>    name                                            := replace(AsItemName(statnaam), 'Fryslân', 'Friesland');
			attribute<.>         per_AdminDomain                   (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.>         per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
			attribute<.>         per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
			parameter<bool>      HeeftBuitengebied                               : [false];
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		
		
		
		// unit<uint32> Buurt     := ='gpkg/cbs_buurt_'+jaar+gegeneraliseerd_str
		// {
			// attribute<string>    label                                           := statnaam;
			// attribute<string>    name                                            := AsItemName(statnaam);
			// attribute<.>         per_AdminDomain                   (AdminDomain) := poly2grid(geometry, AdminDomain);
			// attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			// container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		// }
		// unit<uint32> Wijk      := ='gpkg/cbs_wijk_'+jaar+gegeneraliseerd_str
		// {
			// attribute<string>    label                                           := statnaam;
			// attribute<string>    name                                            := AsItemName(statnaam);
			// attribute<.>         per_AdminDomain                   (AdminDomain) := poly2grid(geometry, AdminDomain);
			// attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			// container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		// }
		// unit<uint32> Gemeente  := ='gpkg/cbs_gemeente_'+jaar+gegeneraliseerd_str
		// {
			// attribute<string>    label                                           := statnaam;
			// attribute<string>    name                                            := AsItemName(statnaam);
			// attribute<uint32>    gem_nr                                          := uint32(right(statcode, 4));
			// attribute<.>         per_AdminDomain                   (AdminDomain) := poly2grid(geometry, AdminDomain);
			// attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			// attribute<.>         per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
			// attribute<.>         per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
			
			// attribute<Impl/Read_NVM_2011_shp/ZonderBuitengebied>  NVM_2011_rel := point_in_polygon(centroid_or_mid(geometry), Impl/Read_NVM_2011_shp/ZonderBuitengebied/geometry);
			
			// container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		// }
		// unit<uint32> COROP     := ='gpkg/cbs_coropgebied_'+jaar+'_gegeneraliseerd'
		// {
			// attribute<string>    label                                           := statnaam;
			// attribute<string>    name                                            := AsItemName(statnaam);
			// attribute<.>         per_AdminDomain                   (AdminDomain) := poly2grid(geometry, AdminDomain);
			// attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			// attribute<.>         per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
			// attribute<.>         per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
			// parameter<bool>      HeeftBuitengebied                               : [false];
			// container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		// }
		// unit<uint32> Provincie := ='gpkg/cbs_provincie_'+jaar+'_gegeneraliseerd'
		// {
			// attribute<string>    name                                            := replace(AsItemName(statnaam), 'Fryslân', 'Friesland');
			// attribute<.>         per_AdminDomain                   (AdminDomain) := poly2grid(geometry, AdminDomain);
			// attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			// attribute<.>         per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
			// attribute<.>         per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
			// parameter<bool>      HeeftBuitengebied                               : [false];
			// container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		// }
	}
	
	unit<uint32> NL : nrofrows = 1
	{
		attribute<rdc_meter>  Geometry (poly)               := union_data(., union_polygon(NVM/geometry[rdc_mm_i32])[rdc_meter]);
		attribute<string>     name                          : ['Nederland'];
		
		attribute<.>          per_rdc_25m     (rdc_25m)     := poly2grid(geometry, rdc_25m);
		attribute<.>          per_rdc_250m    (rdc_250m)    := poly2grid(geometry, rdc_250m);
		attribute<.>          per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		attribute<.>          per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<.>          per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
		attribute<.>          per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
		attribute<bool>       IsNederland_25m  (rdc_25m)    := per_rdc_25m == 0;
		attribute<bool>       IsNederland_250m (rdc_250m)   := per_rdc_250m == 0;
		attribute<bool>       IsNederland_AllocDomain  (AllocDomain)       := per_AllocDomain == 0;
		attribute<bool>       IsNederland_AdminDomain  (AdminDomain)    := per_AdminDomain == 0;
		attribute<bool>       IsRegio (AllocDomain) := IsNederland_AllocDomain;
		
		parameter<bool> HeeftBuitengebied: [false];
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		
		unit<uint32> NL_BoundingBox : nrofrows = 1
		{
			parameter<rdc_mm_i32>  union_NL    (poly)     :=  union_polygon(NVM/geometry[rdc_mm_i32]);
			parameter<rdc_mm_i32>  BoudingBox_minus_NL (poly)   := union_polygon - union_NL;
			
			unit<uint32> OutsideNL : nrofrows = 1
			{
				attribute<rdc_meter> geometry (poly) := union_data(.,BoudingBox_minus_NL[rdc_meter]);
			}
			
			parameter<meter> x_min  := 0[meter];
			parameter<meter> x_max  := 280000[meter]; 
			parameter<meter> y_min  := 300000[meter];
			parameter<meter> y_max  := 625000[meter];
			
			parameter<rdc_meter> top_left     := point_yx(x_min,y_max, rdc_meter);
			parameter<rdc_meter> top_right    := point_yx(x_max,y_max, rdc_meter);
			parameter<rdc_meter> bottom_left  := point_yx(x_min,y_min, rdc_meter);
			parameter<rdc_meter> bottom_right := point_yx(x_max,y_min, rdc_meter);
			
			unit<uint32>              point_set    : nrofrows = 5
			{
				attribute<rdc_meter>      point        := union_data(., top_left, top_right, bottom_right, bottom_left, top_left);
				attribute<NL_BoundingBox> sequence_rel := const(0, .);
				attribute<.>              ordinal      := id(.);
			}
			
			attribute<rdc_meter>       polygon (poly)      := points2sequence(point_set/point, point_set/sequence_rel, point_set/ordinal);
			parameter<rdc_mm_i32>    union_polygon (poly) := union_polygon(polygon[rdc_mm_i32]);
		}
	}
	
	unit<uint32>  NVM := Impl/Read_NVM_2011_shp/ZonderBuitengebied
	{
		attribute<rdc_meter>    geometry                 (poly)                 := partitioned_union_polygon(CBS/last/Gemeente/geometry[rdc_mm_i32], CBS/last/Gemeente/NVM_2011_rel)[rdc_meter];

		attribute<.>            per_AdminDomain          (AdminDomain)          := poly2grid(geometry, AdminDomain);
		attribute<.>            per_AllocDomain          (AllocDomain)          := poly2grid(geometry, AllocDomain);
		attribute<.>            per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
		attribute<.>            per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
		parameter<bool>         HeeftBuitengebied                               : [false];
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint32> RES := unique(Impl/Read_GemeenteRES_2018_gdb/RESnaam)
	{
		attribute<string>    label := values;
		attribute<rdc_meter> geometry (polygon) := partitioned_union_polygon(ipolygon(Impl/Read_GemeenteRES_2018_gdb/Geometry), rlookup(Impl/Read_GemeenteRES_2018_gdb/RESnaam, values))[rdc_meter];
		attribute<.>         per_AllocDomain (AllocDomain) := poly2grid(Geometry, AllocDomain);
		attribute<.>         per_AdminDomain (AdminDomain) := poly2grid(Geometry, AdminDomain);
		parameter<bool>      HeeftBuitengebied: [false];
		attribute<string>    name := AsItemName(label);
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint32> LMSSubzone := /geography/RegioIndelingen/Impl/Read_LMSSubzone_shp
	{
		attribute<uint32>       gem11nr: = uint32(GEM2011);
		attribute<uint32>       code := uint32(ZONE_ID);
		attribute<string>       name0 := CBS/y2019/Gemeente/statnaam[Relaties/Gemeente2019] + '_' + string(ZONE_ID);
		attribute<string>       name := !IsDefined(name0) ? 'Amsterdam_'+string(ZONE_ID) : replace(name0, '/', '_', '-', '_', ' ', '_','(','',')','','\''','','â','a','ú','u',',','','.','');
		attribute<.>            LMSSubzone_rel := id(.);
		parameter<.>            Ijburg2_proxy := V/Amsterdam_621;
		attribute<bool>         IsIjburg2 := id(.) == V/Amsterdam_621;
		attribute<bool>         IsIjburg1 := id(.) == V/Amsterdam_620;
		
		attribute<bool>         IsIJburg2_AdminDomain (AdminDomain) := IsIjburg2[per_AdminDomain];
		attribute<bool>         IsIJburg2_AllocDomain (AllocDomain) := IsIjburg2[per_AllocDomain];
		
		attribute<Bool>         InNl := LAND == 1[uint8];
		attribute<uint32>       LmsSubF := LmsSub;
		attribute<.>            per_rdc_100m    (rdc_100m) := poly2grid(geometry, rdc_100m);
		attribute<.>            per_rdc_10m     (rdc_10m) := poly2grid(geometry, rdc_10m);
		attribute<.>            per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<string> Label := name, DialogType = "LabelText";
		
		parameter<.> Ijburg1: [621];
		
		container Relaties
		{
			attribute<..> LMSSubzone (..) := id(..);
			attribute<CBS/y2019/Gemeente> Gemeente2019 (..) := point_in_polygon(centroid_or_mid(../Geometry), CBS/y2019/Gemeente/Geometry);
			attribute<RegioIndelingen/NVM_2011>                  NVM_2011 (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/NVM_2011/geometry);
			attribute<Geography/RegioIndelingen/NL>                    NL (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/NL/geometry);
		}
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint32> Grootstedelijke_agglomeraties := impl/Read_Grootstedelijke_agglomeraties_shp
	{
		attribute<string>       name                          := AsItemName(statnaam);
		attribute<.>            per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	} 
	
 	// unit<uint32>  Randstad
	// : StorageName = "%LocalDataDir%/RSopen/Basedata/RegioIndelingen/Randstad.fss"
	// , StorageReadOnly = "True"
	// {
		// attribute<rdc_meter> Geometry (poly);
		// attribute<int32>     IsRandstad;
		// attribute<.>         per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		// attribute<.>         per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
	// }
	
	// unit<uint32> IJburg := CBS/y2019/Wijk
	// {
		// parameter<.> Ijburg2Proxy: [867];
	// }
	
	
	
	unit<uint32> Bevolkingskern_2011 := Impl/Read_Bevolkingskern_2011_shp
	{
		attribute<bool>         isMeerdan5000inw := Populatie >= 5000[float64];
		attribute<bool>         isMeerdan10Kinw  := Populatie >= 10000[float64];
		attribute<bool>         isMeerdan15Kinw  := Populatie >= 15000[float64];
		attribute<bool>         isMeerdan20Kinw  := Populatie >= 20000[float64];
		attribute<bool>         isMeerdan25Kinw  := Populatie >= 25000[float64];
		attribute<bool>         isMeerdan50Kinw  := Populatie >= 50000[float64];
		attribute<bool>         isMeerdan75Kinw  := Populatie >= 75000[float64];
		attribute<bool>         isMeerdan100Kinw := Populatie >= 100000[float64];
		attribute<bool>         isMeerdan300Kinw := Populatie >= 300000[float64];
		attribute<bool>         isMinderdan20Kinw := Populatie < 20000[float64];
		attribute<bool>         isMinderdan50Kinw := Populatie < 50000[float64];
		
		attribute<.>            per_AdminDomain    (AdminDomain) := poly2grid(geometry, AdminDomain);
		attribute<.>            per_AllocDomain    (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<bool>         Is_bbg_AdminDomain (AdminDomain) := IsDefined(per_AdminDomain);
		attribute<bool>         Is_bbg_AllocDomain (AllocDomain) := IsDefined(Per_AllocDomain);
		
		unit<uint32> MetMeerdan5Kinw := subset(isMeerdan5000inw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_multi_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
		
		unit<uint32> MetMinderdan20Kinw := subset(isMinderdan20Kinw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_multi_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
		
		unit<uint32> MetMeerdan20Kinw := subset(isMeerdan20Kinw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_multi_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
		
		unit<uint32> MetMeerdan25Kinw := subset(isMeerdan25Kinw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_multi_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
		
		unit<uint32> MetMeerdan50Kinw := subset(isMeerdan50Kinw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_multi_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
		
		unit<uint32> MetMinderdan50Kinw := subset(isMinderdan50Kinw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_multi_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
		
		unit<uint32> MetMeerdan100Kinw := subset(isMeerdan100Kinw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_multi_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
		
		unit<uint32> MetMeerdan300Kinw := subset(isMeerdan300Kinw)
		{
			attribute<ipoint> Geometry_int (poly) := (Geometry[rdc_mm_i32])[Nr_OrgEntity];
			
			unit<uint32> split_geometry := split_polygon(Geometry_int), DisableStorage = "true"
			{
				attribute<dpoint> Buffer1000m_d (poly):= bg_buffer_multi_polygon(dpolygon(geometry), 1000000d, 8b);
				attribute<ipoint> Buffer1000m_int (poly):= ipolygon(Buffer1000m_d);
				attribute<rdc_meter> MetBuffer (poly) := Buffer1000m_int[rdc_meter]
				{
					attribute<..> per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
					attribute<bool> Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain);
				}
			}
		}
	}
}