container CreateTiles
{
	parameter<float32> NrofTiles_horizontal := 10f;
	parameter<float32> NrofTiles_vertical   := 10f;
	
	//BOUNDING BOX OF THE NETHERLANDS
	parameter<meter> x_min := 0[meter];
	parameter<meter> x_max := 280000[meter];
	parameter<meter> y_min := 300000[meter];
	parameter<meter> y_max := 625000[meter];
	
	parameter<meter> x_interval := (x_max - x_min) / NrofTiles_horizontal;
	parameter<meter> y_interval := (y_max - y_min) / NrofTiles_vertical;
	
	unit<uint32> TileSet := range(uint32, 0, uint32(NrofTiles_horizontal * NrofTiles_vertical))
	{
		attribute<uint32> values       := id(.);
		attribute<string> name         := 'Tile'+ string(values);
		attribute<uint32> row_number   := values / NrofTiles_horizontal[uint32];
		attribute<uint32> col_number   := mod(values, NrofTiles_horizontal[uint32]);
	}
	
	container LoopPolygons := 
		for_each_ne(
			TileSet/name
			,'CreatePolygons('+string(TileSet/values)+','+string(TileSet/row_number)+','+string(TileSet/col_number)+')'
		);
	
	Template CreatePolygons
	{
		parameter<uint32> TileNumber;
		parameter<uint32> row_number;
		parameter<uint32> col_number;
		
		unit<uint32> shape: nrofrows = 1
		{
			attribute<rdc_meter> left_top        := const(point_xy(x_min + col_number[float32]      * x_interval, y_max - row_number[float32]      * y_interval, rdc_meter),.);
			attribute<rdc_meter> right_top       := const(point_xy(x_min + (col_number[float32]+1f) * x_interval, y_max - row_number[float32]      * y_interval, rdc_meter),.);
			attribute<rdc_meter> right_bottom    := const(point_xy(x_min + (col_number[float32]+1f) * x_interval, y_max - (row_number[float32]+1f) * y_interval, rdc_meter),.);
			attribute<rdc_meter> left_bottom     := const(point_xy(x_min + col_number[float32]      * x_interval, y_max - (row_number[float32]+1f) * y_interval, rdc_meter),.);
			
			attribute<rdc_meter> geometry (poly) := points2sequence(pointset/point, pointset/sequence, pointset/order);
			attribute<string> name         := const('Tile' + string(TileNumber),.);
		}
		
		unit<uint32> pointset : nrofrows = 5
		{
			attribute<rdc_meter>      point    := union_data(., shape/left_top, shape/right_top, shape/right_bottom, shape/left_bottom, shape/left_top);
			attribute<shape>    sequence := const(0,., shape);
			attribute<uint32>   order    := id(.);
		}
	}
}