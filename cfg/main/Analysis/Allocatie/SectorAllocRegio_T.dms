Template SectorAllocRegio_T
{
	//
	unit<uint8>                 SectorAllocRegio;
	parameter<SectorAllocRegio> id;
	container                   StateVoorAllocatie;
	container                   Context0;
	parameter<uint8>            AantalIters;
	container                   Impl;
	//
	
	parameter<string> name            := SectorAllocRegio/name[id];
	parameter<string> Sector_name     := SectorAllocRegio/sector_name[id];
	parameter<string> AllocRegio_name := SectorAllocRegio/AllocRegio_name[id];
	parameter<string> AllocRegio_path := SectorAllocRegio/AllocRegio_path[id];
	
	unit<uint32> AllocRegio := =AllocRegio_path;
	unit<uint8>  SubSector  := = SectorAllocRegio/Subsector_ref[id];
	
	container Context := Context0
	{
		container ThisSectorAllocRegio := ..;
		parameter<string> ThisSectorAllocRegioName := ThisSectorAllocRegio/name;
		parameter<string> Prev_SectorAllocRegio_Name := rjoin(ThisSectorAllocRegio/name, SectorAllocRegio/name, SectorAllocRegio/PrevName);
	}
	
	unit<uint8> Iter := range(uint8, 0[uint8], AantalIters)
	{
		attribute<string> name := 'Iter_'+string(id(.));
		attribute<bool>   IsFirstIter := id(.) == 0b;
		
		attribute<string> prevname   := IsFirstIter ? 'Start' : name[id(.) - min_elem( id(.), 1b)];
		attribute<string> PrevState := IsFirstIter ? 'StateVoorAllocatie' : Iter/prevname+'/StateNaAllocatie';
		attribute<string> Label := name, DialogType = "LabelText";
	}
	
	// Iteraties zijn nodig om niet vervulde restclaims in een iteratie in een volgende iteratie te vervullen. 
	container Iters_Normaal :=
		for_each_ne(
			Iter/name,
			'Iter_T(
					'+string(id(Iter))+'[Iter]
					, '+Iter/PrevState+'
					, Context
					, Iter
					, Impl
					, FALSE
				)'
		)
	{
		container LastIter := =last(Iter/name);
	}
	
	container Iters_Enkel
	{
		container Iter_0 := = 
			 'Iter_T(
					0[Iter]
					,StateVoorAllocatie
					,Context
					,Iter
					,Impl
					,TRUE
				)';
		
		container LastIter := ='Iter_0';
	}
	
	parameter<string> Iter_str := Sector_name == 'Zon' || Sector_name == 'Verblijfsrecreatie' ? 'Iters_Enkel' : 'Iters_Normaal';
	
	container Iters := =Iter_str
	{
	
		parameter<bool> HasEnoughIteraties_Normaal := ='Iters_Normaal/'+last(Iter/name)+'/Impl/StopCriterium';
		parameter<bool> HasEnoughIteraties_Enkel   := ='Iters_Enkel/Iter_0/Impl/StopCriterium';
		parameter<bool> HasEnoughIteraties         := =Iter_str == 'Iters_Enkel' ? 'HasEnoughIteraties_Enkel' : 'HasEnoughIteraties_Normaal';
		
		parameter<bool> HasNotEnoughIteraties := NOT(HasEnoughIteraties);
	}
	
	#include<Restricties_Dynamisch_Wind.dms>
	
	container StateNaAllocatie := ='Iters/LastIter/StateNaAllocatie', IntegrityCheck = "Iters/HasEnoughIteraties";
}