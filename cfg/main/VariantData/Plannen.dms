////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Dit is RSOpen, de open source versie van het model RuimteScanner. Het scipt wordt uitgegeven onder GNU-GPL licentie.
//
// RSOpen is ontwikkeld door PBL Planbureau voor de Leefomgeving, i.s.m Object Vision B.V. en VU Vrije Universiteit Amsterdam.
// Opdrachtgever/ontwikkelaar PBL: Bart Rijken
// Contactpersoon/ontwikkelaar Object Vision B.V.: Jip Claassens (jclaassens@objectvision.nl)
// Contacpersoon PBL: Bas van Bemmel (Bas.vanBemmel@pbl.nl)
//
// Deze file bevat de plancapaciteit per sector, voor zover beschikbaar. Deze claims spelen een rol in o.a. de zeef en treden en dus, indirect, op de allocatie.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

container Plannen : using = "geography"
{
	container Totaal
	{
		parameter<string> GenericSrcRef := 'SourceData/Plancapaciteit/@A@/NL/@B@';
		
		container per_AllocDomain := for_each_ne(/Classifications/Modellering/HardheidK/name, 'T(GenericSrcRef, '+quote('AllocDomain')+', '+quote(/Classifications/Modellering/HardheidK/name)+')');
		container per_AdminDomain := for_each_ne(/Classifications/Modellering/HardheidK/name, 'T(GenericSrcRef, '+quote('AdminDomain')+', '+quote(/Classifications/Modellering/HardheidK/name)+')');
		
		container per_CompactedAdminDomain := for_each_ne(Classifications/Modellering/HardheidK/name, 'per_Compacted_T('+quote(Classifications/Modellering/HardheidK/name)+', ''AdminDomain'')');
		container per_CompactedAllocDomain := for_each_ne(Classifications/Modellering/HardheidK/name, 'per_Compacted_T('+quote(Classifications/Modellering/HardheidK/name)+', ''AllocDomain'')');
		
		Template per_Compacted_T
		{
			//
			parameter<string> Hardheid_name;
			parameter<string> OrgDomainStr;
			//
			
			unit<uint64> CompactedDomain := ='Compacted'+OrgDomainStr;
			
			container Result := 
				for_each_nedv(
					Sector/name
					, 'collect_by_cond(Compacted'+OrgDomainStr+', '+OrgDomainStr+'/IsCompactedDomain, per_'+OrgDomainStr+'/'+Hardheid_name+'/Result/'+Sector/name+')'
					, CompactedDomain
					, bool
				);
		}
	}
	
	Template T
	{
		//
		parameter<string> GenericSrcRef;
		parameter<string> Domain_ref;
		parameter<string> HardheidK_name;
		//
		
		unit<ipoint> domain := = Domain_ref;
		
		container Result
		{
			attribute<bool> Wonen              (domain) := = replace(GenericSrcRef, '@A@', 'Wonen' , '@B@', 'Per_HardheidXDomainK/'+HardheidK_name+'/'+Domain_ref+'/IsHardheidK');
			attribute<bool> Werken             (domain) := = replace(GenericSrcRef, '@A@', 'Werken', '@B@', 'Per_HardheidXDomainK/'+HardheidK_name+'/'+Domain_ref+'/IsHardheidK');
			
			attribute<bool> Wind               (domain) := = 'IsDefined('+replace(GenericSrcRef, '@A@', 'Wind'              , '@B@', HardheidK_name)+'/Per_'+Domain_ref+')';
			attribute<bool> Zon                (domain) := = 'IsDefined('+replace(GenericSrcRef, '@A@', 'Zon'               , '@B@', HardheidK_name)+'/Per_'+Domain_ref+')';
			attribute<bool> Verblijfsrecreatie (domain) := = 'IsDefined('+replace(GenericSrcRef, '@A@', 'Verblijfsrecreatie', '@B@', HardheidK_name)+'/per_'+Domain_ref+')';
		}
	}
}