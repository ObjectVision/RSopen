container Statisch
: Descr = "Hier worden restrictisch bepaald voor het plaatsen van windturbines. In deze container de statisch veronderstelde elementen."
{
	unit<uint32> Gemeenten := RegioIndelingen/CBS/last/gemeente;
	unit<uint32> Wijken    := RegioIndelingen/CBS/last/wijk;
	unit<uint32> Provincies:= RegioIndelingen/CBS/last/Provincie;
	unit<uint32> COROP     := RegioIndelingen/CBS/last/COROP;
	unit<uint32> NVM       := RegioIndelingen/NVM;
	
	unit<uint32> Bestaande_kassen := OrgPath/Bestaande_kassen
	, Descr = "3.  bestaande kassen"
	{
		attribute<rdc_meter> geometry (poly) := OrgPath/Bestaande_kassen/geometry_simpl;
		attribute<bool>      IsNietToegestaan (AdminDomain)   := IsDefined(poly2grid(geometry, AdminDomain));
	}
	
	unit<uint32> Buisleidingen := OrgPath/Buisleidingen_bestaand
	, Descr = "5.  buisleidingen ondergronds --> afstand = MaxElem(ashoogte + 1/2 * rotordiameter, max werpafstand bij nom. toerental)
				5.  buisleidingen bovengronds --> afstand = max werpafstand bij nom. toerental"
	{
		attribute<rdc_meter> geometry_buffer (poly) := OrgPath/Buisleidingen_bestaand/geometry_simpl;
		attribute<bool>      IsNietToegestaan (AdminDomain)   := IsDefined(poly2grid(geometry_buffer, AdminDomain));
	}
	
	unit<uint32> Hoogspanning := select_with_org_rel(SourceData/Energie/RES10_concept/Analysekaarten/RES_4_elektriciteit_infrastructuur/tennet_kabels_en_leidingen_v1/SPANNINGSN >= 100d)
	, Descr = "6.  Hoogspanning --> afstand = MaxElem(ashoogte + 1/2 * rotordiameter, max werpafstand bij nom. toerental)"
	{
		attribute<rdc_meter> geometry        (arc)  := SourceData/Energie/RES10_concept/Analysekaarten/RES_4_elektriciteit_infrastructuur/tennet_kabels_en_leidingen_v1/geometry_simpl[org_rel];
		attribute<rdc_meter> geometry_buffer (dyna_points, poly) := Punten_Buffer/geometry;
		attribute<bool>      IsNietToegestaan (AdminDomain)   := IsDefined(poly2grid(geometry_buffer, AdminDomain));
		
		unit<uint32>         segments               := arc2segm(geometry);
		unit<uint32>         dyna_points            := dyna_point(segments/point, segments/nextpoint, 10d)
		{
			attribute<rdc_meter> geometry := point;
		}
		container Punten_Buffer := Templates/PointBuffer(dyna_points, max_elem(CaseClassifications/WindTurbineType/Ashoogte + 0.5f * CaseClassifications/WindTurbineType/RotorDiameter, CaseClassifications/WindTurbineType/MaxWerpAfstandNom));
	}
	
	unit<uint32> Luchthaven := OrgPath/Luchthaven
	, Descr = "8.  Luchthaven"
	{
		attribute<rdc_meter> geometry_buffer (poly) := OrgPath/Luchthaven/geometry_simpl;
		
		attribute<bool> IsNietToegestaan  (AdminDomain) := IsNietToegestaan0 && !OR(
			IsNietToegestaan0/Rotterdam,
			IsNietToegestaan0/Eindhoven,
			IsNietToegestaan0/Lelystad,
			IsNietToegestaan0/Maastricht,
			IsNietToegestaan0/Groningen
		);
		
		attribute<bool> IsNietToegestaan0        (AdminDomain) := IsDefined(poly2grid(geometry_buffer, AdminDomain))
		{
			attribute<bool> Rotterdam (AdminDomain) := . && Provincies/Per_AdminDomain == Provincies/V/Zuid_Holland && !(RegioIndelingen/RES/Per_AdminDomain == RegioIndelingen/RES/V/Holland_Rijnland);
			attribute<bool> Eindhoven (AdminDomain) := . && OR(
				Gemeenten/Per_AdminDomain == Gemeenten/V/Bladel,
				Gemeenten/Per_AdminDomain == Gemeenten/V/Eersel,
				Gemeenten/Per_AdminDomain == Gemeenten/V/Veldhoven,
				Gemeenten/Per_AdminDomain == Gemeenten/V/Oirschot,
				Gemeenten/Per_AdminDomain == Gemeenten/V/Eindhoven,
				Gemeenten/Per_AdminDomain == Gemeenten/V/Best,
				Gemeenten/Per_AdminDomain == Gemeenten/V/Son_En_Breugel,
				Wijken/IsSintOedenrode[Wijken/Per_AdminDomain]
			);
			
			attribute<bool> Lelystad   (AdminDomain) := . && Provincies/Per_AdminDomain == Provincies/V/Flevoland;
			attribute<bool> Maastricht (AdminDomain) := . && COROP/Per_AdminDomain == COROP/V/Zuid_Limburg;
			attribute<bool> Groningen  (AdminDomain) := . && OR(
				NVM/Per_AdminDomain == NVM/V/Noord_Drenthe,
				NVM/Per_AdminDomain == NVM/V/Stad_Groningen_EO,
				NVM/Per_AdminDomain == NVM/V/Slochteren_EO
			);
		}
	}

	unit<uint32> Primaire_waterkering := OrgPath/Primaire_waterkering
	, Descr = "9.  primaire waterkering --> buiten kernzone"
	{
		attribute<rdc_meter> geometry_buffer (poly)       := OrgPath/Primaire_waterkering/geometry_simpl;
		attribute<bool>      IsNietToegestaan (AdminDomain)   := IsDefined(poly2grid(geometry_buffer, AdminDomain));
	}
	
	unit<uint32> Risico_inrichting := OrgPath/Risico_inrichting
	, Descr = "10. risico inrichting "
	{
		attribute<rdc_meter> geometry_buffer (poly)       := OrgPath/Risico_inrichting/geometry_simpl;
		attribute<bool>      IsNietToegestaan (AdminDomain)   := IsDefined(poly2grid(geometry_buffer, AdminDomain));
	}
	
	unit<uint32> Spoor := SourceData/Grondgebruik/BGT/IsDefinedAndNotNoData/IsSpoorbaan
	, Descr = "11. Spoor --> afstand = MaxElem(7.85m + 1/2 * rotordiameter, 30m)"
	{
		attribute<rdc_meter> geometry (poly)        := SourceData/Grondgebruik/BGT/IsDefinedAndNotNoData/IsSpoorbaan/geometry;
		attribute<rdc_meter> geometry_buffer (poly) := geos_buffer_multi_polygon(geometry, Max_Elem(7.85f + (0.5f * CaseClassifications/WindTurbineType/RotorDiameter), 30f)[float64], 8b);
		attribute<bool>      IsNietToegestaan (AdminDomain)   := IsDefined(poly2grid(geometry_buffer, AdminDomain));
	}
	
	unit<uint32> WaterWegen := SourceData/Grondgebruik/BRT/IsWaterweg
	, Descr = "12. WaterWegen --> afstand = MaxElem(1/2 * rotordiameter, 50m)"
	{
		attribute<rdc_meter> geometry (poly)        := SourceData/Grondgebruik/BRT/IsWaterweg/geometry_simpl;
		attribute<rdc_meter> geometry_buffer (poly) := geos_buffer_multi_polygon(geometry, Max_Elem(0.5f * CaseClassifications/WindTurbineType/RotorDiameter, 50f)[float64], 8b);
		attribute<bool>      IsNietToegestaan (AdminDomain)   := IsDefined(poly2grid(geometry_buffer, AdminDomain));
	}
	
	unit<uint32> Wegen := SourceData/Grondgebruik/BRT/IsHoofdweg
	, Descr = "13. Wegen --> afstand = MaxElem(1/2 * rotordiameter, 30m)"
	{
		attribute<rdc_meter> geometry (poly)        := SourceData/Grondgebruik/BRT/IsHoofdweg/geometry_simpl;
		attribute<rdc_meter> geometry_buffer (poly) := geos_buffer_multi_polygon(geometry, Max_Elem(0.5f * CaseClassifications/WindTurbineType/RotorDiameter, 30f)[float64], 8b);
		attribute<bool>      IsNietToegestaan (AdminDomain)   := IsDefined(poly2grid(geometry_buffer, AdminDomain));
	}
	
	unit<uint32> Zee := SourceData/Grondgebruik/BRT/IsZee
	, Descr = "15. zee"
	{
		attribute<rdc_meter> geometry (poly)              := SourceData/Grondgebruik/BRT/IsZee/geometry_simpl;
		attribute<bool>      IsNietToegestaan (AdminDomain)   := IsDefined(poly2grid(geometry, AdminDomain));
	}
}