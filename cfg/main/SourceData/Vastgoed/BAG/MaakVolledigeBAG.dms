container MaakVolledigeBAG : using = "Classifications/Vastgoed"
, Descr = "In deze container kun je de benodigde BAG-Dataset genereren uit het eerder gemaakte resultaat XML2fss uit de BAG-tools. Deze stap is nodig omdat die eerder set nog uitgesplitst is op een soort tiles voor vbo en pand."
{ 
	// te configureren
	parameter<string>  Snapshot_Date_Input := ModelParameters/BAG_file_date;
	//
	// parameter<string>  fssDir              := '%BAG_DataDir%/' + Snapshot_Date_Input + '/fss'; //regular local folder
	// parameter<string>  fssDir              := 'D:/OneDrive/Objectvision/Object Vision - SourceData/BAG/' + Snapshot_Date_Input + ''; //shared folder
	parameter<string>  fssDir              := 'C:/Users/JipClaassens/Objectvision/Object Vision - SourceData/BAG/' + Snapshot_Date_Input + ''; //shared folder
	parameter<string>  Result_fss_dir      := '%RSo_DataDir%/Vastgoed/VolledigeTabel_' + Snapshot_Date_Input;
	parameter<string>  FileNeeded          := expand(., fssDir) + '/pand/nr_fss.csv';
	parameter<bool>    isValidfssDir       := ExistingFile('missing', FileNeeded) == FileNeeded;

	parameter<string> SuppliersExprAll := 
		isValidfssDir
			? 	
				// 'object/ligplaats/result_fss;'
				// 'object/standplaats/result_fss;'
				'object/pand/result_fss;'
				'object/vbo/result_fss;'
				'object/nummeraanduiding/result_fss;'
				// 'object/openbareruimte/result_fss;'
				// 'object/woonplaats/result_fss;'
				// 'object/afleidingen/adres_fss;'
			: ''; 

	parameter<string> MaakVolledigeBAGTabel := isValidfssDir ? 'Ready' : 'Folder : ' + expand(., fssDir) + ' bevat geen volledige set van fss bestanden',  ExplicitSuppliers = "= SuppliersExprAll";
	parameter<string> Maaknummeraanduiding  := isValidfssDir ? 'Ready' : 'Folder : ' + expand(., fssDir) + ' bevat geen volledige set van fss bestanden',  ExplicitSuppliers = "object/nummeraanduiding/result_fss";
	parameter<string> MaakWoonplaats        := isValidfssDir ? 'Ready' : 'Folder : ' + expand(., fssDir) + ' bevat geen volledige set van fss bestanden',  ExplicitSuppliers = "object/woonplaats/result_fss";

	container Object
	{
		container ligplaats
		{
			unit<uint32> src
			: StorageName     = "= fssDir + '/ligplaats.fss' "
			, StorageReadOnly = "True"
			{
				attribute<Geography/rdc_mm> geometry_mm (polygon);
				attribute<string>            identificatie;
				attribute<string>            nummeraanduiding_id;
				attribute<.>                 mutatie_rel := id(.);
				
				container meta          := meta_src_template(src, Classifications/BAG/ligplaats_status);

				unit<uint32> nevenadres // 1->0..n relatie
				{
					attribute<string> nummeraanduiding_id;
					attribute<uint32> mutatie_rel;
				}
			}
			unit<uint32> result := src
			{
				attribute<Geography/rdc_mm>    geometry_mm (poly) := bg_sImplify_polygon(src/geometry_mm, 0.1);
				attribute<string>               identificatie      := src/identificatie;
				attribute<string>               nummeraanduiding_id := src/nummeraanduiding_id;
				
				unit<uint32> nevenadres := select_with_attr_by_cond(src/nevenadres, IsDefined(rlookup(src/nevenadres/mutatie_rel, src/mutatie_rel))) // is een 1->0..n relatie
				{
					attribute<string> identificatie := src/identificatie[mutatie_rel];
				}
			}

			unit<uint32> result_fss := select_with_attr_by_org_rel(result, const(TRUE,result)), StorageName = "= Result_fss_dir + '/ligplaats.fss'"
			{
				attribute<result> org_rel: DisableStorage = "True";

				container meta := collect_attr_by_org_rel(result/meta, result_fss, org_rel);

				unit<uint32> nevenadres := select_with_attr_by_org_rel(result/nevenadres, const(TRUE,result/nevenadres));
			}
		}

 		container standplaats
		{
			unit<uint32> src
			: StorageName     = "= fssDir + '/standplaats.fss'"
			, StorageReadOnly = "True"
			{
				attribute<Geography/rdc_mm>  geometry_mm (polygon);
				attribute<string>            identificatie;
				attribute<string>            nummeraanduiding_id;
				attribute<.>                 mutatie_rel := id(.);
 
				container meta          := meta_src_template(src, Classifications/BAG/standplaats_status);
				unit<uint32> nevenadres // 1->0..n relatie
				{
					attribute<string> nummeraanduiding_id;
					attribute<uint32> mutatie_rel;
				}
			}

			unit<uint32> result := src
			{
				attribute<Geography/rdc_mm>     geometry_mm (poly) := bg_sImplify_polygon(src/geometry_mm, 0.1);
				attribute<string>               identificatie      := src/identificatie;
				attribute<string>               nummeraanduiding_id := src/nummeraanduiding_id;
				
				unit<uint32>        nevenadres := select_with_attr_by_cond(src/nevenadres, IsDefined(rlookup(src/nevenadres/mutatie_rel, src/mutatie_rel))) // is een 1->0..n relatie
				{
					attribute<string> identificatie := src/identificatie[mutatie_rel];
				}
			}

			unit<uint32> result_fss := select_with_attr_by_org_rel(result, const(TRUE,result)), StorageName = "= Result_fss_dir + '/standplaats.fss'"
			{
				attribute<result> org_rel: DisableStorage = "True";
				container meta := collect_attr_by_org_rel(result/meta, result_fss, org_rel);
				unit<uint32> nevenadres := select_with_attr_by_org_rel(result/nevenadres, const(TRUE,result/nevenadres));
			}
		}
 
		container pand
		{
			parameter<string> nr_fss : StorageName = "= fssDir + '/pand/nr_fss.csv'", StorageType = "str";
			unit<uint32> fileset := range(uint32,1, uint32(nr_fss) +1);
			container Filesets   := for_each_ne(
				  'nr_' + string(id(fileset))
				, 'per_fileset(' + string(id(fileset)) + '[fileset])'
				);

			template per_fileset
			{
				// begin case Parameters
				parameter<fileset> nr_fileseset;
				// end case Parameters

				unit<uint32> file
				: StorageName     = "= fssDir + '/pand/fs_' +  string(nr_fileseset) +'.fss'"
				, StorageReadOnly = "True"
				{
					attribute<Geography/rdc_mm> geometry_mm (polygon);
					attribute<string>            identificatie;
					attribute<Units/jaar>     oorspronkelijkBouwjaar;

					container meta := meta_src_template(file, pand_status); 
				}
			}

			unit<uint32> src := = 'union_unit(' + asList('Filesets/nr_' +  string(id(fileset)) + '/File', ',') + ')'
			{
				attribute<Geography/rdc_mm> geometry_mm   (polygon) := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/geometry_mm', ',') + ')';
				attribute<Geography/rdc_mm> geometry_mm_simpl (poly) := bg_simplify_polygon(geometry_mm, 0.1);

				attribute<string>           identificatie           := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/identificatie', ',') + ')';
				attribute<Units/jaar>       oorspronkelijkBouwjaar  := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/oorspronkelijkBouwjaar', ',') + ')';

				container meta
				{
					attribute<string> Status     (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/Status', ',') + ')';
					attribute<pand_status>  status_rel (src) := rlookup(LowerCase(Status),pand_status/Label);
					attribute<int32 > Begindatum                  (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/Begindatum', ',') + ')';
					attribute<int32>  Einddatum                   (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/Einddatum', ',') + ')';
					attribute<int32>  DOCUMENTDATUM               (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/DOCUMENTDATUM', ',') + ')';
					attribute<string> DOCUMENTNUMMER              (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/DOCUMENTNUMMER', ',') + ')';
					attribute<uint32> VOORKOMENidENTIFICATIE      (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/VOORKOMENidENTIFICATIE', ',') + ')';
					attribute<string> TIJDSTIPREGISTRATIE         (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/TIJDSTIPREGISTRATIE', ',') + ')';
					attribute<string> EINDREGISTRATIE             (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/EINDREGISTRATIE', ',') + ')';
					attribute<bool>   IS_GECONSTATEERD            (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/IS_GECONSTATEERD', ',') + ')';
				}
			}

			unit<uint32> result :=  src
			, DialogType  = "Map"
			, DialogData  = "geometry_mm"
			{
				attribute<uint32>            vbo_count             := pcount(vbo/result/Pand_rel)      , DisableStorage = "True";
				attribute<Units/jaar>        Bouwjaar              := oorspronkelijkBouwjaar;
				attribute<Geography/rdc_mm>  geometry_mm (poly)    := geometry_mm_simpl;
				attribute<string>            identificatie         := src/identificatie;
				
				attribute<bool>              IsNederland           := IsDefined(point_in_polygon(centroid_or_mid(geometry_mm[rdc_meter]), /Geography/StudyAreas/rdc_Nederland/geometry));
				attribute<bool>              IsFriesland           := IsDefined(point_in_polygon(centroid_or_mid(geometry_mm[rdc_meter]), /Geography/StudyAreas/rdc_Friesland/geometry));
				attribute<bool>              IsUtrecht             := IsDefined(point_in_polygon(centroid_or_mid(geometry_mm[rdc_meter]), /Geography/StudyAreas/rdc_Utrecht/geometry));
				attribute<bool>              IsNoord_Holland       := IsDefined(point_in_polygon(centroid_or_mid(geometry_mm[rdc_meter]), /Geography/StudyAreas/rdc_Noord_Holland/geometry));

				container gebruiksdoelen:=
					for_each_nedv(
						'nr_'+ vbo_gebruiksdoel/name
						, 'sum(vbo/result/gebruiksdoelen/' + vbo_gebruiksdoel/name + ' ? 1 : 0 , vbo/result/Pand_rel)'
						, result
						, uint32
					);
			}

			unit<uint32> result_fss := select_with_attr_by_org_rel(result, const(TRUE,result)),  StorageName = "= Result_fss_dir + '/pand.fss'"
			{
				attribute<uint32> vbo_count: DisableStorage = "True";
				attribute<result> org_rel:   DisableStorage = "True";
				container meta := collect_attr_by_org_rel(result/meta, result_fss, org_rel);
				container gebruiksdoelen:= collect_attr_by_org_rel(result/gebruiksdoelen, result_fss, org_rel);
			}
		}

		container vbo
		{
			parameter<string> nr_fss : StorageName = "= fssDir + '/vbo/nr_fss.csv'", StorageType = "str";
			unit<uint32> fileset := range(uint32,1, uint32(nr_fss) +1);
			container Filesets   := for_each_ne(
				  'nr_' + string(id(fileset))
				, 'per_fileset(' + string(id(fileset)) + '[fileset])'
				);

			template per_fileset
			{
				// begin case Parameters
				parameter<fileset> nr_fileseset;
				// end case Parameters

				unit<uint32> file
				: StorageName     = "= fssDir + '/vbo/fs_' +  string(nr_fileseset) +'.fss'"
				, StorageReadOnly = "True"
				{
					attribute<Geography/rdc_mm> geometry_mm;
					attribute<string>            identificatie;
					attribute<string>            nummeraanduiding_id;
					attribute<int32>             oppervlakte;
					attribute<uint32>            mutatie_rel := id(.);
					attribute<uint32>            fileset_rel := const(nr_fileseset,.);

					container gebruiksdoelen :=
						for_each_ndv(
							vbo_gebruiksdoel/name
							, file
							, bool
						);

					unit<uint32> polygon // is een 1->0..1 relatie
					{
						attribute<Geography/rdc_mm> geometry_mm (polygon);
						attribute<string>            identificatie;
					}

					unit<uint32> gerelateerdPand // is een 1->0..n relatie
					{
						attribute<string> pand_id;
						attribute<uint32> mutatie_rel;
						attribute<uint32> fileset_rel := const(nr_fileseset,.);
					}

					unit<uint32> nevenadres // is een 1->0..n relatie
					{
						attribute<string> nummeraanduiding_id;
						attribute<uint32> mutatie_rel;
						attribute<uint32> fileset_rel := const(nr_fileseset,.);
					}

					container meta := meta_src_template(file, vbo_status);
				}
			}

			unit<uint32> src := = 'union_unit(' + asList('Filesets/nr_' +  string(id(fileset)) + '/File', ',') + ')'
			{
				attribute<Geography/rdc_mm>  geometry_mm         := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/geometry_mm', ',') + ')';
				attribute<string>            identificatie       := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/identificatie', ',') + ')';
				attribute<string>            nummeraanduiding_id := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/nummeraanduiding_id', ',') + ')';
				attribute<int32>             oppervlakte         := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/oppervlakte', ',') + ')';

				attribute<uint32>            mutatie_rel         := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/mutatie_rel', ',') + ')';
				attribute<uint32>            fileset_rel         := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/fileset_rel', ',') + ')';

				parameter<string>    gebruiksdoelen_Expr         := 'union_data(src, ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/gebruiksdoelen/@@@', ',') + ')';
				parameter<string>    gebruiksdoelen_tobereplaced := '@@@';

				container gebruiksdoelen :=
					for_each_nedv(
						  vbo_gebruiksdoel/name
						, '= replace(gebruiksdoelen_Expr, ' + quote(gebruiksdoelen_tobereplaced) + ' ,' + quote(vbo_gebruiksdoel/name) + ')'
						, src
						, bool
					);

				unit<uint32> polygon := = 'union_unit(' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/polygon', ',') + ')' // is een 1->0..1 relatie
				{
					attribute<Geography/rdc_mm> geometry_mm (polygon) := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/polygon/geometry_mm', ',') + ')';
					attribute<string>            identificatie         := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/polygon/identificatie', ',') + ')';
					attribute<Geography/rdc_mm> centroid_mm           := centroid(geometry_mm);
				}

				attribute<Geography/rdc_mm> centroid_mm := rjoin(identificatie, polygon/identificatie, polygon/centroid_mm);

				unit<uint32> gerelateerdPand := = 'union_unit(' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/gerelateerdPand', ',') + ')' // is een 1->0..1 relatie
				{
					attribute<uint32> fileset_rel := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/gerelateerdPand/fileset_rel', ',') + ')';
					attribute<uint32> mutatie_rel := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/gerelateerdPand/mutatie_rel', ',') + ')';
					attribute<string> pand_id     := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/gerelateerdPand/pand_id ', ',') + ')';
				}

				unit<uint32> nevenadres := = 'union_unit(' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/nevenadres', ',') + ')' // is een 1->0..1 relatie
				{
					attribute<uint32> fileset_rel         := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/nevenadres/fileset_rel', ',') + ')';
					attribute<uint32> mutatie_rel         := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/nevenadres/mutatie_rel', ',') + ')';
					attribute<string> nummeraanduiding_id := = 'union_data(., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/nevenadres/nummeraanduiding_id ', ',') + ')';
				}

				container meta
				{
					attribute<string>                Status     (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/Status', ',') + ')';
					attribute<vbo_status> status_rel (src) := rlookup(LowerCase(Status), vbo_status/Label);

					attribute<int32 > Begindatum                (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/Begindatum', ',') + ')';
					attribute<int32>  Einddatum                 (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/Einddatum', ',') + ')';

					attribute<uint32> VOORKOMENidENTIFICATIE    (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/VOORKOMENidENTIFICATIE', ',') + ')';
					attribute<string> TIJDSTIPREGISTRATIE       (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/TIJDSTIPREGISTRATIE', ',') + ')';
					attribute<string> EINDREGISTRATIE           (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/EINDREGISTRATIE', ',') + ')';

					attribute<int32>  DOCUMENTDATUM             (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/DOCUMENTDATUM', ',') + ')';
					attribute<string> DOCUMENTNUMMER            (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/DOCUMENTNUMMER', ',') + ')';

					attribute<bool>   IS_GECONSTATEERD          (src) := = 'union_data(.., ' + asList('Filesets/nr_' +  string(id(fileset)) + '/File/meta/IS_GECONSTATEERD', ',') + ')';
				}
			}

			unit<uint32> result := src
			,	DialogType  = "Map"
			,	DialogData  = "geometry_mm"
			{
				attribute<pand/result>       Pand_rel              := point_in_polygon(geometry_mm, pand/result/geometry_mm), DisableStorage = "True";
				attribute<string>            pand_id_geom          := pand/result/identificatie[Pand_rel];

				attribute<Geography/rdc_mm>  geometry_mm           := src/geometry_mm;
				attribute<string>            identificatie         := src/identificatie;
				attribute<string>            nummeraanduiding_id   := src/nummeraanduiding_id;
				attribute<int32>             oppervlakte           := src/oppervlakte;
				
				attribute<bool>              IsNederland           := IsDefined(point_in_polygon(geometry_mm[rdc_meter], /Geography/StudyAreas/rdc_Nederland/geometry));
				attribute<bool>              IsFriesland           := IsDefined(point_in_polygon(geometry_mm[rdc_meter], /Geography/StudyAreas/rdc_Friesland/geometry));
				attribute<bool>              IsUtrecht             := IsDefined(point_in_polygon(geometry_mm[rdc_meter], /Geography/StudyAreas/rdc_Utrecht/geometry));
				attribute<bool>              IsNoord_Holland       := IsDefined(point_in_polygon(geometry_mm[rdc_meter], /Geography/StudyAreas/rdc_Noord_Holland/geometry));
				
				unit<uint32> gerelateerdPand := select_with_attr_by_cond(src/gerelateerdPand,
					IsDefined(
						rlookup(  string(src/gerelateerdPand/fileset_rel)        + '_' + string(src/gerelateerdPand/mutatie_rel)
								, string(src/fileset_rel) + '_' + string(src/mutatie_rel)
							)
						)
					), DisableStorage = "True"
				{
					attribute<uint32> mutatie_rel: DisableStorage = "True";
					attribute<uint32> fileset_rel: DisableStorage = "True";

					attribute<string> identificatie := rjoin(
						  string(fileset_rel) + '_' + string(mutatie_rel)
						, string(src/fileset_rel) + '_' + string(src/mutatie_rel)
						, src/identificatie);
				}

				unit<uint32> nevenadres := select_with_attr_by_cond(src/nevenadres,  // is een 1->0..n relatie
					IsDefined(
						rlookup(  string(src/nevenadres/fileset_rel)             + '_' + string(src/nevenadres/mutatie_rel)
								, string(src/fileset_rel) + '_' + string(src/mutatie_rel)
							)
						)
					)
				{
					attribute<uint32> mutatie_rel: DisableStorage = "True";
					attribute<uint32> fileset_rel: DisableStorage = "True";

					attribute<string> identificatie       := rjoin(
						  string(fileset_rel) + '_' + string(mutatie_rel)
						, string(src/fileset_rel) + '_' + string(src/mutatie_rel)
						, src/identificatie);
				}
			}
			unit<uint32> result_fss := select_with_attr_by_org_rel(result, const(TRUE,result)),  StorageName = "= Result_fss_dir + '/vbo.fss'"
			{
				attribute<uint32>      count:    DisableStorage = "True";
				attribute<pand/result> Pand_rel: DisableStorage = "True";
				attribute<result>      org_rel:  DisableStorage = "True";

				container meta := collect_attr_by_org_rel(result/meta, result_fss, org_rel);

				container gebruiksdoelen:= collect_attr_by_org_rel(result/gebruiksdoelen, result_fss, org_rel);

				unit<uint32> gerelateerdPand := select_with_attr_by_org_rel(result/gerelateerdPand, const(TRUE,result/gerelateerdPand))
				{
					attribute<uint32> mutatie_rel: DisableStorage = "True";
					attribute<uint32> fileset_rel: DisableStorage = "True";
				}

				unit<uint32> nevenadres := select_with_attr_by_org_rel(result/nevenadres, const(TRUE,result/nevenadres))
				{
					attribute<uint32> mutatie_rel: DisableStorage = "True";
					attribute<uint32> fileset_rel: DisableStorage = "True";
				}
			}
		}

		container nummeraanduiding
		{
			unit<uint32> src
			:	StorageName     = "= fssDir + '/nummeraanduiding.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<string> identificatie;
				attribute<string> openbareruimte_id;
				attribute<int32>  huisnummer;
				attribute<string> huisletter;
				attribute<string> toevoeging;
				attribute<string> postcode;
				attribute<string> woonplaats   := Object/woonplaats/src/woonplaatsnaam[point_in_polygon(geometry_mm, Object/woonplaats/src/geometry_mm)];
				attribute<string> straatnaam   := Object/openbareruimte/src/naam[rlookup(openbareruimte_id, Object/openbareruimte/src/identificatie)];
				attribute<rdc_mm> geometry_mm  := vbo/result/geometry_mm[rlookup(identificatie, vbo/result/nummeraanduiding_id)];

				attribute<string> status := meta/status;
				container meta := meta_src_template(src, nummeraanduiding_status);
			}
			unit<uint32> result_fss := select_with_attr_by_org_rel(src, const(TRUE,src)),  StorageName = "= Result_fss_dir + '/nummeraanduiding.fss'"
			{
				attribute<src>    org_rel:   DisableStorage = "True";
				attribute<rdc_mm> geometry_mm:   DisableStorage = "True";
				attribute<string> openbareruimte_id:   DisableStorage = "True";

				container meta := collect_attr_by_org_rel(src/meta, result_fss, org_rel);
			}
		}

 		container openbareruimte
		{
			unit<uint32> src
			: StorageName     = "= fssDir + '/openbareruimte.fss'"
			, StorageReadOnly = "True"
			{
				attribute<string> identificatie;
				attribute<string> naam;
				attribute<string> Type;
				// attribute<string> woonplaats_id;

				container meta := meta_src_template(src, openbareruimte_status);
			}

			unit<uint32> result_fss := select_with_attr_by_org_rel(src, const(TRUE,src)), StorageName = "= Result_fss_dir + '/openbareruimte.fss'"
			{
				attribute<string> values : DisableStorage = "True";
				attribute<uint32> key:     DisableStorage = "True";
				attribute<src> org_rel: DisableStorage = "True";

				container meta := collect_attr_by_org_rel(src/meta, result_fss, org_rel);
			}
		}
		
		container woonplaats
		{
			unit<uint32> src
			:	StorageName     = "= fssDir + '/woonplaats.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<Geography/rdc_mm>    geometry_mm (poly);
				attribute<Geography/rdc_meter> geometry    (poly) := geometry_mm[Geography/rdc_meter];
				attribute<string>              identificatie;
				attribute<string>              woonplaatsNaam;

				container meta         := meta_src_template(src, woonplaats_status);
			}
			unit<uint32> result_fss := select_with_attr_by_org_rel(src, const(TRUE,src)), StorageName = "= Result_fss_dir + '/woonplaats.fss'"
			{
				attribute<src>           org_rel: DisableStorage = "True";
				attribute<Geography/rdc_mm> geometry_mm: DisableStorage = "True";

				container meta := collect_attr_by_org_rel(src/meta, result_fss, org_rel);
			}
		}
		
		// #include<afleidingen.dms>
		// #include<overzichten.dms>
		// #include<pc6.dms>
	}

	// #include<gdalwrite_vect_export.dms>
	
	template meta_src_template // Voor het inlezen van de generieke BAG attributen
	{
		// begin case Parameters
		unit<uint32> domain;
		unit<uint8>  statusType;
		// end case Parameters

		attribute<string>     Status                 (domain);
		attribute<statusType> status_rel             (domain) := rlookup(LowerCase(Status), statusType/Label);

		attribute<int32>      Begindatum             (domain);
		attribute<int32>      Einddatum              (domain);
		attribute<uint32>     VOORKOMENidENTIFICATIE (domain);

		attribute<string>     TIJDSTIPREGISTRATIE    (domain);
		attribute<string>     EINDREGISTRATIE        (domain);

		attribute<int32>      DOCUMENTDATUM          (domain);
		attribute<string>     DOCUMENTNUMMER         (domain);

		attribute<bool>       IS_GECONSTATEERD       (domain);
	}
}
