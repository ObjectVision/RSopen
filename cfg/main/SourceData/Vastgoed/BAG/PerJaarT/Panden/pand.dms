unit<uint32> pand := select_with_attr_by_cond(src, src/Pand_selection_condition)
{
	unit<uint32>  vbo_domein           := VBOs/vbo;
	unit<uint32>  vbo_woon_domein      := VBOs/GebruiksdoelSets/woon/GebruiksdoelSet;
	unit<uint32>  vbo_kwetsbaar_domein := VBOs/GebruiksdoelSets/KwetsbaarGebouwFuncties;
	unit<uint32>  vbo_niet_woon_domein := VBOs/GebruiksdoelSets/niet_woon;
	
	attribute<Classifications/Vastgoed/Energielabel> Energielabel_rel := rjoin(pand_id, Energielabels/pand_id, Energielabels/Energielabel_rel);
	
	attribute<string>             pand_id                  := identificatie;
	attribute<m2PandFootprint>    footprint                := abs(area(geometry, m2PandFootprint));
	parameter<m2PandFootprint>    total_footprint          := sum(footprint);
	attribute<panden/pand_hoogte> PHN_rel                  := rlookup(identificatie, panden/pand_hoogte/identificatie);
	attribute<rdc_meter>          pand_centroid            := centroid_or_mid(geometry);
	attribute<uint32>             count_vbo_pand           := pcount(vbo_domein/pand_rel);  //pand_vbo_rel
	attribute<uint32>             count_vbo_pand_woon      := pcount(vbo_woon_domein/pand_rel); //pand_woon_vbo_rel
	attribute<uint32>             count_vbo_pand_niet_woon := pcount(vbo_niet_woon_domein/pand_rel); //pand_niet_woon_vbo_rel
	attribute<m2_pand>            pand_vbo_opp             := (sum(vbo_domein/oppervlakte_trunc, vbo_domein/pand_rel) * 1[verblijfsobject]) / 1[units/PandUnit];
	attribute<bool>               Is_VrijeSector           := rjoin(pand_id, SourceData/Vastgoed/EigendomStaat/pand/identificatie, SourceData/Vastgoed/EigendomStaat/pand/Is_VS_pand);
	attribute<cm>                 pand_hoogte              := panden/pand_hoogte/hoogte_cm[PHN_rel];
	attribute<cm>                 pand_hoogte_maaiveld     := panden/pand_hoogte/hoogte_maaiveld[PHN_rel];
	attribute<float32>            aantal_verdiepingen      := (pand_vbo_opp / footprint) >= 50f && footprint > 3000f
		? 50f
		: (pand_vbo_opp / footprint) >= 15f && footprint <= 3000f
			? 0f/0f
			: pand_vbo_opp / footprint;
	
	attribute<cm> pand_hoogte_proxy := aantal_verdiepingen * convert(ModelParameters/Bouwlaaghoogte, cm) * 1[pandunit];
	
	attribute<cm> pand_hoogte_aux := pand_hoogte <= convert(ModelParameters/Bouwlaaghoogte, cm) || IsNull(pand_hoogte)
		? pand_hoogte_proxy <= convert(ModelParameters/Bouwlaaghoogte, cm)
			? (0/0)[cm]
			: pand_hoogte_proxy
		: pand_hoogte;
	
	container VBOopp_inPand_perFunctie :=
		for_each_nedv(
			vbo_gebruiksdoel_plus/name
			,'sum(vbo_domein/gebruiksdoelen_cbs/'+vbo_gebruiksdoel_plus/name+' ? vbo_domein/oppervlakte_trunc : 0[m2_vbo], vbo_domein/pand_rel) * 1[units/verblijfsobject]'
			, pand
			, meter2
		);
	
	container VBOopp_inPand_perWP2 :=
		for_each_nedv(
			WP2/name
			,'sum(vbo_domein/WP2_rel == WP2/V/'+WP2/name+'[WP2] ? vbo_domein/oppervlakte_trunc : 0[m2_vbo], vbo_domein/pand_rel) * 1[units/verblijfsobject]'
			, pand
			, meter2
		);
	
	container VBOopp_inPand_perWP4 :=
		for_each_nedv(
			WP4/name
			,'sum(vbo_domein/WP4_rel == WP4/V/'+WP4/name+'[WP4] ? vbo_domein/oppervlakte_trunc : 0[m2_vbo], vbo_domein/pand_rel) * 1[units/verblijfsobject]'
			, pand
			, meter2
		);
	
	container Count_inPand_perWP4xEnergielabel :=
		for_each_nedv(
			Classifications/Vastgoed/WP4/xEnergielabel/name
			,'float32(WP4_rel == WP4/V/'+Classifications/Vastgoed/WP4/xEnergielabel/WP4_name+')[Woning] * float32(count_vbo_pand_woon) * float32(Energielabel_rel == Classifications/Vastgoed/Energielabel/V/'+Classifications/Vastgoed/WP4/xEnergielabel/Energielabel_name+')'
			, pand
			, Woning
		);
	
	container VBOopp_inPand_perWP4xEnergielabel :=
		for_each_nedv(
			Classifications/Vastgoed/WP4/xEnergielabel/name
			,'VBOopp_inPand_perWP4/'+Classifications/Vastgoed/WP4/xEnergielabel/WP4_name+' * float32(Energielabel_rel == Classifications/Vastgoed/Energielabel/V/'+Classifications/Vastgoed/WP4/xEnergielabel/Energielabel_name+')'
			, pand
			, meter2
		);
	
	attribute<m2_pand> sum_vbo_pand_opp_niet_woon_org :=
		sum(vbo_niet_woon_domein/oppervlakte, vbo_niet_woon_domein/pand_rel) == 0[m2_vbo]
			? (0/0)[m2_pand]
			: sum(vbo_niet_woon_domein/oppervlakte, vbo_niet_woon_domein/pand_rel) * 1[verblijfsobject] < footprint[meter2] 
				? footprint / 1[m2PandFootprint] * 1[m2_pand]
				: sum(vbo_niet_woon_domein/oppervlakte, vbo_niet_woon_domein/pand_rel) * 1[verblijfsobject / units/PandUnit];
	
	attribute<float32> ratio_vbo_pand_opp := (sum_vbo_pand_opp_niet_woon_org / 1[m2_pand]) / (footprint / 1[m2PandFootprint]);
	attribute<m2_pand> sum_vbo_pand_opp_niet_woon := ratio_vbo_pand_opp >= 100f ? (0/0)[m2_pand] : sum_vbo_pand_opp_niet_woon_org;
	
	container Footprint_VBOOpp_per_vbo_functie0 :=
		for_each_nedv(
			vbo_gebruiksdoel_plus/name
			,'((sum(vbo_domein/gebruiksdoelen_cbs/'+vbo_gebruiksdoel_plus/name+' ? vbo_domein/oppervlakte_trunc : (0/0)[m2_vbo], vbo_domein/pand_rel) * 1[units/verblijfsobject]) / (pand_vbo_opp * 1[units/pandUnit])) * footprint'
			, pand
			, m2PandFootprint
		)
	{
		attribute<m2PandFootprint> Logistiek       (pand) := IsLogistiekFunctie ? footprint : 0[m2PandFootprint];
		attribute<m2PandFootprint> Utiliteit_Combi (pand) := ((sum(vbo_domein/gebruiksdoelen_cbs/Utiliteit_Combi ? vbo_domein/oppervlakte_trunc : (0/0)[m2_vbo], vbo_domein/pand_rel) * 1[units/verblijfsobject]) / (pand_vbo_opp * 1[units/pandUnit])) * footprint;
	}
	
	container Footprint_VBOOpp_per_vbo_functie :=
		for_each_nedv(
			vbo_gebruiksdoel/name
			, 'Footprint_VBOOpp_per_vbo_functie0/logistiek > 0[m2PandFootprint] ? 0[m2PandFootprint] : Footprint_VBOOpp_per_vbo_functie0/'+vbo_gebruiksdoel/name
			, pand
			, m2PandFootprint
		)
	{
		attribute<m2PandFootprint> Logistiek (pand) := Footprint_VBOOpp_per_vbo_functie0/Logistiek;
		attribute<m2PandFootprint> Utiliteit_Combi (pand) := Footprint_VBOOpp_per_vbo_functie0/Utiliteit_Combi;
		attribute<vbo_gebruiksdoel_plus> ArgMax (pand) := ='!IsDefined(bijeenkomst) ? (0/0)[vbo_gebruiksdoel_plus] : ArgMax('+AsItemList(vbo_gebruiksdoel_plus/name)+')[vbo_gebruiksdoel_plus]';
	}
	
	container pand_functie_fractie
	{
		attribute<uint32> pand_woon_per_AllocDomain          (AllocDomain) := count(pand_woon_vbo/pand_centroid, pand_woon_vbo/AllocDomain_rel);
		attribute<uint32> pand_alles_per_AllocDomain         (AllocDomain) := count(pand_met_vbo/pand_centroid, pand_met_vbo/AllocDomain_rel);
		attribute<Ratio>  woonpanden_fractie_per_AllocDomain (AllocDomain) := pand_woon_per_AllocDomain[float32] / pand_alles_per_AllocDomain[float32] ;
	}
	
	unit<uint32> pand_woon_vbo := select_with_org_rel(pand/count_vbo_pand_woon > 0)
	{
		attribute<rdc_mm>      geometry_mm (polygon)    := org_rel -> pand/geometry_mm;
		attribute<rdc_meter>       geometry    (polygon)    := geometry_mm[rdc_meter];
		attribute<uint32>          count_vbo_pand_woon      := org_rel -> count_vbo_pand_woon;
		parameter<m2PandFootprint> total_footprint          := sum(footprint);
		attribute<m2PandFootprint> Avg_footprint_perWoonvbo := footprint / float32(count_vbo_pand_woon);
		attribute<Buurt>           pand_buurt_rel           := point_in_polygon(pand_centroid, Buurt/geometry);
		attribute<AllocDomain>     AllocDomain_rel          := pand_centroid[AllocDomain];
		attribute<m2PandFootprint> footprint                := org_rel -> footprint;
		attribute<rdc_meter>       pand_centroid            := centroid_or_mid(geometry);
		attribute<cm>              pand_hoogte              := org_rel -> pand_hoogte;
		attribute<WP4>             WP4_rel                  := org_rel -> WP4_rel;
		
		container pandhoogte_4WP :=
			for_each_nedv(
				WP4/name
				, 'mean(WP4_rel == ' + string(id(WP4)) + '[WP4] ? pand_hoogte : (0/0)[cm], pand_centroid[AllocDomain])'
				, AllocDomain
				, cm
			);
	}
	
	attribute<bool> pand_met_vbo_selection_condition := pand/count_vbo_pand > 0;
	
	#include<pand_met_vbo.dms>
}