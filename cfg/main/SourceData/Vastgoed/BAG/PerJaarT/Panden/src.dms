unit<uint32> src := import
{
	attribute<rdc_mm_i32> geometry_mm (polygon) := import/geometry_mm;
	attribute<rdc_meter> geometry (polygon) := geometry_mm[rdc_meter];
	attribute<string> identificatie := import/identificatie;
	attribute<uint64> bag_nr := uint64(identificatie);
	attribute<int16> bouwjaar := import/bouwjaar;
	attribute<int16> bouwjaar_trunc := bouwjaar < 1000s || bouwjaar > BAG_jaar[int16] ? (0/0)[int16] : bouwjaar < 1600s ? 1600s : bouwjaar;
	attribute<WPSrc> woonpand_type := import/woonpand_type;
	attribute<WPSrc> WPSrc_rel := woonpand_type;
	attribute<WP> WP_rel := rjoin(WPSrc_rel, id(WPSrc), WPSrc/WP_rel);
	attribute<WP4> WP4_rel := WP/WP4_rel[WP_rel];
	attribute<WP3> WP3_rel := WP/WP3_rel[WP_rel];
	attribute<WP2> WP2_rel := WP/WP2_rel[WP_rel];
	attribute<WP1> WP1_rel := WP4/WP1_rel[WP4_rel];
	attribute<bool> IsLogistiekFunctie := IsDefined(rlookup(identificatie, /SourceData/Vastgoed/Logistiek_panden/Logistics/BAG_id));
	attribute<rdc_mm_i32> NW := lower_bound(src/geometry_mm);
	attribute<rdc_mm_i32> SE := upper_bound(src/geometry_mm);
	attribute<int32> X_ext := PointCol(SE) - PointCol(NW);
	attribute<int32> Y_ext := PointRow(SE) - PointRow(NW);
	attribute<string> status := import/status;
	attribute<pand_status> status_rel := rlookup(status, pand_status/label);
	attribute<bool> Pand_selection_condition (src) := src/X_ext < 1000000i && src/Y_ext < 1000000i
		&& (src/status_rel == pand_status/V/Pand_in_gebruik
			|| src/status_rel == pand_status/V/Pand_in_gebruik_niet_ingemeten
			|| src/status_rel == pand_status/V/Pand_buiten_gebruik
			|| src/status_rel == pand_status/V/Verbouwing_pand);
	
	unit<uint32> ToedelingsMatrix := = ModelParameters/BasedataOntkoppeld ? 'Uitsmeer_key/Read_AdminDomain_in_all_panden' : 'Uitsmeer_key/Write_AdminDomain_in_all_panden';
	
	container Uitsmeer_key
	{
		unit<uint32> pand_domain := src
		{
			attribute<bool> IsPand_niet_in_grid_pand_tabel := RasterCount_per_pand_raw > 0;
			attribute<uint32> RasterCount_per_pand_raw := pcount(grid_centroid_in_all_panden_rel/pand_rel);
			attribute<float32> RasterCount_per_pand := pcount(grid_centroid_in_all_panden_rel_unioned/pand_rel)[float32];
		}
		
		unit<uint32> Panden_niet_in_grid_pand_tabel := select_with_org_rel(pand_domain/IsPand_niet_in_grid_pand_tabel)
		{
			attribute<rdc_5m> rdc_5m_rel := centroid_or_mid(pand_domain/geometry[pand_rel])[rdc_5m];
			attribute<pand_domain> pand_rel := org_rel;
		}
		
		unit<uint32> grid_centroid_in_all_panden_rel := point_in_all_polygons(rdc_5m/point, pand_domain/geometry)
		{
			attribute<rdc_5m> rdc_5m_rel := first_rel;
			attribute<pand_domain> pand_rel := second_rel;
		}
		
		unit<uint32> grid_centroid_in_all_panden_rel_unioned := union_unit(grid_centroid_in_all_panden_rel, Panden_niet_in_grid_pand_tabel)
		{
			attribute<rdc_5m> rdc_5m_rel := union_data(., grid_centroid_in_all_panden_rel/rdc_5m_rel, Panden_niet_in_grid_pand_tabel/rdc_5m_rel);
			attribute<pand_domain> pand_rel := union_data(., grid_centroid_in_all_panden_rel/pand_rel, Panden_niet_in_grid_pand_tabel/pand_rel);
			attribute<AdminDomain> AdminDomain_rel := rdc_5m_rel[AdminDomain];
			
			attribute<AdminDomain/id_key> AdminDomain_id_rel := value(uint32(pointrow(AdminDomain_rel)) * AdminDomain/nr_cols + uint32(pointcol(AdminDomain_rel)), AdminDomain/id_key);
			
			attribute<float32> ToedelingPand  := 1f / pand_domain/RasterCount_per_pand[pand_rel]
			{
				attribute<float32> per_pand(pand_domain) := sum(., pand_rel);
				attribute<float32> per_5m (rdc_5m) := sum(., rdc_5m_rel);
			}
			
			unit<uint64> pandAdmin_keyset := combine_unit_uint64(pand_domain, AdminDomain);
			
			attribute<pandAdmin_keyset> pandAdmin_keyset_rel := combine_data(pandAdmin_keyset, pand_rel, AdminDomain_id_rel);
			attribute<AdminDomain_in_all_panden> AdminDomain_in_all_panden_rel := rlookup(pandAdmin_keyset_rel, AdminDomain_in_all_panden/pandAdmin_keyset_rel);
		}
		
		unit<uint32> AdminDomain_in_all_panden := unique(grid_centroid_in_all_panden_rel_unioned/pandAdmin_keyset_rel)
		{
			attribute<pand_domain> Pand_rel := value(values / uint64(#AdminDomain/id_key), pand_domain);
			attribute<uint64> pand_bag_nr := pand_domain/bag_nr[Pand_rel];
			attribute<AdminDomain/id_key> AdminDomain_id_rel := value(values % uint64(#AdminDomain/id_key), AdminDomain/id_key);
			attribute<AdminDomain> AdminDomain_rel := point(int32(AdminDomain_id_rel / AdminDomain/nr_cols), int32(AdminDomain_id_rel % AdminDomain/nr_cols), AdminDomain);
			attribute<grid_centroid_in_all_panden_rel_unioned/pandAdmin_keyset> pandAdmin_keyset_rel := combine_data(grid_centroid_in_all_panden_rel_unioned/pandAdmin_keyset, pand_rel, AdminDomain_id_rel);
			attribute<float32> ToedelingPand := sum(grid_centroid_in_all_panden_rel_unioned/ToedelingPand, grid_centroid_in_all_panden_rel_unioned/AdminDomain_in_all_panden_rel)
			{
				attribute<float32> per_pand (pand_domain) := sum(., pand_rel);
				attribute<float32> per_AD   (AdminDomain) := sum(., AdminDomain_id_rel)[AdminDomain/id_rel];
			}
		}
		
		parameter<string> Generate := 'Ready', ExplicitSuppliers = "Write_AdminDomain_in_all_panden";
		
		unit<uint32> Write_AdminDomain_in_all_panden := AdminDomain_in_all_panden
		, StorageName = "='%RSLDataDir%/Vastgoed/BAG_UitsmeerMatrix/Y'+string(BAG_jaar)+'.fss'"
		, Descr = "per pand, per gridcel, de fractie van dat pand dat in die gridcel ligt"
		{
			attribute<uint64> pand_bag_nr := AdminDomain_in_all_panden/pand_bag_nr;
			attribute<AdminDomain> AdminDomain_rel := AdminDomain_in_all_panden/AdminDomain_rel;
			attribute<float32> ToedelingPand := AdminDomain_in_all_panden/ToedelingPand; //fractie van het pand dat in die gridcel ligt
			
			parameter<string> BAG_versie := SnapshotDir;
		}
		
		unit<uint32> Read_AdminDomain_in_all_panden: StorageName = "='%RSLDataDir%/Vastgoed/BAG_UitsmeerMatrix/Y'+string(BAG_jaar)+'.fss'", StorageReadOnly = "true"
		{
			attribute<uint64> pand_bag_nr;
			attribute<AdminDomain> AdminDomain_rel;
			attribute<float32> ToedelingPand : IntegrityCheck = "BAG_versie == SnapshotDir";
			attribute<pand_domain> Pand_rel := rlookup(pand_bag_nr, pand_domain/bag_nr);
			parameter<string> BAG_versie;
		}
	}
}