container Uitsmeer_key
{
	unit<uint32> pand_domain := ..
	{
		attribute<bool>                      IsPand_niet_in_grid_pand_tabel     := RasterCount_per_pand_raw == 0;
		attribute<uint32>                    RasterCount_per_pand_raw           := pcount(pand_grid_5m_tabel_zonder_missers/Pand_rel);
		attribute<float32>                   RasterCount_per_pand               := pcount(pand_grid_5m_tabel/Pand_rel)[float32];
	}
	
	unit<uint32> pand_grid_5m_tabel_zonder_missers := poly2allgrids(pand_domain/geometry, rdc_5m) //fka grid_centroid_in_all_panden_rel
	, Descr = "vergrid alle panden naar een 5m grid" 
	{
		attribute<rdc_5m>                    rdc_5m_rel                         := grid_rel;
		attribute<pand_domain>               Pand_rel                           := polygon_rel;
		
		attribute<float32> ToedelingPand  := 1f / float32(pand_domain/RasterCount_per_pand_raw)[Pand_rel]
		{
			attribute<float32>               per_pand             (pand_domain) := sum(., Pand_rel);
			attribute<float32>               per_5m                    (rdc_5m) := sum(., rdc_5m_rel);
		}
	}
	
	unit<uint32> Panden_niet_in_pand_grid_5m_tabel := select_with_org_rel(pand_domain/IsPand_niet_in_grid_pand_tabel) //Panden_niet_in_grid_pand_tabel
	, Descr = "als een pand niet matched aan een linkerbovenhoek/centerpoint van een cel, dan wordt deze niet vergrid via poly2allgrids. In dat geval moeten we deze handmatig toevoegen."
	{
		attribute<rdc_5m>                    rdc_5m_rel                         := centroid_or_mid(pand_domain/geometry[Pand_rel])[rdc_5m];
		attribute<pand_domain>               Pand_rel                           := org_rel;
		
		attribute<float32> ToedelingPand  := const(1f, .);
	}
	
	
	unit<uint32> pand_grid_5m_tabel := union_unit(pand_grid_5m_tabel_zonder_missers, Panden_niet_in_pand_grid_5m_tabel) //fka grid_centroid_in_all_panden_rel_unioned
	, Descr = "append panden die niet via poly2allgrids werden vergrid."
	{
		attribute<rdc_5m>                    rdc_5m_rel                         := union_data(., pand_grid_5m_tabel_zonder_missers/rdc_5m_rel   , Panden_niet_in_pand_grid_5m_tabel/rdc_5m_rel);
		attribute<pand_domain>               Pand_rel                           := union_data(., pand_grid_5m_tabel_zonder_missers/Pand_rel     , Panden_niet_in_pand_grid_5m_tabel/Pand_rel);
		attribute<float32>                   ToedelingPand                      := union_data(., pand_grid_5m_tabel_zonder_missers/ToedelingPand, Panden_niet_in_pand_grid_5m_tabel/ToedelingPand);
		
		attribute<AdminDomain>               AdminDomain_rel                    := rdc_5m_rel[AdminDomain];
		attribute<AdminDomain/id_key>        AdminDomain_id_rel                 := value(uint32(PointRow(AdminDomain_rel)) * AdminDomain/nr_cols + uint32(PointCol(AdminDomain_rel)), AdminDomain/id_key);
		
		attribute<AllocDomain>               AllocDomain_rel                    := rdc_5m_rel[AllocDomain];
		attribute<AllocDomain/id_key>        AllocDomain_id_rel                 := value(uint32(PointRow(AllocDomain_rel)) * AllocDomain/nr_cols + uint32(PointCol(AllocDomain_rel)), AllocDomain/id_key);
		
		//om te bepalen hoeveel kleine blokjes (5m) in grote blokken (25m) liggen moeten we eerst de set van pand-groteblok-combinaties bepalen.
		unit<uint64> pandAdmin_keyset := combine_unit_uint64(pand_domain, AdminDomain), Descr = "";
		unit<uint64> pandAlloc_keyset := combine_unit_uint64(pand_domain, AllocDomain), Descr = "";
		
		attribute<pandAdmin_keyset>          pandAdmin_keyset_rel               := combine_Data(pandAdmin_keyset, Pand_rel, AdminDomain_id_rel);
		attribute<AdminDomain_in_all_panden> AdminDomain_in_all_panden_rel      := rlookup(pandAdmin_keyset_rel, AdminDomain_in_all_panden/pandAdmin_keyset_rel);
		
		attribute<pandAlloc_keyset>          pandAlloc_keyset_rel               := combine_Data(pandAlloc_keyset, Pand_rel, AllocDomain_id_rel);
		attribute<AllocDomain_in_all_panden> AllocDomain_in_all_panden_rel      := rlookup(pandAlloc_keyset_rel, AllocDomain_in_all_panden/pandAlloc_keyset_rel);
	}
	
	unit<uint32> AdminDomain_in_all_panden := unique(pand_grid_5m_tabel/pandAdmin_keyset_rel)
	, Descr = "per pand, per gridcel, de fractie van dat pand dat in die gridcel ligt"
	{
		attribute<pand_domain>                         Pand_rel                            := value(values / uint64(#AdminDomain), pand_domain);
		attribute<uint64>                              pand_bag_nr                         := pand_domain/pand_bag_nr[Pand_rel];
		attribute<AdminDomain/id_key>                  AdminDomain_id_rel                  := value(values % uint64(#AdminDomain), AdminDomain/id_key);
		
		// truc om na de unique de bijborende AdminDomain_rel op te zoeken.
		attribute<AdminDomain>                         AdminDomain_rel                     := point_yx(int32(AdminDomain_id_rel / AdminDomain/nr_cols), int32(AdminDomain_id_rel % AdminDomain/nr_cols), AdminDomain), Descr = "";
		attribute<CompactedAdminDomain>                CompactedAdminDomain_rel            := CompactedAdminDomain/Per_AdminDomain[AdminDomain_rel];
		attribute<pand_grid_5m_tabel/pandAdmin_keyset> pandAdmin_keyset_rel                := combine_Data(pand_grid_5m_tabel/pandAdmin_keyset, Pand_rel, AdminDomain_id_rel);
		
		attribute<float32>                             ToedelingPand                       := sum(pand_grid_5m_tabel/ToedelingPand, pand_grid_5m_tabel/AdminDomain_in_all_panden_rel)
		{
			attribute<float32>              per_pand              (pand_domain) := sum(., Pand_rel);
			attribute<float32>              Per_AD                (AdminDomain) := sum(., AdminDomain_id_rel)[AdminDomain/id_rel];
		}
		
		attribute<bool>                                met_vbo_selection_condition                 := pand_domain/met_vbo_selection_condition[Pand_rel];
		attribute<bool>                                Omit_VBOlozePanden_metWoonfunctie_condition := NOT(pand_domain/BepalingGebruiksdoelInOmgeving/VBOloosPand_metWoonFunctie)[Pand_rel];
	}
	
	unit<uint32> AllocDomain_in_all_panden := unique(pand_grid_5m_tabel/pandAlloc_keyset_rel)
	, Descr = "per pand, per gridcel, de fractie van dat pand dat in die gridcel ligt"
	{
		attribute<pand_domain>                         Pand_rel                            := value(values / uint64(#AllocDomain), pand_domain);
		attribute<uint64>                              pand_bag_nr                         := pand_domain/pand_bag_nr[Pand_rel];
		attribute<AllocDomain/id_key>                  AllocDomain_id_rel                  := value(values % uint64(#AllocDomain), AllocDomain/id_key);
		
		// truc om na de unique de bijborende AdminDomain_rel op te zoeken.
		attribute<AllocDomain>                         AllocDomain_rel                     := point_yx(int32(AllocDomain_id_rel / AllocDomain/nr_cols), int32(AllocDomain_id_rel % AllocDomain/nr_cols), AllocDomain), Descr = "";
		attribute<pand_grid_5m_tabel/pandAlloc_keyset> pandAlloc_keyset_rel                := combine_Data(pand_grid_5m_tabel/pandAlloc_keyset, Pand_rel, AllocDomain_id_rel);
		
		attribute<float32>                             ToedelingPand                       := sum(pand_grid_5m_tabel/ToedelingPand, pand_grid_5m_tabel/AllocDomain_in_all_panden_rel)
		{
			attribute<float32>              per_pand              (pand_domain) := sum(., Pand_rel);
			attribute<float32>              Per_AD                (AllocDomain) := sum(., AllocDomain_id_rel)[AllocDomain/id_rel];
		}
		
		attribute<bool>                                met_vbo_selection_condition := pand_domain/met_vbo_selection_condition[Pand_rel];
	}
}
