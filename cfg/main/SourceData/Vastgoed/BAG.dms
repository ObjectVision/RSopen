container BAG : using = "Classifications/Vastgoed"
{
	//
	// unit<ipoint> AllocDomain;
	//
	
	// unit<uint32> NL        := RegioIndelingen/NL;
	// unit<uint32> nvm       := RegioIndelingen/nvm;
	// unit<uint32> Buurt     := RegioIndelingen/cbs/last/buurt;
	// unit<uint32> Wijk      := RegioIndelingen/cbs/last/wijk;
	// unit<uint32> Buurt15   := RegioIndelingen/cbs/y2015/buurt;
	// unit<uint32> Wijk15    := RegioIndelingen/cbs/y2015/wijk;
	// unit<uint32> Corop     := RegioIndelingen/cbs/last/Corop;
	// unit<uint32> provincie := RegioIndelingen/cbs/last/provincie;
	// unit<uint32> Gemeente  := RegioIndelingen/cbs/last/Gemeente;
	
	unit<uint8> WP5 := Classifications/vastgoed/WP5;
	// unit<uint8> WP := Classifications/vastgoed/WP;
	unit<uint8> WP4 := Classifications/vastgoed/WP4;
	unit<uint8> WP3 := Classifications/vastgoed/WP3;
	unit<uint8> WP2 := Classifications/vastgoed/WP2;
	unit<uint8> pand_status := Classifications/Vastgoed/pand_status;
	unit<uint8> vbo_status := Classifications/Vastgoed/vbo_status;
	
	// parameter<string> SnapshotDir2012 := '%RSo_DataDir%/Vastgoed/20120101_RS';
	// parameter<string> SnapshotDir2013 := '%RSo_DataDir%/Vastgoed/20130101_RS';
	// parameter<string> SnapshotDir2014 := '%RSo_DataDir%/Vastgoed/20140101_RS';
	// parameter<string> SnapshotDir2015 := '%RSo_DataDir%/Vastgoed/20150101_RS';
	// parameter<string> SnapshotDir2016 := '%RSo_DataDir%/Vastgoed/20160101_RS';
	// parameter<string> SnapshotDir2017 := '%RSo_DataDir%/Vastgoed/20170101_RS';
	// parameter<string> SnapshotDir2018 := '%RSo_DataDir%/Vastgoed/20180101_RS';
	// parameter<string> SnapshotDir2019 := '%RSo_DataDir%/Vastgoed/20190101_RS';
	// parameter<string> SnapshotDir2020 := '%RSo_DataDir%/Vastgoed/20200101_RS';
	// parameter<string> SnapshotDir2021 := '%RSo_DataDir%/Vastgoed/20210101_RS';
	// parameter<string> SnapshotDir2022 := '%RSo_DataDir%/Vastgoed/20220101_RS';
	// parameter<string> SnapshotDir2023 := '%RSo_DataDir%/Vastgoed/20230101_RS';
	parameter<string> SnapshotDir2024 := '%RSo_DataDir%/Vastgoed/20240101_RS';
	
	unit<uint32> BAG_jaren := range(uint32, 2012, 2025)
	{
		attribute<uint32> Jaar           := id(.);
		attribute<string> name           := 'Y' + string(jaar);
		attribute<string> prev_Jaar_name := name[prev_jaar]; 
		attribute<uint32> prev_Jaar      := Jaar - 1;
		attribute<bool>   IsFirstYear    := jaar == first(Jaar);
		attribute<string> label          := name, DialogType = "LabelText";
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
		
		unit<uint32> minusFirstYear := select_with_org_rel(!IsFirstYear)
		{
			attribute<uint32> Jaar  := ../jaar[org_rel];
			attribute<string> name  := ../name[org_rel];
			attribute<string> label := name, DialogType = "LabelText";
		}
	}
	
	container PerJaar := for_each_ne(BAG_jaren/name, 'PerJaar_T('+quote(string(BAG_jaren/jaar))+')');
	
	Template PerJaar_T
	{
		parameter<string> JaarStr;
		///
		attribute<bool> pand_selection_condition (VolledigeBAG/panden/pand) := VolledigeBAG/panden/pand/IsVoorraad 
															&& VolledigeBAG/panden/pand/begindatum < int32(JaarStr+'0101') 
															&& VolledigeBAG/panden/pand/einddatum >= int32(JaarStr+'0101');
		unit<uint32> pand := select_with_attr_by_cond(VolledigeBAG/panden/pand, pand_selection_condition)
		, Descr = "set met panden op 1 januari van elk jaar die voorraad zijn volgens de CBS definitie."
		{
			parameter<string> Selection_string      := 'Voorraad';
			attribute<WP5>    WP5_rel                      := AfleidingPandtype/results/WP5_rel;
			attribute<WP4>    WP4_rel                      := WP5/WP4_rel[WP5_rel];
			attribute<WP3>    WP3_rel                      := WP5/WP3_rel[WP5_rel];
			attribute<WP2>    WP2_rel                      := WP5/WP2_rel[WP5_rel];
			attribute<WP1>    WP1_rel                      := WP5/WP1_rel[WP5_rel];
			
			attribute<bool>   pand_selection_condition (VolledigeBAG/panden/pand) := ../pand_selection_condition;

			// attribute<.>           per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
			// attribute<AllocDomain> AllocDomain_rel := invert(per_AllocDomain);
			// attribute<AdminDomain> AdminDomain_rel := rjoin(pand_bag_nr, VolledigeBAG/Panden/pand/Uitsmeer_key/Read_AdminDomain_in_all_panden/pand_bag_nr, VolledigeBAG/Panden/pand/Uitsmeer_key/Read_AdminDomain_in_all_panden/AdminDomain_rel);
			// attribute<float32>     ToedelingPand   := rjoin(pand_bag_nr, VolledigeBAG/Panden/pand/Uitsmeer_key/Read_AdminDomain_in_all_panden/pand_bag_nr, VolledigeBAG/Panden/pand/Uitsmeer_key/Read_AdminDomain_in_all_panden/ToedelingPand);
			
			attribute<bool>        Is_VrijeSector  := rjoin(pand_bag_nr, SourceData/Vastgoed/EigendomStaat/pand/pand_bag_nr, SourceData/Vastgoed/EigendomStaat/pand/Is_VS_pand);
		
			attribute<../pand_hoogte> PHN_rel                          := rlookup(pand_bag_nr, ../pand_hoogte/pand_bag_nr);
			attribute<cm>          pand_hoogte                      := ../pand_hoogte/hoogte_cm[PHN_rel];
			attribute<cm>          pand_hoogte_maaiveld             := ../pand_hoogte/hoogte_maaiveld[PHN_rel];

			unit<uint32> ToedelingsMatrix := = 'Uitsmeer_key/AdminDomain_in_all_panden';
			unit<uint32> ToedelingsMatrix_AllocDomain := = 'Uitsmeer_key/AllocDomain_in_all_panden';
			#include<Uitsmeer_key.dms>

			container Counts
			{
				attribute<uint32> vbos       (..) := pcount(vbo/pand_rel);
				attribute<uint32> woon_vbos  (..) := pcount(VBO/Per_gebruiksdoel/woon/select/pand_rel);
				
				attribute<float32> per_AllocDomain (AllocDomain) := sum(Uitsmeer_key/AllocDomain_in_all_panden/ToedelingPand, Uitsmeer_key/AllocDomain_in_all_panden/AllocDomain_rel);
				
				//adhoc
				attribute<uint32> woon_vbos_perNVM (SourceData/RegioIndelingen/NVM) := sum(woon_vbos, point_in_polygon(centroid_or_mid(geometry), SourceData/RegioIndelingen/NVM/geometry));
				
				// attribute<uint32> per_AllocDomain             (AllocDomain) := count(centroid_or_mid(geometry), AllocDomain_rel);
				
				container Vbos_perGebruiksdoel :=
					for_each_nedv(
						vbo_gebruiksdoel_plus/name
						, 'sum_uint32(vbo/impl/gebruiksdoelen_cbs/'+vbo_gebruiksdoel_plus/name+', vbo/pand_rel)'
						, pand
						, uint32
					)
				{
					attribute<uint32> Totaal (pand) := ='add('+AsList(vbo_gebruiksdoel_plus/name,',')+')';
				}
			}
			
			container Oppervlaktes
			{
				attribute<m2_pand>         vbo_opp            (..) := sum(vbo/oppervlakte_trunc, vbo/pand_rel) * 1[verblijfsobject] / 1[units/PandUnit];
				attribute<m2_pand>         vbo_opp_niet_woon0 (..) := sum(vbo/impl/gebruiksdoelen_cbs/niet_woon ? vbo/oppervlakte_trunc : 0[m2_vbo], vbo/pand_rel) == 0[m2_vbo]
																		? (0/0)[m2_pand]
																		: sum(vbo/impl/gebruiksdoelen_cbs/niet_woon ? vbo/oppervlakte_trunc : 0[m2_vbo], vbo/pand_rel) * 1[verblijfsobject] < footprint[meter2] 
																			? footprint / 1[m2PandFootprint] * 1[m2_pand]
																			: sum(vbo/impl/gebruiksdoelen_cbs/niet_woon ? vbo/oppervlakte_trunc : 0[m2_vbo], vbo/pand_rel) * 1[verblijfsobject / units/PandUnit];
				
				attribute<float32>         ratio_vbo_opp_niet_woon_footprint (..) := (vbo_opp_niet_woon0 / 1[m2_pand]) / (footprint / 1[m2PandFootprint]);
				attribute<m2_pand>         vbo_opp_niet_woon                 (..) := ratio_vbo_opp_niet_woon_footprint >= 100f ? (0/0)[m2_pand] : vbo_opp_niet_woon0;
				
				
				container VBOopp_perWP2 :=
					for_each_nedv(
						WP2/name
						,'sum(vbo/WP2_rel == WP2/V/'+WP2/name+'[WP2] ? vbo/oppervlakte_trunc : 0[m2_vbo], vbo/pand_rel) * 1[units/verblijfsobject]'
						, pand
						, meter2
					), Descr = "wordt oa gebruikt in EigendomStaat tbv bepaling VS/SH verdeling.";
					
				container VBOopp_perWP4 :=
					for_each_nedv(
						WP4/name
						,'sum(vbo/WP4_rel == WP4/V/'+WP4/name+'[WP4] ? vbo/oppervlakte_trunc : 0[m2_vbo], vbo/pand_rel) * 1[units/verblijfsobject]'
						, pand
						, meter2
					), Descr = "wordt oa gebruikt in EigendomStaat tbv bepaling VS/SH verdeling.";
					
				container VBOopp_perGebruiksdoel :=
					for_each_nedv(
						vbo_gebruiksdoel_plus/name
						, 'sum(vbo/impl/gebruiksdoelen_cbs/'+vbo_gebruiksdoel_plus/name+' ? vbo/oppervlakte_trunc : (0/0)[m2_Vbo], vbo/pand_rel) * 1[verblijfsobject]'
						, pand
						, meter2
					), Descr = "per gebruiksdoel de vbo oppervlakte in een pand";
				
				container Footprint_perGebruiksdoel :=
					for_each_nedv(
						vbo_gebruiksdoel_plus/name
						, quote(vbo_gebruiksdoel_plus/name)+' == ''logistiek'' && IsLogistiekFunctie 
							? footprint 
							: '+quote(vbo_gebruiksdoel_plus/name)+' == ''logistiek'' && NOT(IsLogistiekFunctie)
								? 0[m2PandFootprint]
								: IsLogistiekFunctie 
									? 0[m2PandFootprint] 
									: (VBOopp_perGebruiksdoel/'+vbo_gebruiksdoel_plus/name+' / (vbo_opp * 1[units/pandUnit])) * footprint'
						, pand
						, m2PandFootprint
					), Descr = "per gebruiksdoel de pand footprint obv de share van vbo oppervlaktes in het pand"
				{
					attribute<vbo_gebruiksdoel_plus> ArgMax    (pand) := ='!IsDefined(bijeenkomst) ? (0/0)[vbo_gebruiksdoel_plus] : ArgMax('+AsItemList(vbo_gebruiksdoel_plus/name)+')[vbo_gebruiksdoel_plus]';
				}
				
				container Fractie_VBOOpp_perGebruiksdoel :=
					for_each_nedv(
						vbo_gebruiksdoel_plus/name
						,'(sum(vbo/impl/gebruiksdoelen_cbs/'+vbo_gebruiksdoel_plus/name+' ? vbo/oppervlakte_trunc : (0/0)[m2_Vbo], vbo/pand_rel) * 1[verblijfsobject]) / (vbo_opp * 1[units/pandUnit])'
						, pand
						, float32
					)
				{
					attribute<vbo_gebruiksdoel_plus> ArgMax (...) := ='argmax_alldefined('+AsItemList(vbo_gebruiksdoel_plus/name)+')[vbo_gebruiksdoel_plus]';
				}
				
			}
			
			attribute<bool> met_vbo_selection_condition := counts/vbos > 0;
			unit<uint32>    met_vbo := select_with_attr_by_cond(., met_vbo_selection_condition)
			{
				container Counts
				{
					container Vbos_perGebruiksdoel      := collect_attr_by_cond(Pand/Counts/Vbos_perGebruiksdoel, met_vbo, pand/met_vbo_selection_condition);
					attribute<float32>  Monumentaal_per_AllocDomain (AllocDomain) := sum(float32(bouwjaar_trunc <= 1900[yr])[ToedelingsMatrix_AllocDomain/pand_rel] * ToedelingsMatrix_AllocDomain/ToedelingPand, ToedelingsMatrix_AllocDomain/AllocDomain_rel);
					attribute<float32>  per_AllocDomain             (AllocDomain) := sum(ToedelingsMatrix_AllocDomain/ToedelingPand, ToedelingsMatrix_AllocDomain/AllocDomain_rel);
				}
				container oppervlaktes
				{
					container Footprint_perGebruiksdoel      := collect_attr_by_cond(Pand/Oppervlaktes/Footprint_perGebruiksdoel, met_vbo, pand/met_vbo_selection_condition);
					container VBOopp_perGebruiksdoel         := collect_attr_by_cond(Pand/Oppervlaktes/VBOopp_perGebruiksdoel, met_vbo, pand/met_vbo_selection_condition);
					container Fractie_VBOOpp_perGebruiksdoel := collect_attr_by_cond(Pand/Oppervlaktes/Fractie_VBOOpp_perGebruiksdoel, met_vbo, pand/met_vbo_selection_condition);
					attribute<m2_pand> vbo_opp (..) := collect_by_cond(met_vbo, pand/met_vbo_selection_condition, Pand/oppervlaktes/vbo_opp);
				}
				
				unit<uint32> ToedelingsMatrix := select_with_org_rel(pand/ToedelingsMatrix/met_vbo_selection_condition)
				{
					attribute<uint64>      pand_bag_nr      := org_rel -> pand_bag_nr;
					attribute<AdminDomain> AdminDomain_rel  := org_rel -> AdminDomain_rel;
					attribute<float32>     ToedelingPand    := org_rel -> ToedelingPand;
					attribute<..>          Pand_rel         := rlookup(pand_bag_nr, ../pand_bag_nr);
				}
				unit<uint32> ToedelingsMatrix_AllocDomain := select_with_org_rel(pand/ToedelingsMatrix_AllocDomain/met_vbo_selection_condition)
				{
					attribute<uint64>      pand_bag_nr      := org_rel -> pand_bag_nr;
					attribute<AllocDomain> AllocDomain_rel  := org_rel -> AllocDomain_rel;
					attribute<float32>     ToedelingPand    := org_rel -> ToedelingPand;
					attribute<..>          Pand_rel         := rlookup(pand_bag_nr, ../pand_bag_nr);
				}
			}
			
			#include<AfleidingPandtype.dms>
		}
		
		unit<uint32> vbo  := select_with_attr_by_cond(VolledigeBAG/vbos/vbo
														, VolledigeBAG/vbos/vbo/IsVoorraad 
															&& VolledigeBAG/vbos/vbo/begindatum < int32(JaarStr+'0101') 
															&& VolledigeBAG/vbos/vbo/einddatum >= int32(JaarStr+'0101'))
		, Descr = "set met verblijfsobjecten op 1 januari van elk jaar die voorraad zijn volgens de CBS definitie."
		{
			parameter<string>                Selection_string      := 'Voorraad';
			attribute<vbo_gebruiksdoel_plus> gebruiksdoel_plus_rel := impl/gebruiksdoel_plus_rel;
			attribute<pand>                  pand_rel              := rlookup(pand_bag_nr, pand/pand_bag_nr);
			attribute<yr>                    bouwjaar_trunc        := pand_rel -> bouwjaar_trunc;
			attribute<WP5>                   WP5_rel               := pand_rel -> WP5_rel;
			attribute<WP4>                   WP4_rel               := WP5/WP4_rel[WP5_rel];
			attribute<WP3>                   WP3_rel               := WP5/WP3_rel[WP5_rel];
			attribute<WP2>                   WP2_rel               := WP5/WP2_rel[WP5_rel];
			attribute<WP1>                   WP1_rel               := WP5/WP1_rel[WP5_rel];
			
			attribute<AllocDomain>           AllocDomain_rel       := geometry[AllocDomain];
			attribute<AdminDomain>           AdminDomain_rel       := geometry[AdminDomain];
			
			container Per_Gebruiksdoel := for_each_ne(vbo_gebruiksdoel_plus/name, 'Templates/BAG_GebruiksdoelSets_T(' + quote(vbo_gebruiksdoel_plus/name) +',..)');
			
			//adhoc
			unit<uint32> BlauweStad  := select_with_attr_by_cond(., IsBlauweStad);
			
			container Oppervlaktes
			{
				container per_WP2_AllocDomain :=
					for_each_nedv(
						WP2/name,
						'mean(WP2_rel == ' + string(id(WP2)) + '[WP2] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AllocDomain])',
						AllocDomain, m2_vbo
					);
					
				container per_WP2_AdminDomain :=
					for_each_nedv(
						WP2/name,
						'mean(WP2_rel == ' + string(id(WP2)) + '[WP2] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AdminDomain])',
						AdminDomain, m2_vbo
					);
				
				container per_WP4_AllocDomain :=
					for_each_nedv(
						WP4/name,
						'mean(WP4_rel == ' + string(id(WP4)) + '[WP4] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AllocDomain])',
						AllocDomain, m2_vbo
					);
				
				// container Oppervlakte_2WP_per_AllocDomain :=
					// for_each_nedv(
						// WP2/name 
						// , 'sum(WP2_rel == ' + string(id(WP2)) + '[WP2] ? (oppervlakte_trunc * 1[verblijfsobject] / 1[ha]) : (0/0)[m2_ha], geometry[AllocDomain])'
						// , AllocDomain, m2_ha
					// );
				
				container per_WP4_AdminDomain :=
					for_each_nedv(
						WP4/name,
						'mean(WP4_rel == ' + string(id(WP4)) + '[WP4] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AdminDomain])',
						AdminDomain, m2_vbo
					);
				
				// container Oppervlakte_4WP_per_AllocDomain :=
					// for_each_nedv(
						// WP4/name 
						// , 'sum(WP4_rel == ' + string(id(WP4)) + '[WP4] ? (oppervlakte_trunc * 1[verblijfsobject] / 1[ha]) : (0/0)[m2_ha], geometry[AllocDomain])'
						// , AllocDomain, m2_ha
					// );
			}
			container Counts
			{
				container per_WP1_AllocDomain :=
					for_each_nedv(
						WP1/name
						, 'sum(WP1_rel == ' + string(id(WP1)) + '[WP1] ? 1 : 0, geometry[AllocDomain])'
						, AllocDomain, uint32
					)
				{
					attribute<uint32> totaal (AllocDomain) := ='add(' + AsItemList(WP1/name) + ')';
				}
				
				container per_WP2_AllocDomain :=
					for_each_nedv(
						WP2/name 
						, 'sum(WP2_rel == ' + string(id(WP2)) + '[WP2] ? 1 : 0, geometry[AllocDomain])'
						, AllocDomain, uint32
					)
				{
					attribute<uint32> totaal (AllocDomain) := ='add(' + AsItemList(WP2/name) + ')';
				}
				
				container per_WP2_AdminDomain :=
					for_each_nedv(
						WP2/name
						, 'sum(WP2_rel == ' + string(id(WP2)) + '[WP2] ? 1 : 0, geometry[AdminDomain])'
						, AdminDomain, uint32
					)
				{
					attribute<uint32> totaal (AdminDomain) := ='add(' + AsItemList(WP2/name) + ')';
				}
				
				container per_WP4_AllocDomain :=
					for_each_nedv(
						WP4/name 
						, 'sum(WP4_rel == ' + string(id(WP4)) + '[WP4] ? 1 : 0, geometry[AllocDomain])'
						, AllocDomain, uint32
					)
				{
					attribute<uint32> totaal (AllocDomain) := ='add(' + AsItemList(WP4/name) + ')';
				}
				
				container per_WP4_AdminDomain :=
					for_each_nedv(
						WP4/name 
						, 'sum(WP4_rel == ' + string(id(WP4)) + '[WP4] ? 1 : 0, geometry[AdminDomain])'
						, AdminDomain, uint32
					)
				{
					attribute<uint32> totaal (AdminDomain) := ='add(' + AsItemList(WP4/name) + ')';
				}
			}
			
			container impl
			{
				container gebruiksdoelen :=
					for_each_nedv(
						vbo_gebruiksdoel/name
						, 'bitand(functie_code,vbo_gebruiksdoel/V/'+vbo_gebruiksdoel/name+'->functie_code) > 0w' 
						, vbo
						, bool
					);
				
				container gebruiksdoelen_cbs
				{
					attribute<bool>   utiliteit         (...) := ='('+AsList('gebruiksdoelen/'+vbo_gebruiksdoel/Utiliteiten/name, ' || ')+') && !woon';
					attribute<uint32> Count_Utiliteiten (...) := =AsList('gebruiksdoelen/'+vbo_gebruiksdoel/Utiliteiten/name+'[uint32]', ' + ');
					
					attribute<bool>   bijeenkomst       (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/bijeenkomst;
					attribute<bool>   cel               (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/cel;
					attribute<bool>   gezondheidszorg   (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/gezondheidszorg;
					attribute<bool>   industrie         (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/industrie;
					attribute<bool>   kantoor           (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/kantoor;
					attribute<bool>   logies            (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/logies;
					attribute<bool>   onderwijs         (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/onderwijs;
					attribute<bool>   overige_gebruiks  (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/overige_gebruiks;
					attribute<bool>   sport             (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/sport;
					attribute<bool>   winkel            (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/winkel;
					attribute<bool>   woon              (...) := gebruiksdoelen/woon;
					attribute<bool>   utiliteit_combi   (...) := !woon && Count_Utiliteiten > 1;
					attribute<bool>   logistiek         (...) := pand/IsLogistiekFunctie[pand_rel];
					attribute<bool>   niet_woon         (...) := !woon;
				}
				
				attribute<vbo_gebruiksdoel_plus> gebruiksdoel_plus_rel (..) := switch(
														 case(gebruiksdoelen_cbs/woon, vbo_gebruiksdoel_plus/v/woon)
														, case(gebruiksdoelen_cbs/bijeenkomst, vbo_gebruiksdoel_plus/v/bijeenkomst)
														, case(gebruiksdoelen_cbs/cel, vbo_gebruiksdoel_plus/v/cel)
														, case(gebruiksdoelen_cbs/gezondheidszorg, vbo_gebruiksdoel_plus/v/gezondheidszorg)
														, case(gebruiksdoelen_cbs/industrie, vbo_gebruiksdoel_plus/v/industrie)
														, case(gebruiksdoelen_cbs/kantoor, vbo_gebruiksdoel_plus/v/kantoor)
														, case(gebruiksdoelen_cbs/logies, vbo_gebruiksdoel_plus/v/logies)
														, case(gebruiksdoelen_cbs/onderwijs, vbo_gebruiksdoel_plus/v/onderwijs)
														, case(gebruiksdoelen_cbs/overige_gebruiks, vbo_gebruiksdoel_plus/v/overige_gebruiks)
														, case(gebruiksdoelen_cbs/sport, vbo_gebruiksdoel_plus/v/sport)
														, case(gebruiksdoelen_cbs/winkel, vbo_gebruiksdoel_plus/v/winkel)
														, vbo_gebruiksdoel_plus/v/utiliteit_combi
														);
			}
		}
		
		unit<uint32> pand_alle_statussen := select_with_attr_by_cond(VolledigeBAG/panden/pand
														, VolledigeBAG/panden/pand/begindatum < int32(JaarStr+'0101') 
															&& VolledigeBAG/panden/pand/einddatum >= int32(JaarStr+'0101'))
		, Descr = "set met panden op 1 januari van elk jaar met alle statussen. Tbv BAG Nieuwbouw identificatie"
		{
			parameter<string> Selection_string             := 'AlleStatussen';
			attribute<WP5>    WP5_rel                      := AfleidingPandtype/results/WP5_rel;
			attribute<WP4>    WP4_rel                      := WP5/WP4_rel[WP5_rel];
			attribute<WP3>    WP3_rel                      := WP5/WP3_rel[WP5_rel];
			attribute<WP2>    WP2_rel                      := WP5/WP2_rel[WP5_rel];
			attribute<WP1>    WP1_rel                      := WP5/WP1_rel[WP5_rel];
			
			unit<uint32> ToedelingsMatrix := = 'Uitsmeer_key/AdminDomain_in_all_panden';
			#include<Uitsmeer_key.dms>
			
			container Counts
			{
				attribute<uint32> vbos             (..) := pcount(vbo_alle_statussen/pand_alle_statussen_rel);
				attribute<uint32> woon_vbos        (..) := pcount(vbo_alle_statussen/Per_gebruiksdoel/woon/select/pand_alle_statussen_rel);
			}
			#include<AfleidingPandtype.dms>
		}
		
		unit<uint32> vbo_alle_statussen  := select_with_attr_by_cond(VolledigeBAG/vbos/vbo
														, VolledigeBAG/vbos/vbo/begindatum < int32(JaarStr+'0101') 
															&& VolledigeBAG/vbos/vbo/einddatum >= int32(JaarStr+'0101'))
		, Descr = "set met verblijfsobjecten op 1 januari van elk jaar met alle statussen. Tbv BAG Nieuwbouw identificatie"
		{
			parameter<string> Selection_string             := 'AlleStatussen';
			attribute<vbo_gebruiksdoel_plus> gebruiksdoel_plus_rel := impl/gebruiksdoel_plus_rel;
			attribute<pand>                                 pand_rel              := rlookup(pand_bag_nr, pand/pand_bag_nr);
			attribute<pand_alle_statussen>                  pand_alle_statussen_rel              := rlookup(pand_bag_nr, pand_alle_statussen/pand_bag_nr);
			attribute<yr>                    bouwjaar_trunc        := pand_rel -> bouwjaar_trunc;

			//adhoc
			unit<uint32> BlauweStad  := select_with_attr_by_cond(., IsBlauweStad);
			
			
			container Per_Gebruiksdoel := for_each_ne(vbo_gebruiksdoel_plus/name, 'Templates/BAG_GebruiksdoelSets_T(' + quote(vbo_gebruiksdoel_plus/name) +', ..)');
			container impl
			{
				container gebruiksdoelen :=
					for_each_nedv(
						vbo_gebruiksdoel/name
						, 'bitand(functie_code, vbo_gebruiksdoel/V/'+vbo_gebruiksdoel/name+' -> functie_code) > 0w' 
						, vbo_alle_statussen
						, bool
					);
				
				container gebruiksdoelen_cbs
				{
					attribute<bool>   utiliteit         (...) := ='('+AsList('gebruiksdoelen/'+vbo_gebruiksdoel/Utiliteiten/name, ' || ')+') && !woon';
					attribute<uint32> Count_Utiliteiten (...) := =AsList('gebruiksdoelen/'+vbo_gebruiksdoel/Utiliteiten/name+'[uint32]', ' + ');
					
					attribute<bool>   bijeenkomst       (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/bijeenkomst;
					attribute<bool>   cel               (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/cel;
					attribute<bool>   gezondheidszorg   (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/gezondheidszorg;
					attribute<bool>   industrie         (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/industrie;
					attribute<bool>   kantoor           (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/kantoor;
					attribute<bool>   logies            (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/logies;
					attribute<bool>   onderwijs         (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/onderwijs;
					attribute<bool>   overige_gebruiks  (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/overige_gebruiks;
					attribute<bool>   sport             (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/sport;
					attribute<bool>   winkel            (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/winkel;
					attribute<bool>   woon              (...) := gebruiksdoelen/woon;
					attribute<bool>   utiliteit_combi   (...) := !woon && Count_Utiliteiten > 1;
					attribute<bool>   logistiek         (...) := pand_alle_statussen/IsLogistiekFunctie[pand_alle_statussen_rel];
					attribute<bool>   niet_woon         (...) := !woon;
				}
				
				attribute<vbo_gebruiksdoel_plus> gebruiksdoel_plus_rel (..) := switch(
														 case(gebruiksdoelen_cbs/woon, vbo_gebruiksdoel_plus/v/woon)
														, case(gebruiksdoelen_cbs/bijeenkomst, vbo_gebruiksdoel_plus/v/bijeenkomst)
														, case(gebruiksdoelen_cbs/cel, vbo_gebruiksdoel_plus/v/cel)
														, case(gebruiksdoelen_cbs/gezondheidszorg, vbo_gebruiksdoel_plus/v/gezondheidszorg)
														, case(gebruiksdoelen_cbs/industrie, vbo_gebruiksdoel_plus/v/industrie)
														, case(gebruiksdoelen_cbs/kantoor, vbo_gebruiksdoel_plus/v/kantoor)
														, case(gebruiksdoelen_cbs/logies, vbo_gebruiksdoel_plus/v/logies)
														, case(gebruiksdoelen_cbs/onderwijs, vbo_gebruiksdoel_plus/v/onderwijs)
														, case(gebruiksdoelen_cbs/overige_gebruiks, vbo_gebruiksdoel_plus/v/overige_gebruiks)
														, case(gebruiksdoelen_cbs/sport, vbo_gebruiksdoel_plus/v/sport)
														, case(gebruiksdoelen_cbs/winkel, vbo_gebruiksdoel_plus/v/winkel)
														, vbo_gebruiksdoel_plus/v/utiliteit_combi
														);
			}
		}
		
		parameter<string> pand_hoogte_jaar := uint32(JaarStr) >= 2020 ? string(JaarStr) : string(2020);
		
		unit<uint32> pand_hoogte
		:	StorageName     = "='%RSo_DataDir%/Vastgoed/PHN_'+pand_hoogte_jaar+'0101.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<rdc_meter> geometry (poly) := rjoin(pand_bag_nr, pand/pand_bag_nr, pand/geometry);
			attribute<string>    identificatie;
			attribute<uint64>    pand_bag_nr                  := uint64(identificatie);
			attribute<uint16>    hoogte; 
			attribute<cm>        hoogte_cm       := float32(hoogte)[cm]; 
			attribute<cm>        hoogte_maaiveld; 
			attribute<int16>     AHN_inwinjaar; 
		}
	}

	container VolledigeBAG
	{ 
		parameter<string>  Snapshot_Date_Input := ModelParameters/BAG_file_date;
		parameter<string>  Result_FSS_dir      := '%RSo_DataDir%/Vastgoed/VolledigeTabel_' + Snapshot_Date_Input;
		parameter<int32>   MaxDatum            := 20500101i;
		parameter<string>  bouwjaar_truncation_expr        := 'bouwjaar <= 1005w || bouwjaar > @YYYY@[yr] ? null_w : bouwjaar < 1500w ? 1500w : bouwjaar';
		
		container panden
		{
			unit<uint32> vbo_domein := vbos/vbo;
			
			unit<uint32> import
			:	StorageName = "= Result_FSS_dir + '/pand.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<rdc_mm>                       geometry_mm (poly);
				attribute<rdc_mm>                       geometry_mm_simpl (poly) := bg_simplify_multi_polygon(geometry_mm, 100d);
				attribute<rdc_meter>                    geometry (poly) := geometry_mm[rdc_meter], DisableStorage = "true";
				attribute<rdc_meter>                    geometry_simpl (poly) := geometry_mm_simpl[rdc_meter], DisableStorage = "true";
				attribute<rdc_meter>                    geometry_inflated_20cm (poly) : Descr = "tbv pand typering"; //use the geometry from src that is corrected for inverted winding order. 
				// attribute<rdc_meter>                    geometry_inflated_20cm (poly) := bg_buffer_multi_polygon(src/geometry, 0.2d, 4b), Descr = "tbv pand typering"; //use the geometry from src that is corrected for inverted winding order. 
				
				attribute<string>                       identificatie;
				attribute<yr>                           bouwjaar;
				attribute<bool>                         IsNederland; //                  := IsDefined(point_in_polygon(centroid_or_mid(geometry), /Geography/StudyAreas/rdc_Nederland/geometry));
				attribute<bool>                         IsFriesland; //                  := IsDefined(point_in_polygon(centroid_or_mid(geometry), /Geography/StudyAreas/rdc_Friesland/geometry));

				container meta := meta_src_template(., pand_status);
			}
			
			unit<uint32> src := import
			{
				attribute<rdc_meter>                    geometry_org (poly)          := import/geometry;
				attribute<rdc_meter>                    geometry_simpl_org (poly)    := import/geometry_simpl;
				attribute<uint64>                       pand_bag_nr                  := uint64(identificatie);
				attribute<pand_status>                  status_rel                   := import/meta/status_rel;
				attribute<int32>                        begindatum                   := impl/begindatum0 < 19600101i ? impl/TIJDSTIPREGISTRATIE : impl/begindatum0;
				attribute<int32>                        einddatum                    := impl/einddatum0 < 19600101i ? impl/EINDREGISTRATIE : impl/einddatum0;
				attribute<yr>                           bouwjaar                     := import/bouwjaar;
				attribute<yr>                           bouwjaar_trunc               := =replace(bouwjaar_truncation_expr, '@YYYY@', '2025');
				attribute<m2PandFootprint>              footprint                    := area(geometry, meter2)[m2PandFootprint];
				
				attribute<bool>                         LigtInCBSVerblijfsrecreatie  := IsDefined(point_in_polygon(centroid_or_mid(geometry), SourceData/Grondgebruik/VerblijfsrecreatieBuffer/geometry_rd));
				attribute<bool>                         IsLogistiekFunctie           := IsDefined(rlookup(pand_bag_nr, SourceData/Vastgoed/Logistiek_panden/Logistics/pand_bag_nr));
				attribute<bool>                         IsVoorraad                   := pand_status/isVoorraad[status_rel];
				attribute<bool>                         IsStudyArea                  := ='Is'+ModelParameters/StudyArea;
				
				attribute<rdc_meter>                    geometry_inflated_20cm (poly):= import/geometry_inflated_20cm;
				attribute<rdc_meter>                    geometry (poly)              := recollect_by_cond(impl/HasNegativeArea, impl/select_reversed_winding_order/geometry_reversed, geometry_org);
				attribute<rdc_meter>                    geometry_simpl (poly)        := recollect_by_cond(impl/HasNegativeArea, impl/select_reversed_winding_order/geometry_reversed, geometry_simpl_org);
				
				unit<uint32> impl := .
				{
					//script to flip negative winding orders
					attribute<bool>                     HasNegativeArea              := area(geometry_org, meter2) < 0[meter2];
					unit<uint32> select_reversed_winding_order := select_with_org_rel(HasNegativeArea)
					{
						attribute<rdc_meter>                geometry (poly)          := src/geometry_org[org_rel];
						attribute<int32>                    begindatum0              := impl/begindatum0[org_rel];
						unit<uint32> seq_points := sequence2points(geometry)
						{
							attribute<rdc_meter> points_reversed       := reverse(point);
							attribute<uint32>    Sequence_rel_Reversed := reverse(Sequence_rel);
						}
						
						attribute<meter2>    area_reversed            := area(geometry_reversed, meter2);
						attribute<rdc_meter> geometry_reversed (poly) := points2sequence(seq_points/points_reversed, seq_points/Sequence_rel_Reversed);
					}
				
					attribute<int32>                        TIJDSTIPREGISTRATIE          := int32(replace(substr(import/meta/TIJDSTIPREGISTRATIE,0,10),'-',''));
					attribute<int32>                        EINDREGISTRATIE              := int32(replace(substr(import/meta/EINDREGISTRATIE,0,10),'-',''));
					attribute<int32>                        begindatum0                  := import/meta/BEGINDATUM == 0i ? MaxDatum : import/meta/BEGINDATUM;
					attribute<int32>                        einddatum0                   := import/meta/EINDDATUM == 0i ? MaxDatum : import/meta/EINDDATUM;
					attribute<rdc_meter>                    NW                           := lower_bound(geometry);
					attribute<rdc_meter>                    SE                           := upper_bound(geometry);
					attribute<float32>                      X_ext                        := sub_or_null(PointCol(SE),PointCol(NW));
					attribute<float32>                      Y_ext                        := sub_or_null(PointRow(SE),PointRow(NW));
					
					attribute<float32>                      lower_x := pointCol(NW);
					attribute<float32>                      upper_x := pointCol(SE);
					attribute<float32>                      lower_y := pointRow(NW);
					attribute<float32>                      upper_y := pointRow(SE);
					
					attribute<bool>                         pand_selection_condition     := ='X_ext < 1000f && Y_ext < 1000f' //panden met een grotere x/y range dan 1km eruit
																							'&& lower_x < 300000f && lower_x > 0f'
																							'&& upper_x < 300000f && upper_x > 0f'
																							'&& lower_y < 620000f && lower_y > 300000f'
																							'&& upper_y < 620000f && upper_y > 300000f'//; //binnen NL
																							'&& IsStudyArea';
																							
				}
			}  
				
			unit<uint32> pand := select_with_attr_by_org_rel(src, src/Impl/pand_selection_condition);
		}
		
		container VBOs
		{
			//import the source BAG files
			unit<uint32> import
			:	StorageName = "= Result_FSS_dir + '/vbo.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<rdc_mm>                     geometry_mm;
				attribute<rdc_meter>                  geometry  := geometry_mm[rdc_meter], DisableStorage = "true";
				attribute<string>                     identificatie;
				attribute<int32>                      oppervlakte;
				attribute<string>                     nummeraanduiding_id;
				attribute<bool>                       IsNederland; //                  := IsDefined(point_in_polygon(geometry, /Geography/StudyAreas/rdc_Nederland/geometry));
				attribute<bool>                       IsFriesland; //                  := IsDefined(point_in_polygon(geometry, /Geography/StudyAreas/rdc_Friesland/geometry));
				
				unit<uint32> gerelateerdPand
				{
					attribute<string> identificatie;
					attribute<string> pand_id;
				}
				
				container gebruiksdoelen :=
					for_each_ndv(
						vbo_gebruiksdoel/name
						, import
						, bool
					);
				
				container meta := meta_src_template(., vbo_status);
			}
			
			//enrich the source attributes, and prepare selection criteria.
			unit<uint32> src := import
			{
				attribute<rdc_meter>                  geometry                  := import/geometry;
				attribute<uint64>                     vbo_bag_nr                := uint64(identificatie);
				attribute<uint64>                     pand_bag_nr               := rjoin(vbo_bag_nr, uint64(import/gerelateerdPand/identificatie), uint64(import/gerelateerdPand/pand_id));
				attribute<int32>                      oppervlakte               := import/oppervlakte;
				attribute<m2_Vbo>                     oppervlakte_trunc         := oppervlakte[m2_Vbo] < 500000[m2_Vbo]  ? oppervlakte[m2_Vbo] : (0/0)[m2_Vbo];
				attribute<vbo_status>                 status_rel                := import/meta/status_rel;
				attribute<int32>                      begindatum                := import/meta/BEGINDATUM == 0i ? MaxDatum : import/meta/BEGINDATUM;
				attribute<int32>                      einddatum                 := import/meta/EINDDATUM == 0i ? MaxDatum : import/meta/EINDDATUM;
				attribute<yr>                         pand_bouwjaar_trunc       := rjoin(pand_bag_nr, panden/src/pand_bag_nr, panden/src/bouwjaar_trunc);
				attribute<bool>                       IsVoorraad                := vbo_status/isVoorraad[status_rel];
				attribute<uint16>                     functie_code              := impl/gebruiksdoelen/functie_code;
				attribute<bool>                       LigtInCBSVerblijfsrecreatie  := IsDefined(point_in_polygon(geometry, SourceData/Grondgebruik/VerblijfsrecreatieBuffer/geometry_rd));
				attribute<bool>                       IsStudyArea                  := ='Is'+ModelParameters/StudyArea;
				
				//adhoc
				unit<uint32> BlauweStad 
				: StorageName = "%SourceDataDir%/Overig/Blauwe Stad.shp"
				, StorageType = "gdal.vect"
				, StorageReadOnly = "true"
				, DialogData = "rdc_meter";
				
				attribute<bool>                       IsBlauweStad  := IsDefined(point_in_polygon(geometry, BlauweStad/geometry));
				
				unit<uint32> impl := .
				{
					container gebruiksdoelen :=
						for_each_nedv(
							vbo_gebruiksdoel/name
							, 'import/gebruiksdoelen/'+vbo_gebruiksdoel/name
							, src
							, bool
						)
					{
						attribute<uint16> functie_code (src) := ='add('+AsItemList(vbo_gebruiksdoel/name+'? '+string(vbo_gebruiksdoel/functie_code)+'w : 0w')+')';
					}

					attribute<float32>    x                         := PointCol(geometry);
					attribute<float32>    y                         := PointRow(geometry);
					attribute<bool>       vbo_selection_condition   := x < 300000f && x > 0f && y < 620000f && y > 300000f && IsStudyArea; //binnen NL
				}
			}

			// We only select valid records. We omit for example all records that have a geometry outside of the bounding box of Netherlands 
			unit<uint32> vbo := select_with_attr_by_cond(src, src/impl/vbo_selection_condition);
			// unit<uint32> vbo := select_with_attr_by_org_rel(src, const(TRUE,src));
		}
		
		template meta_src_template // Voor het inlezen van de generieke BAG attributen
		{
			unit<uint32> domain;
			unit<uint8>  statustype;
			// end case parameters

			attribute<string>     STATUS                 (domain);
			attribute<statustype> status_rel             (domain) := rlookup(lowercase(STATUS), lowercase(statustype/label));

			attribute<int32>      BEGINDATUM             (domain);
			attribute<int32>      EINDDATUM              (domain);
			attribute<uint32>     VOORKOMENIDENTIFICATIE (domain); //een identificatienummer kan meerdere keren voorkomen. Dit is een volgnummer dat de versie weergeeft.

			attribute<string>     TIJDSTIPREGISTRATIE    (domain);
			attribute<string>     EINDREGISTRATIE        (domain);

			attribute<int32>      DOCUMENTDATUM          (domain);
			attribute<string>     DOCUMENTNUMMER         (domain);

			attribute<bool>       IS_GECONSTATEERD       (domain);
		}
	}
}