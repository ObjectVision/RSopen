container BAG : using = "Classifications/Vastgoed;Classifications"
{
	unit<UInt8> WP5 := Classifications/Vastgoed/WP5;
	unit<UInt8> WP4 := Classifications/Vastgoed/WP4;
	unit<UInt8> WP3 := Classifications/Vastgoed/WP3;
	unit<UInt8> WP2 := Classifications/Vastgoed/WP2;
	unit<UInt8> pand_status := Classifications/Vastgoed/pand_status;
	unit<UInt8> vbo_status := Classifications/Vastgoed/vbo_status;
	
	parameter<String> SnapshotDir2024 := '%RSo_DataDir%/Vastgoed/20240101_RS';
	
	unit<UInt32> BAG_jaren := range(uint32, 2012, uint32(right(string(ModelParameters/BAG_RecentYear),4)) + 1)
	{
		attribute<UInt32> Jaar           := id(.);
		attribute<String> name           := 'Y' + string(jaar);
		attribute<String> prev_Jaar_name := name[prev_jaar]; 
		attribute<UInt32> prev_Jaar      := Jaar - 1;
		attribute<Bool>   IsFirstYear    := jaar == first(Jaar);
		attribute<String> Label          := name, DialogType = "LabelText";
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		
		unit<UInt32> minusFirstYear := select_with_org_rel(!IsFirstYear)
		{
			attribute<UInt32> Jaar  := ../jaar[org_rel];
			attribute<String> name  := ../name[org_rel];
			attribute<String> Label := name, DialogType = "LabelText";
		}
	}
	
	container PerJaar := for_each_ne(BAG_jaren/name, 'PerJaar_T('+quote(string(BAG_jaren/jaar))+')');
	
	Template PerJaar_T
	{
		parameter<String> JaarStr;
		///
		attribute<Bool> pand_selection_condition (VolledigeBAG/panden/pand) := VolledigeBAG/panden/pand/IsVoorraad 
															&& VolledigeBAG/panden/pand/Begindatum < int32(JaarStr+'0101') 
															&& VolledigeBAG/panden/pand/Einddatum >= int32(JaarStr+'0101');
		unit<UInt32> pand := select_with_attr_by_cond(VolledigeBAG/panden/pand, pand_selection_condition)
		, Descr = "set met panden op 1 januari van elk jaar die voorraad zijn volgens de CBS definitie."
		{
			parameter<String> Selection_string      := 'Voorraad';
			
			//deze ontkoppeling is alleen voor debugging. Mocht je hier tegenaan lopen. Zet de modelparameter op false.
			attribute<WP5>            Calc_WP5_rel                     := AfleidingPandType/results/WP5_rel;
			attribute<WP5>            Write_WP5_rel                    := Calc_WP5_rel, StorageName = "='%LocalDataProjDir%/BaseData/Vastgoed/BAG/'+Selection_string+'_'+JaarStr+'_'+/ModelParameters/StudyArea+'_'+ModelParameters/BAG_file_date+'/WP5_rel.fss'";
			attribute<WP5>            Read_WP5_rel                     : StorageName = "=PropValue(Write_WP5_rel, 'StorageName')", StorageReadOnly = "TRUE";
			attribute<WP5>            WP5_rel                          := =ModelParameters/BAG_WP5_rel_Ontkoppeld ? 'Read_WP5_rel' : 'Write_WP5_rel';

			attribute<WP4>            WP4_rel                          := WP5/WP4_rel[WP5_rel];
			attribute<WP3>            WP3_rel                          := WP5/WP3_rel[WP5_rel];
			attribute<WP2>            WP2_rel                          := WP5/WP2_rel[WP5_rel];
			attribute<WP1>            WP1_rel                          := WP5/WP1_rel[WP5_rel];
			
			attribute<vbo_gebruiksdoel_plus> dominant_gebruiksdoel     := Counts/Vbos_perGebruiksdoel/Dominant;
			
			attribute<Bool>           pand_selection_condition (VolledigeBAG/panden/pand) := ../pand_selection_condition;
			attribute<Bool>           Is_VrijeSector                                      := rjoin(pand_bag_nr, SourceData/Vastgoed/EigendomStaat/pand/pand_bag_nr, SourceData/Vastgoed/EigendomStaat/pand/Is_VS_pand);
		
			attribute<../pand_hoogte> PHN_rel                          := rlookup(pand_bag_nr, ../pand_hoogte/pand_bag_nr);
			attribute<cm>             pand_hoogte                      := ../pand_hoogte/hoogte_cm[PHN_rel];
			attribute<cm>             pand_hoogte_maaiveld             := ../pand_hoogte/hoogte_maaiveld[PHN_rel];

			unit<UInt32> ToedelingsMatrix             := Uitsmeer_key/AdminDomain_in_all_panden;
			unit<UInt32> ToedelingsMatrix_AllocDomain := Uitsmeer_key/AllocDomain_in_all_panden;
			#include<Uitsmeer_key.dms>
		
			container Counts
			{
				attribute<UInt32> VBOs       (..) := pcount(vbo/Pand_rel);
				attribute<UInt32> woon_VBOs  (..) := pcount(VBO/Per_gebruiksdoel/woon/select/Pand_rel);
				
				attribute<Float32> Per_AllocDomain (AllocDomain) := sum(ToedelingsMatrix_AllocDomain/ToedelingPand, ToedelingsMatrix_AllocDomain/AllocDomain_rel);
				attribute<Float32> Per_AdminDomain (AdminDomain) := sum(ToedelingsMatrix/ToedelingPand, ToedelingsMatrix/AdminDomain_rel);
				
				container Vbos_perGebruiksdoel :=
					for_each_nedv(
						vbo_gebruiksdoel_plus/name
						, 'sum_uint32(vbo/gerelateerdPand/gebruiksdoel_plus_rel == vbo_gebruiksdoel_plus/v/'+vbo_gebruiksdoel_plus/name+', vbo/gerelateerdPand/Pand_rel)'
						, pand
						, uint32
					), Descr = "Count het aantal vbo binnen een pand per gebruiksdoel"
				{
					attribute<UInt32>                Totaal        (pand) := ='add('+asList(vbo_gebruiksdoel_plus/name,',')+')';
					attribute<vbo_gebruiksdoel_plus> dominant      (pand) := ='ArgMax_ifdefined_uint8('+asList(vbo_gebruiksdoel_plus/name+' > 0 ? '+vbo_gebruiksdoel_plus/name+' : null_u',',')+')';
					attribute<bool>                  HeeftGeenWoon (pand) := woon == 0;
				}
			}
			
			container BepalingGebruiksdoel 
			: Descr = "issue #222 tbv bepaling bouwjaar van panden zonder vbo, om deze te mogen slopen (i.e. bouwjaar te hoog om te mogen slopen?)"
			{
				unit<uint32> gebruiksdoelen_cbs := ..
				, Descr = "classificeer panden met cbs methodiek maar op basis van gerelateerde vbo's. "
				{
					attribute<Bool>   utiliteit          := ='('+asList('Counts/Vbos_perGebruiksdoel/'+vbo_gebruiksdoel/Utiliteiten/name+' > 0', ' || ')+') && Counts/Vbos_perGebruiksdoel/HeeftGeenWoon';
					attribute<UInt32> Count_Utiliteiten  := =asList('Counts/Vbos_perGebruiksdoel/'+vbo_gebruiksdoel/Utiliteiten/name, ' + ');
					
					attribute<Bool>   bijeenkomst        := Counts/Vbos_perGebruiksdoel/HeeftGeenWoon && Count_Utiliteiten == 1 && Counts/Vbos_perGebruiksdoel/bijeenkomst > 0;
					attribute<Bool>   cel                := Counts/Vbos_perGebruiksdoel/HeeftGeenWoon && Count_Utiliteiten == 1 && Counts/Vbos_perGebruiksdoel/cel > 0;
					attribute<Bool>   Gezondheidszorg    := Counts/Vbos_perGebruiksdoel/HeeftGeenWoon && Count_Utiliteiten == 1 && Counts/Vbos_perGebruiksdoel/Gezondheidszorg > 0;
					attribute<Bool>   industrie          := Counts/Vbos_perGebruiksdoel/HeeftGeenWoon && Count_Utiliteiten == 1 && Counts/Vbos_perGebruiksdoel/industrie > 0;
					attribute<Bool>   Kantoor            := Counts/Vbos_perGebruiksdoel/HeeftGeenWoon && Count_Utiliteiten == 1 && Counts/Vbos_perGebruiksdoel/Kantoor > 0;
					attribute<Bool>   logies             := Counts/Vbos_perGebruiksdoel/HeeftGeenWoon && Count_Utiliteiten == 1 && Counts/Vbos_perGebruiksdoel/logies > 0;
					attribute<Bool>   onderwijs          := Counts/Vbos_perGebruiksdoel/HeeftGeenWoon && Count_Utiliteiten == 1 && Counts/Vbos_perGebruiksdoel/onderwijs > 0;
					attribute<Bool>   overige_gebruiks   := Counts/Vbos_perGebruiksdoel/HeeftGeenWoon && Count_Utiliteiten == 1 && Counts/Vbos_perGebruiksdoel/overige_gebruiks > 0;
					attribute<Bool>   sport              := Counts/Vbos_perGebruiksdoel/HeeftGeenWoon && Count_Utiliteiten == 1 && Counts/Vbos_perGebruiksdoel/sport > 0;
					attribute<Bool>   winkel             := Counts/Vbos_perGebruiksdoel/HeeftGeenWoon && Count_Utiliteiten == 1 && Counts/Vbos_perGebruiksdoel/winkel > 0;
					attribute<Bool>   woon               := Counts/Vbos_perGebruiksdoel/woon > 0;
					attribute<Bool>   utiliteit_combi    := Counts/Vbos_perGebruiksdoel/HeeftGeenWoon && Count_Utiliteiten > 1;
					attribute<Bool>   Logistiek          := IsLogistiekFunctie;
					attribute<Bool>   niet_woon          := Counts/Vbos_perGebruiksdoel/HeeftGeenWoon;
				}
				
				attribute<bool> LigtOpIBISterrein     (..) := ='IsDefined(point_in_polygon(centroid_or_mid(geometry), /SourceData/Grondgebruik/IBIS/Y'+/ModelParameters/IBIS_Year+'/geometry))', Descr = "Opslagloodsen, fabrieksgebouwen, tanks, siloâ€™s, transformatorhuisjes en andere utiliteitsbouw krijgen vaak geen afzonderlijk verblijfsobject. Dit is vaak op bedrijventerreien, dus om dit op te vangen een controloe of een pand op een IBIS terrein ligt." ;
				attribute<bool> LigtInBRTglastuinbouw (..) := ='IsDefined(point_in_polygon(centroid_or_mid(geometry), /SourceData/Grondgebruik/BRT/Compleet/MaakLosseCat_gebouw/Gebouwen_kas_warenhuis/vlak/geometry))', Descr = "Kassengebouwen krijgen ook geen vbo, en dus ook geen gebruiksdoel. Daarnaast liggen deze ook niet op IBIS terreinen. Dus om deze op te sporen controleren we de BRT";
				
				attribute<vbo_gebruiksdoel_plus> gebruiksdoel_plus_rel (..) := switch(
														 case(gebruiksdoelen_cbs/woon, vbo_gebruiksdoel_plus/v/woon)
														, case(gebruiksdoelen_cbs/logistiek, vbo_gebruiksdoel_plus/v/logistiek)
														, case(gebruiksdoelen_cbs/bijeenkomst, vbo_gebruiksdoel_plus/v/bijeenkomst)
														, case(gebruiksdoelen_cbs/cel, vbo_gebruiksdoel_plus/v/cel)
														, case(gebruiksdoelen_cbs/Gezondheidszorg, vbo_gebruiksdoel_plus/v/Gezondheidszorg)
														, case(gebruiksdoelen_cbs/industrie, vbo_gebruiksdoel_plus/v/industrie)
														, case(gebruiksdoelen_cbs/Kantoor, vbo_gebruiksdoel_plus/v/Kantoor)
														, case(gebruiksdoelen_cbs/logies, vbo_gebruiksdoel_plus/v/logies)
														, case(gebruiksdoelen_cbs/onderwijs, vbo_gebruiksdoel_plus/v/onderwijs)
														, case(gebruiksdoelen_cbs/overige_gebruiks, vbo_gebruiksdoel_plus/v/overige_gebruiks)
														, case(gebruiksdoelen_cbs/sport, vbo_gebruiksdoel_plus/v/sport)
														, case(gebruiksdoelen_cbs/winkel, vbo_gebruiksdoel_plus/v/winkel)
														, case(gebruiksdoelen_cbs/utiliteit_combi, vbo_gebruiksdoel_plus/v/utiliteit_combi)
														, case(LigtOpIBISterrein, vbo_gebruiksdoel_plus/v/utiliteit_combi)
														, case(LigtInBRTglastuinbouw, vbo_gebruiksdoel_plus/v/utiliteit_combi)
														, null_b
														);
														
				attribute<Bool> IsPandMetFunctie (..) := IsDefined(gebruiksdoel_plus_rel), Descr = "Die panden die we WEL meenemen in de bouwjaar selectie";
				unit<UInt32>    PandenMetFunctie := select_with_org_rel(IsPandMetFunctie)
				{
					attribute<yr>     Bouwjaar_trunc := org_rel -> bouwjaar_trunc;
					attribute<uint64> pand_bag_nr    := org_rel -> pand_bag_nr;
					
					unit<UInt32> ToedelingsMatrix := select_with_org_rel(pand/ToedelingsMatrix/IsPandMetFunctie_condition)
					{
						attribute<uint64>      pand_bag_nr      := org_rel -> pand_bag_nr;
						attribute<AdminDomain> AdminDomain_rel  := org_rel -> AdminDomain_rel;
						attribute<Float32>     ToedelingPand    := org_rel -> ToedelingPand;
						attribute<..>          Pand_rel         := rlookup(pand_bag_nr, ../pand_bag_nr);
					}
				}
			}
			
			container Oppervlaktes
			{
				attribute<m2_pand>         vbo_opp            (..) := sum(vbo/oppervlakte_trunc, vbo/Pand_rel) * 1[verblijfsobject] / 1[Units/PandUnit];
				attribute<m2_pand>         vbo_opp_niet_woon0 (..) := sum(vbo/Impl/gebruiksdoelen_cbs/niet_woon ? vbo/oppervlakte_trunc : 0[m2_vbo], vbo/Pand_rel) == 0[m2_vbo]
																		? (0/0)[m2_pand]
																		: sum(vbo/Impl/gebruiksdoelen_cbs/niet_woon ? vbo/oppervlakte_trunc : 0[m2_vbo], vbo/Pand_rel) * 1[verblijfsobject] < Footprint[meter2] 
																			? Footprint / 1[m2PandFootprint] * 1[m2_pand]
																			: sum(vbo/Impl/gebruiksdoelen_cbs/niet_woon ? vbo/oppervlakte_trunc : 0[m2_vbo], vbo/Pand_rel) * 1[verblijfsobject / Units/PandUnit];
				
				attribute<Float32>         Ratio_vbo_opp_niet_woon_Footprint (..) := (vbo_opp_niet_woon0 / 1[m2_pand]) / (Footprint / 1[m2PandFootprint]);
				attribute<m2_pand>         vbo_opp_niet_woon                 (..) := Ratio_vbo_opp_niet_woon_Footprint >= 100f ? (0/0)[m2_pand] : vbo_opp_niet_woon0;
				
				
				container VBOopp_perWP2 :=
					for_each_nedv(
						WP2/name
						,'sum(vbo/WP2_rel == WP2/V/'+WP2/name+'[WP2] ? vbo/oppervlakte_trunc : 0[m2_vbo], vbo/Pand_rel) * 1[Units/verblijfsobject]'
						, pand
						, meter2
					), Descr = "wordt oa gebruikt in EigendomStaat tbv bepaling VS/SH verdeling.";
					
				container VBOopp_perWP4 :=
					for_each_nedv(
						WP4/name
						,'sum(vbo/WP4_rel == WP4/V/'+WP4/name+'[WP4] ? vbo/oppervlakte_trunc : 0[m2_vbo], vbo/Pand_rel) * 1[Units/verblijfsobject]'
						, pand
						, meter2
					), Descr = "wordt oa gebruikt in EigendomStaat tbv bepaling VS/SH verdeling.";
					
				container VBOopp_perGebruiksdoel :=
					for_each_nedv(
						vbo_gebruiksdoel_plus/name
						, 'sum(vbo/Impl/gebruiksdoelen_cbs/'+vbo_gebruiksdoel_plus/name+' ? vbo/oppervlakte_trunc : (0/0)[m2_Vbo], vbo/Pand_rel) * 1[verblijfsobject]'
						, pand
						, meter2
					), Descr = "per gebruiksdoel de vbo oppervlakte in een pand";
				
				container Footprint_perGebruiksdoel :=
					for_each_nedv(
						vbo_gebruiksdoel_plus/name
						, lowercase(quote(vbo_gebruiksdoel_plus/name))+' == lowercase(''Logistiek'') && IsLogistiekFunctie 
							? Footprint 
							: '+lowercase(quote(vbo_gebruiksdoel_plus/name))+' == lowercase(''Logistiek'') && NOT(IsLogistiekFunctie)
								? 0[m2PandFootprint]
								: IsLogistiekFunctie 
									? 0[m2PandFootprint] 
									: (VBOopp_perGebruiksdoel/'+vbo_gebruiksdoel_plus/name+' / (vbo_opp * 1[Units/PandUnit])) * Footprint'
						, pand
						, m2PandFootprint
					), Descr = "per gebruiksdoel de pand Footprint obv de share van vbo Oppervlaktes in het pand"
				{
					attribute<vbo_gebruiksdoel_plus> ArgMax    (pand) := ='!IsDefined(bijeenkomst) ? (0/0)[vbo_gebruiksdoel_plus] : ArgMax('+asItemList(vbo_gebruiksdoel_plus/name)+')[vbo_gebruiksdoel_plus]';
				}
				
				container Fractie_VBOOpp_perGebruiksdoel :=
					for_each_nedv(
						vbo_gebruiksdoel_plus/name
						,'(sum(vbo/Impl/gebruiksdoelen_cbs/'+vbo_gebruiksdoel_plus/name+' ? vbo/oppervlakte_trunc : (0/0)[m2_Vbo], vbo/Pand_rel) * 1[verblijfsobject]) / (vbo_opp * 1[Units/PandUnit])'
						, pand
						, float32
					)
				{
					attribute<vbo_gebruiksdoel_plus> ArgMax (...) := ='ArgMax_alldefined('+asItemList(vbo_gebruiksdoel_plus/name)+')[vbo_gebruiksdoel_plus]';
				}
				
			}
			
			attribute<Bool> met_vbo_selection_condition := counts/VBOs > 0;
			unit<UInt32>    met_vbo := select_with_attr_by_cond(., met_vbo_selection_condition)
			{
				container Counts
				{
					container Vbos_perGebruiksdoel      := collect_attr_by_cond(Pand/Counts/Vbos_perGebruiksdoel, met_vbo, pand/met_vbo_selection_condition);
					attribute<Float32>  Monumentaal_Per_AllocDomain (AllocDomain) := sum(float32(Bouwjaar_trunc <= 1900[yr])[ToedelingsMatrix_AllocDomain/Pand_rel] * ToedelingsMatrix_AllocDomain/ToedelingPand, ToedelingsMatrix_AllocDomain/AllocDomain_rel);
					attribute<Float32>  Per_AllocDomain             (AllocDomain) := sum(ToedelingsMatrix_AllocDomain/ToedelingPand, ToedelingsMatrix_AllocDomain/AllocDomain_rel);
				}
				container Oppervlaktes
				{
					container Footprint_perGebruiksdoel      := collect_attr_by_cond(Pand/Oppervlaktes/Footprint_perGebruiksdoel, met_vbo, pand/met_vbo_selection_condition);
					container VBOopp_perGebruiksdoel         := collect_attr_by_cond(Pand/Oppervlaktes/VBOopp_perGebruiksdoel, met_vbo, pand/met_vbo_selection_condition);
					container Fractie_VBOOpp_perGebruiksdoel := collect_attr_by_cond(Pand/Oppervlaktes/Fractie_VBOOpp_perGebruiksdoel, met_vbo, pand/met_vbo_selection_condition);
					attribute<m2_pand> vbo_opp (..) := collect_by_cond(met_vbo, pand/met_vbo_selection_condition, Pand/Oppervlaktes/vbo_opp);
				}
				
				unit<UInt32> ToedelingsMatrix := select_with_org_rel(pand/ToedelingsMatrix/met_vbo_selection_condition)
				{
					attribute<uint64>      pand_bag_nr      := org_rel -> pand_bag_nr;
					attribute<AdminDomain> AdminDomain_rel  := org_rel -> AdminDomain_rel;
					attribute<Float32>     ToedelingPand    := org_rel -> ToedelingPand;
					attribute<..>          Pand_rel         := rlookup(pand_bag_nr, ../pand_bag_nr);
				}
				unit<UInt32> ToedelingsMatrix_AllocDomain := select_with_org_rel(pand/ToedelingsMatrix_AllocDomain/met_vbo_selection_condition)
				{
					attribute<uint64>      pand_bag_nr      := org_rel -> pand_bag_nr;
					attribute<AllocDomain> AllocDomain_rel  := org_rel -> AllocDomain_rel;
					attribute<Float32>     ToedelingPand    := org_rel -> ToedelingPand;
					attribute<..>          Pand_rel         := rlookup(pand_bag_nr, ../pand_bag_nr);
				}
			}
			
			#include<AfleidingPandType.dms>
		}
		
		unit<UInt32> vbo  := select_with_attr_by_cond(VolledigeBAG/VBOs/vbo
														, VolledigeBAG/VBOs/vbo/IsVoorraad 
															&& VolledigeBAG/VBOs/vbo/Begindatum < int32(JaarStr+'0101') 
															&& VolledigeBAG/VBOs/vbo/Einddatum >= int32(JaarStr+'0101'))
		, Descr = "set met verblijfsobjecten op 1 januari van elk jaar die voorraad zijn volgens de CBS definitie."
		{
			parameter<String>                Selection_string      := 'Voorraad';
			attribute<vbo_gebruiksdoel_plus> gebruiksdoel_plus_rel := Impl/gebruiksdoel_plus_rel;
			attribute<pand>                  Pand_rel                := rlookup(pand_bag_nr, pand/pand_bag_nr);
			attribute<pand_alle_statussen>   pand_alle_statussen_rel := rlookup(pand_bag_nr, pand_alle_statussen/pand_bag_nr);
			attribute<yr>                    Bouwjaar_trunc        := Pand_rel -> Bouwjaar_trunc;
			attribute<WP5>                   WP5_rel               := Pand_rel -> WP5_rel;
			attribute<WP4>                   WP4_rel               := WP5/WP4_rel[WP5_rel];
			attribute<WP3>                   WP3_rel               := WP5/WP3_rel[WP5_rel];
			attribute<WP2>                   WP2_rel               := WP5/WP2_rel[WP5_rel];
			attribute<WP1>                   WP1_rel               := WP5/WP1_rel[WP5_rel];
			
			attribute<AllocDomain>           AllocDomain_rel       := geometry[AllocDomain];
			attribute<AdminDomain>           AdminDomain_rel       := geometry[AdminDomain];
			
			container Per_Gebruiksdoel := for_each_ne(vbo_gebruiksdoel_plus_plus/name, 'Templates/BAG_GebruiksdoelSets_T(' + quote(vbo_gebruiksdoel_plus_plus/name) +',..)');
			
			unit<UInt32> gerelateerdPand := select_with_attr_by_cond(VolledigeBAG/VBOs/src/gerelateerdPand
																		, IsDefined(rlookup(VolledigeBAG/VBOs/src/gerelateerdPand/vbo_bag_nr, vbo/vbo_bag_nr)) 
																		&& IsDefined(rlookup(VolledigeBAG/VBOs/src/gerelateerdPand/pand_bag_nr, pand/pand_bag_nr)))
			{
				attribute<vbo>                   vbo_rel                 := rlookup(vbo_bag_nr, vbo/vbo_bag_nr);
				attribute<pand>                  pand_rel                := rlookup(pand_bag_nr, pand/pand_bag_nr);
				attribute<vbo_gebruiksdoel_plus> gebruiksdoel_plus_rel   := impl/gebruiksdoel_plus_rel[vbo_rel];
			}
			
			
			
			container Oppervlaktes
			{
				container per_WP2_AllocDomain :=
					for_each_nedv(
						WP2/name,
						'mean(WP2_rel == ' + string(id(WP2)) + '[WP2] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AllocDomain])',
						AllocDomain, m2_vbo
					);
					
				container per_WP2_AdminDomain :=
					for_each_nedv(
						WP2/name,
						'mean(WP2_rel == ' + string(id(WP2)) + '[WP2] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AdminDomain])',
						AdminDomain, m2_vbo
					);
				
				container per_WP4_AllocDomain :=
					for_each_nedv(
						WP4/name,
						'mean(WP4_rel == ' + string(id(WP4)) + '[WP4] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AllocDomain])',
						AllocDomain, m2_vbo
					);
				
				container per_WP4_AdminDomain :=
					for_each_nedv(
						WP4/name,
						'mean(WP4_rel == ' + string(id(WP4)) + '[WP4] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AdminDomain])',
						AdminDomain, m2_vbo
					);
			}
			container Counts
			{
				container per_WP1_AllocDomain :=
					for_each_nedv(
						WP1/name
						, 'sum_uint32(WP1_rel == ' + string(id(WP1)) + '[WP1], geometry[AllocDomain])'
						, AllocDomain, uint32
					);
				
				container per_WP1_AdminDomain :=
					for_each_nedv(
						WP1/name
						, 'sum_uint32(WP1_rel == ' + string(id(WP1)) + '[WP1], geometry[AdminDomain])'
						, AdminDomain, uint32
					);
				
				container per_WP2_AllocDomain :=
					for_each_nedv(
						WP2/name 
						, 'sum_uint32(WP2_rel == ' + string(id(WP2)) + '[WP2], geometry[AllocDomain])'
						, AllocDomain, uint32
					)
				{
					attribute<UInt32> Totaal (AllocDomain) := ='add(' + asItemList(WP2/name) + ')';
				}
				
				container per_WP2_AdminDomain :=
					for_each_nedv(
						WP2/name
						, 'sum_uint32(WP2_rel == ' + string(id(WP2)) + '[WP2], geometry[AdminDomain])'
						, AdminDomain, uint32
					)
				{
					attribute<UInt32> Totaal (AdminDomain) := ='add(' + asItemList(WP2/name) + ')';
				}
				
				container per_WP4_AllocDomain :=
					for_each_nedv(
						WP4/name 
						, 'sum_uint32(WP4_rel == ' + string(id(WP4)) + '[WP4], geometry[AllocDomain])'
						, AllocDomain, uint32
					)
				{
					attribute<UInt32> Totaal (AllocDomain) := ='add(' + asItemList(WP4/name) + ')';
				}
				
				container per_WP4_AdminDomain :=
					for_each_nedv(
						WP4/name 
						, 'sum_uint32(WP4_rel == ' + string(id(WP4)) + '[WP4], geometry[AdminDomain])'
						, AdminDomain, uint32
					)
				{
					attribute<UInt32> Totaal (AdminDomain) := ='add(' + asItemList(WP4/name) + ')';
				}
			}
			
			container Impl
			{
				unit<UInt32> gerelateerdPand 
				{
					attribute<String> identificatie;
					attribute<String> pand_id;
					
					attribute<uint64> vbo_bag_nr  := uint64(identificatie);
					attribute<uint64> pand_bag_nr := uint64(pand_id);
					
					attribute<..> import_rel := rlookup(vbo_bag_nr, ../identificatie);
				}
			
				container gebruiksdoelen :=
					for_each_nedv(
						vbo_gebruiksdoel/name
						, 'bitand(functie_code,vbo_gebruiksdoel/V/'+vbo_gebruiksdoel/name+'->functie_code) > 0w' 
						, vbo
						, bool
					);
				
				container gebruiksdoelen_cbs
				{
					attribute<Bool>   utiliteit         (...) := ='('+asList('gebruiksdoelen/'+vbo_gebruiksdoel/Utiliteiten/name, ' || ')+') && !woon';
					attribute<UInt32> Count_Utiliteiten (...) := =asList('gebruiksdoelen/'+vbo_gebruiksdoel/Utiliteiten/name+'[uint32]', ' + ');
					
					attribute<Bool>   bijeenkomst       (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/bijeenkomst;
					attribute<Bool>   cel               (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/cel;
					attribute<Bool>   Gezondheidszorg   (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/Gezondheidszorg;
					attribute<Bool>   industrie         (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/industrie;
					attribute<Bool>   Kantoor           (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/Kantoor;
					attribute<Bool>   logies            (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/logies;
					attribute<Bool>   onderwijs         (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/onderwijs;
					attribute<Bool>   overige_gebruiks  (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/overige_gebruiks;
					attribute<Bool>   sport             (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/sport;
					attribute<Bool>   winkel            (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/winkel;
					attribute<Bool>   woon              (...) := gebruiksdoelen/woon;
					attribute<Bool>   utiliteit_combi   (...) := !woon && Count_Utiliteiten > 1;
					attribute<Bool>   Logistiek         (...) := pand/IsLogistiekFunctie[Pand_rel];
					attribute<Bool>   niet_woon         (...) := !woon;
				}
				
				attribute<vbo_gebruiksdoel_plus> gebruiksdoel_plus_rel (..) := switch(
														 case(gebruiksdoelen_cbs/woon, vbo_gebruiksdoel_plus/v/woon)
														, case(gebruiksdoelen_cbs/logistiek, vbo_gebruiksdoel_plus/v/logistiek)
														, case(gebruiksdoelen_cbs/bijeenkomst, vbo_gebruiksdoel_plus/v/bijeenkomst)
														, case(gebruiksdoelen_cbs/cel, vbo_gebruiksdoel_plus/v/cel)
														, case(gebruiksdoelen_cbs/Gezondheidszorg, vbo_gebruiksdoel_plus/v/Gezondheidszorg)
														, case(gebruiksdoelen_cbs/industrie, vbo_gebruiksdoel_plus/v/industrie)
														, case(gebruiksdoelen_cbs/Kantoor, vbo_gebruiksdoel_plus/v/Kantoor)
														, case(gebruiksdoelen_cbs/logies, vbo_gebruiksdoel_plus/v/logies)
														, case(gebruiksdoelen_cbs/onderwijs, vbo_gebruiksdoel_plus/v/onderwijs)
														, case(gebruiksdoelen_cbs/overige_gebruiks, vbo_gebruiksdoel_plus/v/overige_gebruiks)
														, case(gebruiksdoelen_cbs/sport, vbo_gebruiksdoel_plus/v/sport)
														, case(gebruiksdoelen_cbs/winkel, vbo_gebruiksdoel_plus/v/winkel)
														, vbo_gebruiksdoel_plus/v/utiliteit_combi
														);
				attribute<vbo_gebruiksdoel_plus_plus> gebruiksdoel_plus_plus_rel (..) := rjoin(gebruiksdoel_plus_rel, vbo_gebruiksdoel_plus_plus/vbo_gebruiksdoel_plus_rel, id(vbo_gebruiksdoel_plus_plus));
			}
		}
		
		unit<UInt32> pand_alle_statussen := select_with_attr_by_cond(VolledigeBAG/panden/pand
														, VolledigeBAG/panden/pand/Begindatum < int32(JaarStr+'0101') 
															&& VolledigeBAG/panden/pand/Einddatum >= int32(JaarStr+'0101'))
		, Descr = "set met panden op 1 januari van elk jaar met alle statussen. Tbv BAG Nieuwbouw identificatie"
		{
			parameter<String> Selection_string             := 'AlleStatussen';

			//deze ontkoppeling is alleen voor debugging. Mocht je hier tegenaan lopen. Zet de modelparameter op false.
			attribute<WP5>            Calc_WP5_rel                     := AfleidingPandType/results/WP5_rel;
			attribute<WP5>            Write_WP5_rel                    := Calc_WP5_rel, StorageName = "='%LocalDataProjDir%/BaseData/Vastgoed/BAG/'+Selection_string+'_'+JaarStr+'_'+/ModelParameters/StudyArea+'_'+ModelParameters/BAG_file_date+'/WP5_rel.fss'";  
			attribute<WP5>            Read_WP5_rel                     : StorageName = "=PropValue(Write_WP5_rel, 'StorageName')", StorageReadOnly = "TRUE";
			attribute<WP5>            WP5_rel                          := =ModelParameters/BAG_WP5_rel_Ontkoppeld ? 'Read_WP5_rel' : 'Write_WP5_rel';
			
			attribute<WP4>            WP4_rel                          := WP5/WP4_rel[WP5_rel];
			attribute<WP3>            WP3_rel                          := WP5/WP3_rel[WP5_rel];
			attribute<WP2>            WP2_rel                          := WP5/WP2_rel[WP5_rel];
			attribute<WP1>            WP1_rel                          := WP5/WP1_rel[WP5_rel];
			
			unit<UInt32> ToedelingsMatrix := = 'Uitsmeer_key/AdminDomain_in_all_panden';
			#include<Uitsmeer_key.dms>
			
			container Counts
			{
				attribute<UInt32> VBOs             (..) := pcount(vbo_alle_statussen/pand_alle_statussen_rel);
				attribute<UInt32> woon_VBOs        (..) := pcount(vbo_alle_statussen/Per_gebruiksdoel/woon/select/pand_alle_statussen_rel);
			}
			#include<AfleidingPandType.dms>
		}
		
		unit<UInt32> vbo_alle_statussen  := select_with_attr_by_cond(VolledigeBAG/VBOs/vbo
														, VolledigeBAG/VBOs/vbo/Begindatum < int32(JaarStr+'0101') 
															&& VolledigeBAG/VBOs/vbo/Einddatum >= int32(JaarStr+'0101'))
		, Descr = "set met verblijfsobjecten op 1 januari van elk jaar met alle statussen. Tbv BAG Nieuwbouw identificatie"
		{
			parameter<String> Selection_string             := 'AlleStatussen';
			attribute<vbo_gebruiksdoel_plus> gebruiksdoel_plus_rel := Impl/gebruiksdoel_plus_rel;
			attribute<pand>                                 Pand_rel              := rlookup(pand_bag_nr, pand/pand_bag_nr);
			attribute<pand_alle_statussen>                  pand_alle_statussen_rel              := rlookup(pand_bag_nr, pand_alle_statussen/pand_bag_nr);
			attribute<yr>                    Bouwjaar_trunc        := Pand_rel -> Bouwjaar_trunc;

			container Per_Gebruiksdoel := for_each_ne(vbo_gebruiksdoel_plus_plus/name, 'Templates/BAG_GebruiksdoelSets_T(' + quote(vbo_gebruiksdoel_plus_plus/name) +', ..)');
			container Impl
			{
				container gebruiksdoelen :=
					for_each_nedv(
						vbo_gebruiksdoel/name
						, 'bitand(functie_code, vbo_gebruiksdoel/V/'+vbo_gebruiksdoel/name+' -> functie_code) > 0w' 
						, vbo_alle_statussen
						, bool
					);
				
				container gebruiksdoelen_cbs
				{
					attribute<Bool>   utiliteit         (...) := ='('+asList('gebruiksdoelen/'+vbo_gebruiksdoel/Utiliteiten/name, ' || ')+') && !woon';
					attribute<UInt32> Count_Utiliteiten (...) := =asList('gebruiksdoelen/'+vbo_gebruiksdoel/Utiliteiten/name+'[uint32]', ' + ');
					
					attribute<Bool>   bijeenkomst       (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/bijeenkomst;
					attribute<Bool>   cel               (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/cel;
					attribute<Bool>   Gezondheidszorg   (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/Gezondheidszorg;
					attribute<Bool>   industrie         (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/industrie;
					attribute<Bool>   Kantoor           (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/Kantoor;
					attribute<Bool>   logies            (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/logies;
					attribute<Bool>   onderwijs         (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/onderwijs;
					attribute<Bool>   overige_gebruiks  (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/overige_gebruiks;
					attribute<Bool>   sport             (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/sport;
					attribute<Bool>   winkel            (...) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/winkel;
					attribute<Bool>   woon              (...) := gebruiksdoelen/woon;
					attribute<Bool>   utiliteit_combi   (...) := !woon && Count_Utiliteiten > 1;
					attribute<Bool>   Logistiek         (...) := pand_alle_statussen/IsLogistiekFunctie[pand_alle_statussen_rel];
					attribute<Bool>   niet_woon         (...) := !woon;
				}
				
				attribute<vbo_gebruiksdoel_plus> gebruiksdoel_plus_rel (..) := switch(
														 case(gebruiksdoelen_cbs/woon, vbo_gebruiksdoel_plus/v/woon)
														, case(gebruiksdoelen_cbs/bijeenkomst, vbo_gebruiksdoel_plus/v/bijeenkomst)
														, case(gebruiksdoelen_cbs/cel, vbo_gebruiksdoel_plus/v/cel)
														, case(gebruiksdoelen_cbs/Gezondheidszorg, vbo_gebruiksdoel_plus/v/Gezondheidszorg)
														, case(gebruiksdoelen_cbs/industrie, vbo_gebruiksdoel_plus/v/industrie)
														, case(gebruiksdoelen_cbs/Kantoor, vbo_gebruiksdoel_plus/v/Kantoor)
														, case(gebruiksdoelen_cbs/logies, vbo_gebruiksdoel_plus/v/logies)
														, case(gebruiksdoelen_cbs/onderwijs, vbo_gebruiksdoel_plus/v/onderwijs)
														, case(gebruiksdoelen_cbs/overige_gebruiks, vbo_gebruiksdoel_plus/v/overige_gebruiks)
														, case(gebruiksdoelen_cbs/sport, vbo_gebruiksdoel_plus/v/sport)
														, case(gebruiksdoelen_cbs/winkel, vbo_gebruiksdoel_plus/v/winkel)
														, vbo_gebruiksdoel_plus/v/utiliteit_combi
														);
				attribute<vbo_gebruiksdoel_plus_plus> gebruiksdoel_plus_plus_rel (..) := rjoin(gebruiksdoel_plus_rel, vbo_gebruiksdoel_plus_plus/vbo_gebruiksdoel_plus_rel, id(vbo_gebruiksdoel_plus_plus));
			}
		}
		
		parameter<String> pand_hoogte_jaar := uint32(JaarStr) >= 2020 ? string(JaarStr) : string(2020);
		
		unit<UInt32> pand_hoogte
		:	StorageName     = "='%RSo_DataDir%/Vastgoed/PHN_'+pand_hoogte_jaar+'0101.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<rdc_meter> geometry (poly) := rjoin(pand_bag_nr, pand/pand_bag_nr, pand/geometry);
			attribute<String>    identificatie;
			attribute<uint64>    pand_bag_nr                  := uint64(identificatie);
			attribute<UInt16>    hoogte; 
			attribute<cm>        hoogte_cm       := float32(hoogte)[cm]; 
			attribute<cm>        hoogte_maaiveld; 
			attribute<Int16>     AHN_inwinjaar; 
		}
	}

	container VolledigeBAG
	{ 
		parameter<String>  Snapshot_Date_Input := ModelParameters/BAG_file_date;
		parameter<String>  Result_fss_dir      := '%RSo_DataDir%/Vastgoed/VolledigeTabel_' + Snapshot_Date_Input;
		parameter<Int32>   MaxDatum            := 20500101i;
		parameter<String>  Bouwjaar_truncation_Expr := 'Bouwjaar <= 1005w || Bouwjaar > @YYYY@[yr] ? null_w : Bouwjaar < 1500w ? 1500w : Bouwjaar';
		parameter<String>  max_Bouwjaar             := string(ModelParameters/BAG_RecentYear);
		
		container panden
		{
			unit<UInt32> vbo_domein := VBOs/vbo;
			
			unit<UInt32> Import
			:	StorageName = "= Result_fss_dir + '/pand.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<rdc_mm>                       geometry_mm            (poly);
				attribute<rdc_mm>                       geometry_mm_simpl      (poly) := geos_buffer_multi_polygon(geometry_mm, 100d, 16b);
				attribute<rdc_meter>                    geometry               (poly) := geometry_mm[rdc_meter], DisableStorage = "TRUE";
				attribute<rdc_meter>                    geometry_simpl         (poly) := geometry_mm_simpl[rdc_meter], DisableStorage = "TRUE";
				attribute<rdc_meter>                    geometry_inflated_20cm_dpoint (poly) : Descr = "tbv pand typering"; //use the geometry from src that is corrected for inverted winding order. 
				// attribute<rdc_meter>                    geometry_inflated_20cm_dpoint (poly) := geos_buffer_multi_polygon(src/geometry, 0.2d, 4b), Descr = "tbv pand typering"; //use the geometry from src that is corrected for inverted winding order. 
				attribute<rdc_meter>                    geometry_inflated_20cm (poly) := geometry_inflated_20cm_dpoint;
				
				attribute<String>                       identificatie;
				attribute<yr>                           Bouwjaar;
				attribute<Bool>                         IsNederland; //                  := IsDefined(point_in_polygon(centroid_or_mid(geometry), /Geography/StudyAreas/rdc_Nederland/geometry));
				attribute<Bool>                         IsFriesland; //                  := IsDefined(point_in_polygon(centroid_or_mid(geometry), /Geography/StudyAreas/rdc_Friesland/geometry));
				attribute<Bool>                         IsUtrecht; //                    := IsDefined(point_in_polygon(centroid_or_mid(geometry), /Geography/StudyAreas/rdc_Utrecht/geometry));
				attribute<Bool>                         IsNoord_Holland; //              := IsDefined(point_in_polygon(centroid_or_mid(geometry), /Geography/StudyAreas/rdc_Noord_Holland/geometry));

				container meta := meta_src_template(., pand_status);
			}
			
			unit<UInt32> src := Import
			{
				attribute<rdc_meter>                    geometry_org (poly)          := Import/geometry;
				attribute<rdc_meter>                    geometry_simpl_org (poly)    := Import/geometry_simpl;
				attribute<uint64>                       pand_bag_nr                  := uint64(identificatie);
				attribute<pand_status>                  status_rel                   := Import/meta/status_rel;
				attribute<Int32>                        Begindatum                   := Impl/Begindatum0 < 19600101i ? Impl/TIJDSTIPREGISTRATIE : Impl/Begindatum0;
				attribute<Int32>                        Einddatum                    := Impl/Einddatum0 < 19600101i ? Impl/EINDREGISTRATIE : Impl/Einddatum0;
				attribute<yr>                           Bouwjaar                     := Import/Bouwjaar;
				attribute<yr>                           Bouwjaar_trunc               := =replace(Bouwjaar_truncation_Expr, '@YYYY@', max_Bouwjaar);
				attribute<m2PandFootprint>              Footprint                    := area(geometry, meter2_f64)[m2PandFootprint];
				
				attribute<Bool>                         LigtInCBSVerblijfsrecreatie  := IsDefined(point_in_polygon(centroid_or_mid(geometry), /SourceData/Grondgebruik/BBG/Dominant/IsVerblijfsRecreatieSub/union_jaren/split_union_buffer/geometry));
				attribute<Bool>                         IsLogistiekFunctie           := IsDefined(rlookup(pand_bag_nr, SourceData/Vastgoed/Logistiek_panden/Logistics/pand_bag_nr));
				attribute<Bool>                         IsVoorraad                   := pand_status/isVoorraad[status_rel];
				attribute<Bool>                         IsStudyArea                  := ='Is'+ModelParameters/StudyArea;
				
				attribute<rdc_meter>                    geometry_inflated_20cm (poly):= Import/geometry_inflated_20cm;
				attribute<rdc_meter>                    geometry (poly)              := recollect_by_cond(Impl/HasNegativearea, Impl/select_reversed_winding_order/geometry_reversed, geometry_org);
				attribute<rdc_meter>                    geometry_simpl (poly)        := recollect_by_cond(Impl/HasNegativearea, Impl/select_reversed_winding_order/geometry_reversed, geometry_simpl_org);
				
				unit<UInt32> Impl := .
				{
					//script to flip negative winding orders
					attribute<Bool>                     HasNegativearea              := area(geometry_org, meter2_f64) < 0[meter2_f64];
					unit<UInt32> select_reversed_winding_order := select_with_org_rel(HasNegativearea)
					{
						attribute<rdc_meter>                geometry (poly)          := src/geometry_org[org_rel];
						attribute<Int32>                    Begindatum0              := Impl/Begindatum0[org_rel];
						unit<UInt32> seq_points := sequence2points(geometry)
						{
							attribute<rdc_meter> points_reversed       := reverse(point);
							attribute<UInt32>    Sequence_rel_Reversed := reverse(Sequence_rel);
						}
						
						attribute<meter2>    area_reversed            := area(geometry_reversed, meter2);
						attribute<rdc_meter> geometry_reversed (poly) := points2sequence(seq_points/points_reversed, seq_points/Sequence_rel_Reversed);
					}
				
					attribute<Int32>                        TIJDSTIPREGISTRATIE          := int32(replace(substr(Import/meta/TIJDSTIPREGISTRATIE,0,10),'-',''));
					attribute<Int32>                        EINDREGISTRATIE              := int32(replace(substr(Import/meta/EINDREGISTRATIE,0,10),'-',''));
					attribute<Int32>                        Begindatum0                  := Import/meta/Begindatum == 0i ? MaxDatum : Import/meta/Begindatum;
					attribute<Int32>                        Einddatum0                   := Import/meta/Einddatum == 0i ? MaxDatum : Import/meta/Einddatum;
					attribute<rdc_meter>                    NW                           := lower_bound(geometry);
					attribute<rdc_meter>                    SE                           := upper_bound(geometry);
					attribute<Float64>                      X_ext                        := sub_or_null(PointCol(SE),PointCol(NW));
					attribute<Float64>                      Y_ext                        := sub_or_null(PointRow(SE),PointRow(NW));
					
					attribute<Float64>                      lower_x := PointCol(NW);
					attribute<Float64>                      upper_x := PointCol(SE);
					attribute<Float64>                      lower_y := PointRow(NW);
					attribute<Float64>                      upper_y := PointRow(SE);
					
					attribute<Bool>                         pand_selection_condition     := ='X_ext < 1000d && Y_ext < 1000d' //panden met een grotere x/y range dan 1km eruit
																							'&& lower_x < 300000d && lower_x > 0d'
																							'&& upper_x < 300000d && upper_x > 0d'
																							'&& lower_y < 620000d && lower_y > 300000d'
																							'&& upper_y < 620000d && upper_y > 300000d'//; //binnen NL
																							'&& IsStudyArea';
																							
				}
			}  
				
			unit<UInt32> pand := select_with_attr_by_org_rel(src, src/Impl/pand_selection_condition);
		}
		
		container VBOs
		{
			//Import the source BAG files
			unit<UInt32> Import
			:	StorageName = "= Result_fss_dir + '/vbo.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<rdc_mm>                     geometry_mm;
				attribute<rdc_meter>                  geometry  := geometry_mm[rdc_meter], DisableStorage = "TRUE";
				attribute<String>                     identificatie;
				attribute<Int32>                      oppervlakte;
				attribute<String>                     nummeraanduiding_id;
				attribute<Bool>                       IsNederland;//                  := IsDefined(point_in_polygon(geometry, /Geography/StudyAreas/rdc_Nederland/geometry));
				attribute<Bool>                       IsFriesland;//                  := IsDefined(point_in_polygon(geometry, /Geography/StudyAreas/rdc_Friesland/geometry));
				attribute<Bool>                       IsUtrecht  ;//                  := IsDefined(point_in_polygon(geometry, /Geography/StudyAreas/rdc_Utrecht/geometry));
				attribute<Bool>                       IsNoord_Holland;//                    := IsDefined(point_in_polygon(geometry, /Geography/StudyAreas/rdc_Noord_Holland/geometry));
				
				
				
				unit<UInt32> gerelateerdPand
				{
					attribute<String> identificatie;
					attribute<String> pand_id;
				}
				
				container gebruiksdoelen :=
					for_each_ndv(
						vbo_gebruiksdoel/name
						, Import
						, bool
					);
				
				container meta := meta_src_template(., vbo_status);
			}
			
			//enrich the source attributes, and prepare selection criteria.
			unit<UInt32> src := Import
			{
				attribute<rdc_meter>                  geometry                  := Import/geometry;
				attribute<uint64>                     vbo_bag_nr                := uint64(identificatie);
				attribute<uint64>                     pand_bag_nr               := rjoin(vbo_bag_nr, uint64(Import/gerelateerdPand/identificatie), uint64(Import/gerelateerdPand/pand_id)); //LET OP: dit is een 1..n relatie. Dus rjoin is misleidend
				attribute<Int32>                      oppervlakte               := Import/oppervlakte;
				attribute<m2_Vbo>                     oppervlakte_trunc         := oppervlakte[m2_Vbo] < 500000[m2_Vbo]  ? oppervlakte[m2_Vbo] : (0/0)[m2_Vbo];
				attribute<vbo_status>                 status_rel                := Import/meta/status_rel;
				attribute<Int32>                      Begindatum                := Import/meta/Begindatum == 0i ? MaxDatum : Import/meta/Begindatum;
				attribute<Int32>                      Einddatum                 := Import/meta/Einddatum == 0i ? MaxDatum : Import/meta/Einddatum;
				attribute<yr>                         pand_Bouwjaar_trunc       := rjoin(pand_bag_nr, panden/src/pand_bag_nr, panden/src/Bouwjaar_trunc);
				attribute<Bool>                       IsVoorraad                := vbo_status/isVoorraad[status_rel];
				attribute<UInt16>                     functie_code              := Impl/gebruiksdoelen/functie_code;
				attribute<Bool>                       LigtInCBSVerblijfsrecreatie  := IsDefined(point_in_polygon(geometry, SourceData/Grondgebruik/BBG/Dominant/IsVerblijfsRecreatieSub/union_jaren/split_union_buffer/geometry));
				attribute<Bool>                       IsStudyArea                  := ='Is'+ModelParameters/StudyArea;
				
				
				unit<UInt32> gerelateerdPand := import/gerelateerdPand
				{
					attribute<uint64>      vbo_bag_nr  := uint64(identificatie);
					attribute<uint64>      pand_bag_nr := uint64(pand_id);
				}
				
				unit<UInt32> Impl := .
				{
					container gebruiksdoelen :=
						for_each_nedv(
							vbo_gebruiksdoel/name
							, 'Import/gebruiksdoelen/'+vbo_gebruiksdoel/name
							, src
							, bool
						)
					{
						attribute<UInt16> functie_code (src) := ='add('+asItemList(vbo_gebruiksdoel/name+'? '+string(vbo_gebruiksdoel/functie_code)+'w : 0w')+')';
					}

					attribute<Float64>    x                         := PointCol(geometry);
					attribute<Float64>    y                         := PointRow(geometry);
					attribute<Bool>       vbo_selection_condition   := x < 300000d && x > 0d && y < 620000d && y > 300000d && IsStudyArea; //binnen NL
				}
			}

			// We only select valid records. We omit for example all records that have a geometry outside of the bounding box of Netherlands 
			unit<UInt32> vbo := select_with_attr_by_cond(src, src/Impl/vbo_selection_condition);
		}
		
		template meta_src_template // Voor het inlezen van de generieke BAG attributen
		{
			unit<UInt32> domain;
			unit<UInt8>  statusType;
			// end case Parameters

			attribute<String>     Status                 (domain);
			attribute<statusType> status_rel             (domain) := rlookup(LowerCase(Status), LowerCase(statusType/Label));

			attribute<Int32>      Begindatum             (domain);
			attribute<Int32>      Einddatum              (domain);
			attribute<UInt32>     VOORKOMENidENTIFICATIE (domain); //een identificatienummer kan meerdere keren voorkomen. Dit is een volgnummer dat de versie weergeeft.

			attribute<String>     TIJDSTIPREGISTRATIE    (domain);
			attribute<String>     EINDREGISTRATIE        (domain);

			attribute<Int32>      DOCUMENTDATUM          (domain);
			attribute<String>     DOCUMENTNUMMER         (domain);

			attribute<Bool>       IS_GECONSTATEERD       (domain);
		}
	}
	
	#include<MaakVolledigeBAG.dms>
}