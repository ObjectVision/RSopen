container Y2017
: Descr = "Inlezen van de WOZ-waarden per m2 voor een bepaalde administratieve indeling (Gemeente, Wijk, Buurt). Bron: CBS. Peildatum 1 jan 2016 (bestand is 1 jan 2017)."
{
	container Gemeente := T('Gem'  , 'GM', RegioIndelingen/CBS/Y2016/Gemeente);
	container Wijk     := T('Wijk' , 'WK', RegioIndelingen/CBS/Y2016/wijk);
	container Buurt    := T('Buurt', 'BU', RegioIndelingen/CBS/Y2016/buurt);
	
	container per_WOZBb :=
		for_each_nedv(
			WOZBBG/name,
			'MakeDefined(MakeDefined(Buurt/domain/Nul2Undefined/'+WOZBBG/name+', Wijk/domain/Nul2Undefined/'+WOZBBG/name+'), Gemeente/domain/Nul2Undefined/'+WOZBBG/name+')',
			AdminDomain, Eur_m2
		), Descr = "Per WOZBBG de gemiddelde WOZ-waarde per m2 per AdminDomain. De waarden uit de buurt worden gebruikt als die er zijn, anders die uit de wijk, anders die uit de gemeente."
	{
		attribute<Eur_m2> max_elem (AdminDomain) := = 'max_elem('+asItemList(WOZBBG/name)+')';
	}
	
	attribute<Eur_m2> Gegeven_BBG (AdminDomain) := =
		'merge('
			'value(CBS2010Klasse/WOZBBG_rel[SourceData/Grondgebruik/BBG/dominant/Per_AdminDomain/Y2017], UInt16),'
			'Eur_m2,'+
			asItemList('per_WOZBb/'+WOZBBG/name)+
		')', Descr = "De WOZ-waarde per m2 per AdminDomain, op basis van de WOZBBG indeling van het CBS en de bijbehorende waarden uit de brondata. Als er geen waarde is voor een bepaalde WOZBBG, wordt 0 teruggegeven.";
	
	container BAG := SourceData/Vastgoed/BAG/PerJaar/Y2018;
	
	attribute<Eur> Make_Per_vob (BAG/VBO) := Gegeven_BBG[BAG/VBO/AdminDomain_rel] * (BAG/VBO/oppervlakte_trunc * 1[verblijfsobject]), StorageName = '%RSo_DataDir%/Vastgoed/WOZ/WOZ2017.fss', Descr = "De WOZ-waarde per verblijfsobject, berekend als de WOZ-waarde per m2 maal de oppervlakte van het verblijfsobject.";
	attribute<Eur> Per_vob (BAG/VBO) : StorageName = '%RSo_DataDir%/Vastgoed/WOZ/WOZ2017.fss', Descr = "De WOZ-waarde per verblijfsobject, berekend als de WOZ-waarde per m2 maal de oppervlakte van het verblijfsobject.";
	attribute<Eur> Mean_AdminDomain (AdminDomain) := mean(Per_vob, BAG/VBO/AdminDomain_rel), Descr = "De gemiddelde WOZ-waarde per AdminDomain, berekend als de som van de WOZ-waarde van alle verblijfsobjecten in het gebied gedeeld door het aantal verblijfsobjecten in het gebied.";
	attribute<Classifications/Vastgoed/WOZ> PerWOZKlasse (AdminDomain) := Classify(Mean_AdminDomain, Classifications/Vastgoed/WOZ/ClassBreaks), Descr = "De WOZ-klasse per AdminDomain, gebaseerd op de gemiddelde WOZ-waarde in het gebied.";
	
	container Niet_Woningen
	{
		attribute<Eur> Per_vob        (BAG/VBO/Per_Gebruiksdoel/niet_woon/select) := Gegeven_BBG[BAG/VBO/Per_Gebruiksdoel/niet_woon/select/AdminDomain_rel] * (BAG/VBO/Per_Gebruiksdoel/niet_woon/select/oppervlakte_trunc * 1[verblijfsobject]), Descr = "De WOZ-waarde per niet-woon verblijfsobject, berekend als de WOZ-waarde per m2 maal de oppervlakte van het verblijfsobject.";
		attribute<Eur> Per_AdminDomain (AdminDomain) := sum(Per_vob, BAG/VBO/Per_Gebruiksdoel/niet_woon/select/AdminDomain_rel), Descr = "De totale WOZ-waarde van niet-woon verblijfsobjecten per AdminDomain.";
		attribute<Eur> Per_AllocDomain (AllocDomain) := sum(Per_vob, BAG/VBO/Per_Gebruiksdoel/niet_woon/select/AllocDomain_rel), Descr = "De totale WOZ-waarde van niet-woon verblijfsobjecten per AllocDomain.";
	}
	
	Template T
	: Descr = "Inlezen van de WOZ-waarden per m2 voor een bepaalde administratieve indeling (Gemeente, Wijk, Buurt)."
	{
		parameter<String> SrcRef;
		parameter<String> CodeRef;
		unit<UInt32> RegionK;
		//
		
		unit<UInt32> Domain
		:  StorageName = "= '%RSo_DataDir%/Vastgoed/WOZ/190215_'+ SrcRef +'_woz.csv'"
		,  StorageType = "gdal.vect"
		,  StorageReadOnly = "True"
		{
			attribute<String> r2017;
			attribute<String> bg2015_groep;
			attribute<String> wozm2_mean;
			attribute<String> wozm2_sd;
			attribute<String> aantalobjecten;
			
			attribute<String> R_CODE := CodeRef+r2017;
			
			// attribute<RegionK> Region_rel := = 'rjoin(R_CODE, RegionK/'+CodeRef+'_CODE, id(RegionK))';
			attribute<RegionK> Region_rel := = 'rjoin(R_CODE, RegionK/statcode, id(RegionK))';
			attribute<WOZBBG> WOZBBG_rel := rjoin(uint8(bg2015_groep), WOZBBG/EK_rel, id(WOZBBG));
			
			attribute<Eur_m2> mean := wozm2_mean[Eur_m2];
			attribute<Eur_m2> sd := wozm2_sd[Eur_m2];
			attribute<Int32> n := aantalobjecten[int32];
			
			container per_WOZBb :=
				for_each_nedv(
					WOZBBG/name,
					'sum('
						'(Domain/mean + Domain/sd) * '+string(WOZBBG/growth_factor)+'[float32] * float32(Domain/WOZBBG_rel == '+string(id(WOZBBG))+'[WOZBBG]),'
						'Domain/Region_rel'
					')[RegionK/Per_AdminDomain]',
					Geography/AdminDomain, Eur_m2
				)
			{
				attribute<Eur_m2> max_elem (AdminDomain) := = 'max_elem('+asItemList(WOZBBG/name)+')', Descr = "De maximale waarde over alle WOZBBG's, om te zien of er extreme waarden in de data zitten.";
			}
			
			container Nul2Undefined :=
				for_each_nedv(
					WOZBBG/name,
					'per_WOZBb/'+WOZBBG/name+' == 0[Eur_m2] ? (0/0)[Eur_m2] : per_WOZBb/'+WOZBBG/name,
					Geography/AdminDomain, Eur_m2
				), Descr = "Zet alle 0 waarden om in undefined, zodat ze niet per ongeluk als 0 worden gebruikt.";
		}
	}
}