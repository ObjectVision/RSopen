container Plancapaciteit : using = "Units;Classifications;ModelParameters;VariantParameters;Geography"
, Descr = "Plancapaciteit data uit Plancapaciteit configuratie, ingelezen via TIF files per sector en hardheid"
{
	unit<UInt8> HardheidK: NrOfRows = 2
	, Descr = "Hardheid van de sector waarvoor plancapaciteiten beschikbaar zijn"
	{
		attribute<String> name:
		[
			'Hard',
			'Zacht'
		];
	}
	
	unit<UInt8> SectorK : NrOfRows = 2
	, Descr = "Sectoren waarvoor plancapaciteiten beschikbaar zijn"
	{
		attribute<String> name:
		[
			'Wonen',
			'Werken'
		];
	}
	
	unit<UInt8> Sector_x_HardheidK := combine_uint8(SectorK, HardheidK)
	, Descr = "Combinatie van sector en hardheid"
	{
		attribute<String> Sector_name    := SectorK/name[first_rel];
		attribute<String> HardheidK_name := HardheidK/name[second_rel];
		attribute<String> name           := Sector_name+'/'+HardheidK_name;
	}
	
	container Read := 
		for_each_ne(
			Sector_x_HardheidK/name
			,'Read_PlanCapaciteit_Tifs_T('+quote(Sector_x_HardheidK/Sector_name)+', '+quote(Sector_x_HardheidK/HardheidK_name)+')'
		), Descr = "Inlezen van de plancapaciteit tifs per sector en hardheid"
	{
		container Wind
		: Descr = "Omdat het model gebruik maakt van templates voor alle te allocaren sectoren, moeten er waarden zijn voor de sectoren die wel gealloceerd worden, maar geen plannen voor zijn. Daarom is alles hier constant FALSE."
		{
			container Hard
			{
				attribute<Bool> Per_AdminDomain (AdminDomain) := const(FALSE, AdminDomain);
				attribute<Bool> Per_AllocDomain (AllocDomain) := const(FALSE, AllocDomain);
			}
			container Zacht
			{
				attribute<Bool> Per_AdminDomain (AdminDomain) := const(FALSE, AdminDomain);
				attribute<Bool> Per_AllocDomain (AllocDomain) := const(FALSE, AllocDomain);
			}
		}
		container Zon
		: Descr = "Omdat het model gebruik maakt van templates voor alle te allocaren sectoren, moeten er waarden zijn voor de sectoren die wel gealloceerd worden, maar geen plannen voor zijn. Daarom is alles hier constant FALSE."
		{
			container Hard
			{
				attribute<Bool> Per_AdminDomain (AdminDomain) := const(FALSE, AdminDomain);
				attribute<Bool> Per_AllocDomain (AllocDomain) := const(FALSE, AllocDomain);
			}
			container Zacht
			{
				attribute<Bool> Per_AdminDomain (AdminDomain) := const(FALSE, AdminDomain);
				attribute<Bool> Per_AllocDomain (AllocDomain) := const(FALSE, AllocDomain);
			}
		}
		container Verblijfsrecreatie
		: Descr = "Omdat het model gebruik maakt van templates voor alle te allocaren sectoren, moeten er waarden zijn voor de sectoren die wel gealloceerd worden, maar geen plannen voor zijn. Daarom is alles hier constant FALSE."
		{
			container Hard
			{
				attribute<Bool> Per_AdminDomain (AdminDomain) := const(FALSE, AdminDomain);
				attribute<Bool> Per_AllocDomain (AllocDomain) := const(FALSE, AllocDomain);
			}
			container Zacht
			{
				attribute<Bool> Per_AdminDomain (AdminDomain) := const(FALSE, AdminDomain);
				attribute<Bool> Per_AllocDomain (AllocDomain) := const(FALSE, AllocDomain);
			}
		}
	}
	
	//temp, idee om plantypes mee te nemen voor welke sector waar mag komen. kantoren op bedrijventerrein, logistiek en industie op industrie terrein.
	container MRA
	{
		container Werken
		{
			unit<uint32> Shp
			:	StorageName = "%Plancapaciteit_DataDir%/Provincie/Noord_Holland/WerklocatiesPlabeka2019NK.shp"
			,	StorageType = "gdal.vect"
			,	Source      = "Plancapaciteit.nl, via Nils Klopper (prov. Noord Holland)"
			,	StorageReadOnly = "true"
			,	DialogData = "rdc_meter";
			
			unit<uint32>  Result := Shp
			{
				attribute<rdc_meter> Geometry (poly) := Shp/Geometry;
				attribute<string>    Plantype        := Shp/type;
				
				attribute<Plantypes> Plantype_rel := rlookup(Plantype, Plantypes/values);
				unit<uint8> Plantypes := unique_uint8(plantype)
				{
					
				}
				
				attribute<bool>       IsHardTm30                     := BHtm30 > 0[float64] || KHtm30 > 0[float64];
				attribute<bool>       IsHard                         := IsHardTm30 || MRAWest; //hard na30 bestaat niet
				attribute<bool>       IsZacht                        := !IsHard;

				container V := for_each_nedv(AsItemName(plannaam), string(id(.))+'[..]', void, .);
			}
		}
	}	
	
	Template Read_PlanCapaciteit_Tifs_T
	: Descr = "Inlezen van de plancapaciteit tifs per sector en hardheid"
	{
		parameter<String> Sector_name;
		parameter<String> HardheidK_name;
		//
		
		attribute<Bool> Per_AdminDomain (AdminDomain)
		: StorageName = "=UsePrivPlanCapaciteit ? '%PrivDataDir%/PlanCapaciteit/'+ModelParameters/Plancapaciteit_filedate+'/PrivPlannen_'+Sector_name+'_'+HardheidK_name+'_rdc_25m.tif' : '%RSo_DataDir%/Beleid/Plancapaciteit/'+ModelParameters/Plancapaciteit_filedate+'/Plannen_'+Sector_name+'_'+HardheidK_name+'_rdc_25m.tif'"
		, StorageReadOnly = "TRUE";
		
		attribute<Bool> Per_AllocDomain (AllocDomain)
		: StorageName = "=UsePrivPlanCapaciteit ? '%PrivDataDir%/PlanCapaciteit/'+ModelParameters/Plancapaciteit_filedate+'/PrivPlannen_'+Sector_name+'_'+HardheidK_name+'_rdc_100m.tif' : '%RSo_DataDir%/Beleid/Plancapaciteit/'+ModelParameters/Plancapaciteit_filedate+'/Plannen_'+Sector_name+'_'+HardheidK_name+'_rdc_100m.tif'"
		, StorageReadOnly = "TRUE";
	}
}