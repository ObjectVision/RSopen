Template DiscreteAllocation25m_T
{
	//
	parameter<UInt32> Year;
	//
	
	attribute <Grondgebruik/CBSKlasse> Result_discrete (rdc_25m) := Allocation/LandUse_rel[invert(Input/Compacted/ADomain/org_rel)], StorageName = "='%LocalDataProjDir%/BaseData/Grondgebruik/BBG/BBG'+string(Year)+'_25m_allocation_'+/ModelParameters/StudyArea+'.tif'";
	
	container Input
	{
		unit<UInt32> AggRegio := Geography/RegioIndelingen/COROP;
		
		container Compacted
		{
			unit<UInt32> ADomain := select_with_org_rel(IsDefined(AggRegio/per_rdc_25m))
			, DialogType = "Map"
			, DialogData = "BaseGrid";
			attribute<ADomain> BaseGrid (rdc_25m) := invert(ADomain/org_rel);
			
			container Suitability :=
				for_each_nedv(
					Grondgebruik/CBSKlasse/name
					, 'value(sum_uint8(per_10m/j'+string(Year)+' == Grondgebruik/CBSKlasse/V/'+Grondgebruik/CBSKlasse/name+', rdc_10m/rdc_25m_rel), int32)[ADomain/org_rel]'
					, ADomain
					, int32
				);
				
			attribute<AggRegio> AtomicRegionMap (ADomain) := AggRegio/per_rdc_25m[ADomain/org_rel]
			{
				attribute<AggRegio> id (AggRegio) := id(AggRegio);
			}
		}
		
		container Claims
		{
			container MaxClaims := 
				for_each_nedv(
					  Grondgebruik/CBSKlasse/name
					, 'sum_uint32(per_10m/j'+string(Year)+' == Grondgebruik/CBSKlasse/V/'+Grondgebruik/CBSKlasse/name+', AggRegio/per_rdc_10m)'
					, AggRegio
					, uint32
				)
			{
				attribute<UInt32> Totaal (AggRegio) := = 'add('+asItemList(Grondgebruik/CBSKlasse/name)+')';
			}
			
			container MinClaims := 
				for_each_nedv(
					  Grondgebruik/CBSKlasse/name
					, 'const(0, AggRegio)'
					, AggRegio
					, uint32
				);
		}
	}
	
	container Allocation
	{
		unit<UInt8> Partitioning: NrOfRows = 1
		{ 
			attribute<String> name   : ['id'];
		}
		parameter<Int32> threshold := int32(0);
		
		container FeasibleSolution;
		
		container Disc_alloc := 
			discrete_alloc(
				  Grondgebruik/CBSKlasse/name							// 1 string 	attribute
				, Input/Compacted/ADomain								// 2 uint32		unit
				, Input/Compacted/Suitability							// 3 int32		container
				, const(0[Partitioning], Grondgebruik/CBSKlasse)		// 4 uint8		attribute
				, Partitioning/name										// 5 string		attribute
				, Input/AggRegio										// 6 UInt16		unit
				, Input/Compacted/AtomicRegionMap						// 7 UInt16		attribute
				, Input/Claims/MinClaims								// 8 uint32		container
				, Input/Claims/MaxClaims								// 9 uint32		container
				, threshold												// 10 int32		parameter
				, FeasibleSolution										// 11 (empty)	container
			);
		
		attribute<Grondgebruik/CBSKlasse> LandUse_rel(Input/Compacted/ADomain) := Disc_alloc/landuse;
	}
}
