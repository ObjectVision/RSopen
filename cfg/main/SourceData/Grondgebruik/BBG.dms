container BBG
{
	// unit<uint32> CBS_Publicatiebestand_NBBG2020_v1_vlp_undissolved
	// :	StorageName     = "='%RSo_DataDir%/Grondgebruik/CBS_Publicatiebestand_NBBG2020_v1_undissolved.gpkg'" 
	// ,	StorageType     = "gdal.vect"
	// ,	StorageReadOnly = "True"
	// ,	Source          = "https://geodata.cbs.nl/files/Bodemgebruik/NBBG2020/"
	// ,	DialogData      = "rdc_meter"
	// ,	SyncMode        = "AllTables"
	// {
		// attribute<Grondgebruik/CBSKlasse> CBSKlasse_rel  := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(NBBG20, Grondgebruik/CBS2010KlasseEK)];
		
		// attribute<.>                      per_10mtr (rdc_10m) := poly2grid(Geometry, rdc_10m);
		// attribute<Grondgebruik/CBSKlasse> CBSKlasse_2020_10m (rdc_10m) := CBSKlasse_rel[per_10mtr];
		// attribute<Grondgebruik/CBSKlasse> DominantCBSKlasse_25m  (rdc_25m) := ='MakeDefined(modus(CBSKlasse_2020_10m,  rdc_10m/rdc_25m_rel), 0[Grondgebruik/CBSKlasse])';
	// }
	unit<uint32> BBG_Reeks_1996_2017
	:	StorageName     = "='%RSo_DataDir%/Grondgebruik/CBS_MutatiebestandBBG1996_'+ModelParameters/BBG_Year+'_v1.gpkg'"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	,	Source          = "https://geodata.cbs.nl/files/Bodemgebruik/BBG2017/CBS_MutatiebestandBBG1996_2017_v1_GPKG.zip"
	{
		attribute<rdc_meter> Geometry (poly);
		
		attribute<Grondgebruik/CBSKlasse> CBSKlasse_rel_1996 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG96, Grondgebruik/CBS2010KlasseEK)]; //alle jaren tbv Verblijfsrec claims door trendanlayse
		attribute<Grondgebruik/CBSKlasse> CBSKlasse_rel_2000 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG00, Grondgebruik/CBS2010KlasseEK)];
		attribute<Grondgebruik/CBSKlasse> CBSKlasse_rel_2003 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG03, Grondgebruik/CBS2010KlasseEK)];
		attribute<Grondgebruik/CBSKlasse> CBSKlasse_rel_2006 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG06, Grondgebruik/CBS2010KlasseEK)];
		attribute<Grondgebruik/CBSKlasse> CBSKlasse_rel_2008 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG08, Grondgebruik/CBS2010KlasseEK)];
		attribute<Grondgebruik/CBSKlasse> CBSKlasse_rel_2010 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG10, Grondgebruik/CBS2010KlasseEK)];
		attribute<Grondgebruik/CBSKlasse> CBSKlasse_rel_2012 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG12, Grondgebruik/CBS2010KlasseEK)]; //tbv banen suitability. Want coeff berekend met 2012 bbg data
		attribute<Grondgebruik/CBSKlasse> CBSKlasse_rel_2015 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG15, Grondgebruik/CBS2010KlasseEK)];
		attribute<Grondgebruik/CBSKlasse> CBSKlasse_rel_2017 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG17, Grondgebruik/CBS2010KlasseEK)];
		
		//adhoc
		unit<uint32> Water_sub := select_with_attr_by_cond(., Grondgebruik/CBSKlasse/IsWater[CBSKlasse_rel_2017])
		{
			// attribute<wgs84_base> geometry_wgs84 (poly) := geometry[wgs84_base];
			
				// attribute<rdc_meter>               geometry_rd    (arc);
			attribute<wgs84_base>    geometry_wgs (poly)   := arcs_geodms_ordered;
			
			attribute<wgs84_base> reproject           (poly) := convert(points2sequence(dms_order_to_epsg_order/point_xy, dms_order_to_epsg_order/Sequence_rel), wgs84_base);
			attribute<wgs84_base> arcs_geodms_ordered (poly) := points2sequence(epsg_order_to_dms_order/point_yx, epsg_order_to_dms_order/Sequence_rel);
			
			unit<uint32> dms_order_to_epsg_order := sequence2points(geometry)
			{
				attribute<rdc_meter> point_xy := point(PointCol(point), PointRow(point))[rdc_meter];
			}

			unit<uint32> epsg_order_to_dms_order := sequence2points(reproject)
			{
				attribute<wgs84_base> point_yx := point(PointCol(point), PointRow(point))[wgs84_base];
			}		
		}
	}
	
	container Dominant
	{
		parameter<string> Aggregation_method := ModelParameters/landuse_aggregation_method;
		
		#include<impl.dms>
		
		attribute<Grondgebruik/CBSKlasse/gg_10k> bbg2017_10m_10k_src (rdc_10m) := Grondgebruik/CBSKlasse/gg_10k_rel[per_10m/Y2017];
		attribute<Grondgebruik/CBSKlasse/gg_10k> bbg2017_10m_10k     (rdc_10m) := !IsDefined(bbg2017_10m_10k_src) ? Grondgebruik/CBSKlasse/gg_10k/v/osa_ : bbg2017_10m_10k_src;
		attribute<Grondgebruik/CBSKlasse/gg_12k> bbg2017_10m_12k_src (rdc_10m) := Grondgebruik/CBSKlasse/gg_12k_rel[per_10m/Y2017];
		attribute<Grondgebruik/CBSKlasse/gg_12k> bbg2017_10m_12k     (rdc_10m) := !IsDefined(bbg2017_10m_12k_src) ? Grondgebruik/CBSKlasse/gg_12k/v/osa_ : bbg2017_10m_12k_src;

		attribute<BBG_Reeks_1996_2017>    CBS1996_2017_10mtr (rdc_10m) := poly2grid(BBG_Reeks_1996_2017/Geometry, rdc_10m);
		attribute<Grondgebruik/CBSKlasse> CBSKlasse_rel_2017 (rdc_10m) := BBG_Reeks_1996_2017/CBSKlasse_rel_2017[CBS1996_2017_10mtr];//, StorageName = "%LocalDataDir%/RSopen/BaseData/Grondgebruik/BBG/bbg2017_10m.tif", IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))";

		//ad hoc: transitie matrix van alle cbs klassen naar bebouwde klassen.
		container TransitieMatrix 
		{
			attribute<uint32> Y2010    (AdminDomain) := uint32(per_AdminDomain/Y2010) * 100;
			attribute<uint32> Y2017    (AdminDomain) := uint32(per_AdminDomain/Y2017);
		
			attribute<uint32> Overgang (AdminDomain) := Y2010 + Y2017;
			attribute<uq>     uq_rel   (AdminDomain) := rlookup(Overgang, uq/values);
			
			unit<uint32> uq := unique_uint32(Overgang)
			{
				attribute<uint64> count := pcount(uq_rel);
				
				attribute<uint32> y2010_v := (values - y2017_v) / 100;
				attribute<uint32> y2017_v := uint32(right(string(values), 2));
				attribute<CBSKlasse> y2010 := rlookup(uint8(y2010_v),id(CBSKlasse));
				attribute<CBSKlasse> y2017 := rlookup(uint8(y2017_v),id(CBSKlasse));
				attribute<string> y2010_str := CBSKlasse/label[y2010];
				attribute<string> y2017_str := CBSKlasse/label[y2017];
			}
		}

		container per_10m := 
			for_each_neidv(
				  Grondgebruik/ReeksJaren/naam
				, 'CBSKlasse_rel_'+Grondgebruik/ReeksJaren/jaar
				, 'not(all(IsNull(this))) && not(all(IsZero(this)))'
				, rdc_10m
				, Grondgebruik/CBSKlasse
			);
		
		container per_AdminDomain :=
			for_each_nedv(
				  Grondgebruik/ReeksJaren/naam
				, Aggregation_method == 'allocation'
					? 'per_'+AdminDomain_ref_short+'_allocation/'+Grondgebruik/ReeksJaren/naam
					: 'per_'+AdminDomain_ref_short+'_modus/'+Grondgebruik/ReeksJaren/naam
				, AdminDomain
				, Grondgebruik/CBSKlasse
			);
		
		container per_AllocDomain :=
			for_each_nedv(
				  Grondgebruik/ReeksJaren/naam
				, Aggregation_method == 'allocation'
					? 'per_'+AllocDomain_ref_short+'_allocation/'+Grondgebruik/ReeksJaren/naam
					: 'per_'+AllocDomain_ref_short+'_modus/'+Grondgebruik/ReeksJaren/naam
				, AllocDomain
				, Grondgebruik/CBSKlasse
			);
		
		container per_100m_modus_UNCHECKED :=
			for_each_ndva(
				  Grondgebruik/ReeksJaren/naam
				, rdc_100m
				, Grondgebruik/CBSKlasse
				, '%LocalDataDir%/RSopen/BaseData/Grondgebruik/BBG/bbg'+Grondgebruik/ReeksJaren/jaar+'_100m_modus.tif'
			), LazyCalculated = "true";
		
		container per_100m_modus :=
			for_each_neidv(
				  Grondgebruik/ReeksJaren/naam
				, 'per_100m_modus_UNCHECKED/'+Grondgebruik/ReeksJaren/naam
				, 'not(all(IsNull(this))) && not(all(IsZero(this)))'
				, rdc_100m
				, Grondgebruik/CBSKlasse
			);
		
		container per_25m_modus_UNCHECKED :=
			for_each_ndva(
				  Grondgebruik/ReeksJaren/naam
				, rdc_25m
				, Grondgebruik/CBSKlasse
				, '%LocalDataDir%/RSopen/BaseData/Grondgebruik/BBG/bbg'+Grondgebruik/ReeksJaren/jaar+'_25m_modus.tif'
			), LazyCalculated = "true";
		
		container per_25m_modus :=
			for_each_neidv(
				  Grondgebruik/ReeksJaren/naam
				, 'per_25m_modus_UNCHECKED/'+Grondgebruik/ReeksJaren/naam
				, 'not(all(IsNull(this))) && not(all(IsZero(this)))'
				, rdc_25m
				, Grondgebruik/CBSKlasse
			);
		
		container per_AdminDomain_perKlasse :=
			for_each_ne(
				/Classifications/Grondgebruik/ReeksJaren/naam
				, 'PerKlassePerYear_T('+quote(Classifications/Grondgebruik/ReeksJaren/naam)+',AdminDomain_ref_short)'
			);
		
		container Share_LU_type
		{
			container Y2017 := 
				for_each_neidv(
					Grondgebruik/CBSKlasse/gg_12K_wo_OSA/name
					,'(sum(bbg2017_10m_12k == ' + string(Grondgebruik/CBSKlasse/gg_12K_wo_OSA/org_rel) + '[Grondgebruik/CBSKlasse/gg_12K] ? 1f : 0f, rdc_10m/rdc_100m_rel) / 100f)'
					, 'not(all(IsNull(this))) && not(all(IsZero(this)))'
					,rdc_100m
					,float32
				);
		}
		
		Template PerKlassePerYear_T
		{
			parameter<string> year;
			parameter<string> grid_ref_short;
			unit<ipoint> domain := ='rdc_'+grid_ref_short;
			
			container PerKlasse := 
				for_each_nedv(
					Grondgebruik/CBSKlasse/name
					, 'per_'+grid_ref_short+'_'+Aggregation_method+'/'+year+' == Grondgebruik/CBSKlasse/V/'+Grondgebruik/CBSKlasse/name
					, domain
					, bool
				);
		}
		
		Template Modus100mT
		{
			//
			parameter<uint32> year;
			//
			
			attribute<Grondgebruik/CBSKlasse>   DominantCBSKlasse_100m  (rdc_100m)    := ='MakeDefined(modus(Dominant/per_10m/Y'+string(year)+',  rdc_10m/rdc_100m_rel), 0[Grondgebruik/CBSKlasse])', StorageName = "='%LocalDataDir%/RSopen/BaseData/Grondgebruik/BBG/bbg'+string(year)+'_100m_modus.tif'", IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))";
		}
		
		Template Modus25mT
		{
			//
			parameter<uint32> year;
			//
			
			attribute<Grondgebruik/CBSKlasse>   DominantCBSKlasse_25m  (rdc_25m)    := ='MakeDefined(modus(Dominant/per_10m/Y'+string(year)+',  rdc_10m/rdc_25m_rel), 0[Grondgebruik/CBSKlasse])', StorageName = "='%LocalDataDir%/RSopen/BaseData/Grondgebruik/BBG/bbg'+string(year)+'_25m_modus.tif'", IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))";
		}
		
		#include<Avg_shr_LUtype_neigh.dms>
		#include<DiscreteAllocation100m_T.dms>
		#include<DiscreteAllocation25m_T.dms>
	}
}