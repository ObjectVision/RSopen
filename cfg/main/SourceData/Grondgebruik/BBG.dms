container BBG
{
	unit<uint32> BBG_2020
	:	StorageName     = "%RSo_DataDir%/Grondgebruik/BBG/CBS_Publicatiebestand_NBBG2020_v2_vlp.gdb"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	,	Source          = "https://geoData.cbs.nl/files/Bodemgebruik/NBBG2020/ raadplegen op 13 noevmber 2024 "
						  //"conversie in ArcMap 10.8.1 mv copy features, Environment settings, Z Values Output has Z Values Disabled"
	,	Sqlstring       = "SELECT * FROM CBS_Publicatiebestand_NBBG2020_v2_vlp_undissolved"
	{
		attribute<rdc_meter> geometry (poly);
		attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
		attribute<Grondgebruik/CBS2020Klasse> CBSKlasse_rel_2020 := Classifications/Grondgebruik/CBS2020KlasseEK/CBSKlasseNr[value(NBBG20, Grondgebruik/CBS2020KlasseEK)];
	}

	unit<uint32> BBG_Reeks_1996_2017
	:	StorageName     = "='%RSo_DataDir%/Grondgebruik/BBG/CBS_MutatiebestandBBG1996_2017_v1.gpkg'"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	,	Source          = "https://geoData.cbs.nl/files/Bodemgebruik/BBG2017/CBS_MutatiebestandBBG1996_2017_v1_GPKG.zip"
	{
		attribute<rdc_meter> geometry (poly);
		attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);

		attribute<Grondgebruik/CBS2010Klasse> CBSKlasse_rel_1996 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG96, Grondgebruik/CBS2010KlasseEK)]; //alle jaren tbv Verblijfsrec claims door trendanlayse
		attribute<Grondgebruik/CBS2010Klasse> CBSKlasse_rel_2000 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG00, Grondgebruik/CBS2010KlasseEK)];
		attribute<Grondgebruik/CBS2010Klasse> CBSKlasse_rel_2003 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG03, Grondgebruik/CBS2010KlasseEK)];
		attribute<Grondgebruik/CBS2010Klasse> CBSKlasse_rel_2006 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG06, Grondgebruik/CBS2010KlasseEK)];
		attribute<Grondgebruik/CBS2010Klasse> CBSKlasse_rel_2008 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG08, Grondgebruik/CBS2010KlasseEK)];
		attribute<Grondgebruik/CBS2010Klasse> CBSKlasse_rel_2010 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG10, Grondgebruik/CBS2010KlasseEK)];
		attribute<Grondgebruik/CBS2010Klasse> CBSKlasse_rel_2012 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG12, Grondgebruik/CBS2010KlasseEK)]; //tbv banen suitability. Want coeff berekend met 2012 BBG Data
		attribute<Grondgebruik/CBS2010Klasse> CBSKlasse_rel_2015 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG15, Grondgebruik/CBS2010KlasseEK)];
		attribute<Grondgebruik/CBS2010Klasse> CBSKlasse_rel_2017 := Grondgebruik/CBS2010KlasseEK/CBSKlasseNr[value(BG17, Grondgebruik/CBS2010KlasseEK)];
	}
	
	container Dominant
	{
		parameter<string> Aggregation_method := lowercase(ModelParameters/advanced/landuse_aggregation_method);
		
		#include<Impl.dms>
		
		// attribute<Grondgebruik/CBS2010Klasse/gg_10k> BBG2017_5m_10k_src (rdc_5m) := Grondgebruik/CBS2010Klasse/gg_10k_rel[per_5m/Y2017];
		// attribute<Grondgebruik/CBS2010Klasse/gg_10k> BBG2017_5m_10k     (rdc_5m) := !IsDefined(BBG2017_5m_10k_src) ? Grondgebruik/CBS2010Klasse/gg_10k/v/osa_ : BBG2017_5m_10k_src;
		attribute<Grondgebruik/CBS2010Klasse/gg_12k> BBG2017_5m_12k_src (rdc_5m) := Grondgebruik/CBS2010Klasse/gg_12k_rel[per_5m/Y2017];
		attribute<Grondgebruik/CBS2010Klasse/gg_12k> BBG2017_5m_12k     (rdc_5m) := !IsDefined(BBG2017_5m_12k_src) ? Grondgebruik/CBS2010Klasse/gg_12k/v/osa_ : BBG2017_5m_12k_src;

		// attribute<Grondgebruik/CBS2010Klasse/gg_10k> BBG2017_10m_10k_src (rdc_10m) := Grondgebruik/CBS2010Klasse/gg_10k_rel[per_10m/Y2017];
		// attribute<Grondgebruik/CBS2010Klasse/gg_10k> BBG2017_10m_10k     (rdc_10m) := !IsDefined(BBG2017_10m_10k_src) ? Grondgebruik/CBS2010Klasse/gg_10k/v/osa_ : BBG2017_10m_10k_src;
		// attribute<Grondgebruik/CBS2010Klasse/gg_12k> BBG2017_10m_12k_src (rdc_10m) := Grondgebruik/CBS2010Klasse/gg_12k_rel[per_10m/Y2017];
		// attribute<Grondgebruik/CBS2010Klasse/gg_12k> BBG2017_10m_12k     (rdc_10m) := !IsDefined(BBG2017_10m_12k_src) ? Grondgebruik/CBS2010Klasse/gg_12k/v/osa_ : BBG2017_10m_12k_src;

		attribute<Grondgebruik/CBS2020Klasse/gg_10k> BBG2020_5m_10k_src (rdc_5m) := Grondgebruik/CBS2020Klasse/gg_10k_rel[per_5m/Y2020];
		attribute<Grondgebruik/CBS2020Klasse/gg_10k> BBG2020_5m_10k     (rdc_5m) := !IsDefined(BBG2020_5m_10k_src) ? Grondgebruik/CBS2020Klasse/gg_10k/v/osa_ : BBG2020_5m_10k_src;
		attribute<Grondgebruik/CBS2020Klasse/gg_12k> BBG2020_5m_12k_src (rdc_5m) := Grondgebruik/CBS2020Klasse/gg_12k_rel[per_5m/Y2020];
		attribute<Grondgebruik/CBS2020Klasse/gg_12k> BBG2020_5m_12k     (rdc_5m) := !IsDefined(BBG2020_5m_12k_src) ? Grondgebruik/CBS2020Klasse/gg_12k/v/osa_ : BBG2020_5m_12k_src;

		attribute<BBG_Reeks_1996_2017>            CBS1996_2017_5mtr       (rdc_5m) := poly2grid(BBG_Reeks_1996_2017/geometry, rdc_5m);
		attribute<BBG_Reeks_1996_2017>            CBS1996_2017_10mtr     (rdc_10m) := poly2grid(BBG_Reeks_1996_2017/geometry, rdc_10m);
		attribute<BBG_2020>                       CBS2020_5mtr            (rdc_5m) := poly2grid(BBG_2020/geometry, rdc_5m);
		attribute<BBG_2020>                       CBS2020_10mtr          (rdc_10m) := poly2grid(BBG_2020/geometry, rdc_10m);

		container per_5m := 
			for_each_neidv(
				  Grondgebruik/ReeksJaren/naam
				, 'BBG_Reeks_1996_2017/CBSKlasse_rel_'+Grondgebruik/ReeksJaren/jaar+'[CBS1996_2017_5mtr]'
				, 'not(all(IsNull(this))) && not(all(IsZero(this)))'
				, rdc_5m
				, Grondgebruik/CBS2010Klasse
			)
		{
			attribute<Grondgebruik/CBS2020Klasse> Y2020               (rdc_5m) := BBG_2020/CBSKlasse_rel_2020[CBS2020_5mtr];
		}
		
		container per_10m := 
			for_each_neidv(
				  Grondgebruik/ReeksJaren/naam
				, 'BBG_Reeks_1996_2017/CBSKlasse_rel_'+Grondgebruik/ReeksJaren/jaar+'[CBS1996_2017_10mtr]'
				, 'not(all(IsNull(this))) && not(all(IsZero(this)))'
				, rdc_10m
				, Grondgebruik/CBS2010Klasse
			)
		{
			attribute<Grondgebruik/CBS2020Klasse> Y2020               (rdc_10m) := BBG_2020/CBSKlasse_rel_2020[CBS2020_10mtr];
		}
		
		container Per_AdminDomain :=
			for_each_nedv(
				  Grondgebruik/ReeksJaren/naam
				, Aggregation_method == 'allocation'
					? 'per_'+AdminDomain_ref_short+'_allocation/'+Grondgebruik/ReeksJaren/naam
					: 'per_'+AdminDomain_ref_short+'_Modus/'+Grondgebruik/ReeksJaren/naam
				, AdminDomain
				, Grondgebruik/CBS2010Klasse
			)
		{
			attribute<Grondgebruik/CBS2020Klasse> Y2020               (AdminDomain) := =Aggregation_method == 'allocation'
																							? 'per_'+AdminDomain_ref_short+'_allocation/Y2020'
																							: 'per_'+AdminDomain_ref_short+'_Modus/Y2020';
		}
		
		container Per_AllocDomain :=
			for_each_nedv(
				  Grondgebruik/ReeksJaren/naam
				, Aggregation_method == 'allocation'
					? 'per_'+AllocDomain_ref_short+'_allocation/'+Grondgebruik/ReeksJaren/naam
					: 'per_'+AllocDomain_ref_short+'_Modus/'+Grondgebruik/ReeksJaren/naam
				, AllocDomain
				, Grondgebruik/CBS2010Klasse
			)
		{
			attribute<Grondgebruik/CBS2020Klasse> Y2020               (AllocDomain) := =Aggregation_method == 'allocation'
																							? 'per_'+AllocDomain_ref_short+'_allocation/Y2020'
																							: 'per_'+AllocDomain_ref_short+'_Modus/Y2020';
		}
		
		container per_100m_Modus_UNCHECKED :=
			for_each_ndva(
				  Grondgebruik/ReeksJaren/naam
				, rdc_100m
				, Grondgebruik/CBS2010Klasse
				, '%RSo_DataDir%/Grondgebruik/BBG/BBG'+Grondgebruik/ReeksJaren/jaar+'_100m_Modus.tif'
			), LazyCalculated = "TRUE", Descr = "This tif file could potentially contain only zeros or undefined values. To check for this eventuality, the container following this one checks for this."
		{
			attribute<Grondgebruik/CBS2020Klasse> Y2020               (rdc_100m) : StorageName = "%RSo_DataDir%/Grondgebruik/BBG/BBG2020_100m_Modus.tif", StorageReadOnly = "TRUE", LazyCalculated = "TRUE";
		}

		container per_100m_allocation_UNCHECKED :=
			for_each_ndva(
				  Grondgebruik/ReeksJaren/naam
				, rdc_100m
				, Grondgebruik/CBS2010Klasse
				, '%RSo_DataDir%/Grondgebruik/BBG/BBG'+Grondgebruik/ReeksJaren/jaar+'_100m_allocation.tif'
			), LazyCalculated = "TRUE", Descr = "This tif file could potentially contain only zeros or undefined values. To check for this eventuality, the container following this one checks for this."
		{
			attribute<Grondgebruik/CBS2020Klasse> Y2020               (rdc_100m) : StorageName = "%RSo_DataDir%/Grondgebruik/BBG/BBG2020_100m_Modus.tif", StorageReadOnly = "TRUE", LazyCalculated = "TRUE";
		}

		
		container per_100m_Modus :=
			for_each_neidv(
				  Grondgebruik/ReeksJaren/naam
				, 'per_100m_Modus_UNCHECKED/'+Grondgebruik/ReeksJaren/naam
				, 'not(all(IsNull(this))) && not(all(IsZero(this)))'
				, rdc_100m
				, Grondgebruik/CBS2010Klasse
			), Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit."
		{
			attribute<Grondgebruik/CBS2020Klasse> Y2020               (rdc_100m) := per_100m_Modus_UNCHECKED/Y2020, IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))", Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit.";
		}
		
		container per_25m_Modus_UNCHECKED :=
			for_each_ndva(
				  Grondgebruik/ReeksJaren/naam
				, rdc_25m
				, Grondgebruik/CBS2010Klasse
				, '%RSo_DataDir%/Grondgebruik/BBG/BBG'+Grondgebruik/ReeksJaren/jaar+'_25m_Modus.tif'
			), LazyCalculated = "TRUE", Descr = "This tif file could potentially contain only zeros or undefined values. To check for this eventuality, the container following this one checks for this."
		{
			attribute<Grondgebruik/CBS2020Klasse> Y2020               (rdc_25m) : StorageName = "%RSo_DataDir%/Grondgebruik/BBG/BBG2020_25m_Modus.tif", StorageReadOnly = "TRUE", LazyCalculated = "TRUE";
		}
		
		container per_25m_Modus :=
			for_each_neidv(
				  Grondgebruik/ReeksJaren/naam
				, 'per_25m_Modus_UNCHECKED/'+Grondgebruik/ReeksJaren/naam
				, 'not(all(IsNull(this))) && not(all(IsZero(this)))'
				, rdc_25m
				, Grondgebruik/CBS2010Klasse
			), Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit."
		{
			attribute<Grondgebruik/CBS2020Klasse> Y2020               (rdc_25m) := per_25m_Modus_UNCHECKED/Y2020, IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))", Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit.";
		}
		
		container Per_AdminDomain_perKlasse :=
			for_each_ne(
				/Classifications/Grondgebruik/ReeksJaren/naam
				, 'PerKlassePerYear_T('+quote(Classifications/Grondgebruik/ReeksJaren/naam)+',AdminDomain_ref_short)'
			)
		{
			container Y2020 := PerKlasse2020PerYear_T('Y2020',AdminDomain_ref_short);
		}
		
		container Share_LU_Type
		{
			container Y2017 := 
				for_each_neidv(
					Grondgebruik/CBS2010Klasse/gg_12K_wo_OSA/name
					,'(sum_uint16(BBG2017_5m_12k  == ' + string(Grondgebruik/CBS2010Klasse/gg_12K_wo_OSA/org_rel) + '[Grondgebruik/CBS2010Klasse/gg_12K], rdc_5m/rdc_100m_rel)[float32] / pcount(rdc_5m/rdc_100m_rel)[float32])'
					, 'not(all(IsNull(this))) && not(all(IsZero(this))) || lowercase(ModelParameters/StudyArea) != lowercase(''Nederland'')'
					,rdc_100m
					,float32
				), Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit.";
			container Y2020 := 
				for_each_neidv(
					Grondgebruik/CBS2020Klasse/gg_12K_wo_OSA/name
					,'(sum_uint16(BBG2020_5m_12k  == ' + string(Grondgebruik/CBS2020Klasse/gg_12K_wo_OSA/org_rel) + '[Grondgebruik/CBS2020Klasse/gg_12K], rdc_5m/rdc_100m_rel)[float32] / pcount(rdc_5m/rdc_100m_rel)[float32])'
					, 'not(all(IsNull(this))) && not(all(IsZero(this))) || lowercase(ModelParameters/StudyArea) != lowercase(''Nederland'')'
					,rdc_100m
					,float32
				), Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit.";
		}
		
		container IsVerblijfsRecreatieSub := 
			for_each_ne(
				Grondgebruik/ReeksJaren/naam
				, 'IsVerblijfsRecreatieSub_T('+quote(Grondgebruik/ReeksJaren/naam)+', string('+string(Grondgebruik/ReeksJaren/value)+'))'
			)
		{
			unit<uint32> union_jaren := ='union_unit('+AsItemList(Grondgebruik/ReeksJaren/naam+'/IsVerblijfsRecreatieSub')+')'
			{
				attribute<rdc_meter>    geometry (poly) := ='union_data(.,'+AsItemList(Grondgebruik/ReeksJaren/naam+'/IsVerblijfsRecreatieSub/geometry')+')';
				unit<uint32> split_union := geos_split_union_polygon(geometry)
				{
					attribute<rdc_meter> inflate (poly) := geos_buffer_multi_polygon(geometry,  100d, 16b);
				}
				unit<uint32> split_union_buffer := geos_split_union_polygon(split_union/inflate)
				{
					// attribute<.>                 per_grid                            (rdc_100m) := poly2grid(geometry, rdc_100m);
				}
				// attribute<bool>              Write_IsVerblijfsRecreatieAndHasBAGLogies (rdc_100m) := IsDefined(per_grid), StorageName = "='%SourceDataDir%/Vastgoed/IsBBGVerblijfsRecreatie_tm'+/ModelParameters/BBG_Verblijfsrecreatie_Year+'_AndHasBAGLogies_tm'+string(/ModelParameters/BAG_RecentYear)+'.tif'", StorageType = "gdalwrite.grid";
				// attribute<bool>              Read_IsVerblijfsRecreatieAndHasBAGLogies  (rdc_100m) : StorageName = "='%SourceDataDir%/Vastgoed/IsBBGVerblijfsRecreatie_tm'+/ModelParameters/BBG_Verblijfsrecreatie_Year+'_AndHasBAGLogies_tm'+string(/ModelParameters/BAG_RecentYear)+'.tif'", StorageType = "gdalwrite.grid", StorageReadOnly = "TRUE";
			}
		}
			
		Template IsVerblijfsRecreatieSub_T
		{
			parameter<string> Year_name;
			parameter<string> Year;
			
			unit<uint32> IsVerblijfsRecreatieSub := ='select_with_org_rel(BBG_Reeks_1996_2017/CBSKlasse_rel_'+Year+' == /Classifications/Grondgebruik/CBS2010Klasse/V/Verblijfsrecreatie)'
			{
				attribute<rdc_meter>  geometry (poly) := BBG_Reeks_1996_2017/geometry[org_rel];
				attribute<bool>       HasLogies       := IsDefined(rlookup(id(.), point_in_polygon(union_logies_VBOs/geometry, geometry)));
			}
		}
		
		unit<uint32> Union_logies_VBOs := ='union_unit('+AsItemList('SourceData/Vastgoed/BAG/PerJaar/'+/SourceData/Vastgoed/BAG/BAG_jaren/name+'/VBO/Per_Gebruiksdoel/logies/select')+')'
		{
			attribute<rdc_meter> geometry := ='union_data(., '+AsItemList('SourceData/Vastgoed/BAG/PerJaar/'+/SourceData/Vastgoed/BAG/BAG_jaren/name+'/VBO/Per_Gebruiksdoel/logies/select/geometry')+')';
		}
		
		Template PerKlassePerYear_T
		{
			parameter<string> Year;
			parameter<string> grid_ref_short;
			unit<ipoint> domain := ='rdc_'+grid_ref_short;
			
			container PerKlasse := 
				for_each_nedv(
					Grondgebruik/CBS2010Klasse/name
					, 'per_'+grid_ref_short+'_'+Aggregation_method+'/'+Year+' == Grondgebruik/CBS2010Klasse/V/'+Grondgebruik/CBS2010Klasse/name
					, domain
					, bool
				);
		}
		Template PerKlasse2020PerYear_T
		{
			parameter<string> Year;
			parameter<string> grid_ref_short;
			unit<ipoint> domain := ='rdc_'+grid_ref_short;
			
			container PerKlasse := 
				for_each_nedv(
					Grondgebruik/CBS2020Klasse/name
					, 'per_'+grid_ref_short+'_'+Aggregation_method+'/'+Year+' == Grondgebruik/CBS2020Klasse/V/'+Grondgebruik/CBS2020Klasse/name
					, domain
					, bool
				);
		}
		
		Template Modus100mT
		{
			//
			parameter<uint32> Year;
			//
			
			attribute<Grondgebruik/CBS2010Klasse>   DominantCBSKlasse_100m  (rdc_100m)    := ='MakeDefined(Modus(Dominant/per_5m/Y'+string(Year)+',  rdc_5m/rdc_100m_rel), 0[Grondgebruik/CBS2010Klasse])'
			, StorageName = "='%RSo_DataDir%/Grondgebruik/BBG/BBG'+string(Year)+'_100m_Modus.tif'", IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))", StorageType = "gdalwrite.grid", Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit.";
		}
		Template Modus100m_Y2020_T
		{
			//
			parameter<uint32> Year;
			//
			
			attribute<Grondgebruik/CBS2020Klasse>   DominantCBSKlasse_100m  (rdc_100m)    := ='MakeDefined(Modus(Dominant/per_5m/Y'+string(Year)+',  rdc_5m/rdc_100m_rel), 0[Grondgebruik/CBS2020Klasse])'
			, StorageName = "='%RSo_DataDir%/Grondgebruik/BBG/BBG'+string(Year)+'_100m_Modus.tif'", IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))", StorageType = "gdalwrite.grid", Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit.";
		}
		
		Template Modus25mT
		{
			//
			parameter<uint32> Year;
			//
			
			attribute<Grondgebruik/CBS2010Klasse>   DominantCBSKlasse_25m  (rdc_25m)    := ='MakeDefined(Modus(Dominant/per_5m/Y'+string(Year)+',  rdc_5m/rdc_25m_rel), 0[Grondgebruik/CBS2010Klasse])'
			, StorageName = "='%RSo_DataDir%/Grondgebruik/BBG/BBG'+string(Year)+'_25m_Modus.tif'", IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))", StorageType = "gdalwrite.grid", Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit.";
		}
		
		Template Modus25m_Y2020_T
		{
			//
			parameter<uint32> Year;
			//
			
			attribute<Grondgebruik/CBS2020Klasse>   DominantCBSKlasse_25m  (rdc_25m)    := ='MakeDefined(Modus(Dominant/per_5m/Y'+string(Year)+',  rdc_5m/rdc_25m_rel), 0[Grondgebruik/CBS2020Klasse])'
			, StorageName = "='%RSo_DataDir%/Grondgebruik/BBG/BBG'+string(Year)+'_25m_Modus.tif'", IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))", StorageType = "gdalwrite.grid", Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit.";
		}
		
		
		container Avg_shr_LUType_neigh
		{
			container Y2017 
			{
				container r1000 := 
					for_each_nedv(
						 Grondgebruik/CBS2010Klasse/gg_12K_wo_OSA/name
						,'rdc_100m/IsStudyArea ? potential(Share_LU_Type/Y2017/'+Grondgebruik/CBS2010Klasse/gg_12K_wo_OSA/name+' * float32(rdc_100m/IsStudyArea), /Geography/Distmatrices/Impl_100m/pot1000m/PotRange/neighbourhood) 
						 / potential(float32(rdc_100m/IsStudyArea), /Geography/Distmatrices/Impl_100m/pot1000m/PotRange/neighbourhood) : 0f'
						, rdc_100m
						, float32
					)
				{
					attribute<float32>   Total            (rdc_100m)    := = 'add('+asList(Grondgebruik/CBS2010Klasse/gg_12K_wo_OSA/name,',') + ')';
					attribute<float32>   diversity        (rdc_100m)    := = 'rdc_100m/IsStudyArea ? 1f - add('+asList( + 'sqr(' + Grondgebruik/CBS2010Klasse/gg_12K_wo_OSA/name + ')',',')+') : 0f';
				}
			}
			container Y2020 
			{
				container r1000 := 
					for_each_nedv(
						 Grondgebruik/CBS2020Klasse/gg_12K_wo_OSA/name
						,'rdc_100m/IsStudyArea ? potential(Share_LU_Type/Y2020/'+Grondgebruik/CBS2020Klasse/gg_12K_wo_OSA/name+' * float32(rdc_100m/IsStudyArea), /Geography/Distmatrices/Impl_100m/pot1000m/PotRange/neighbourhood) 
						 / potential(float32(rdc_100m/IsStudyArea), /Geography/Distmatrices/Impl_100m/pot1000m/PotRange/neighbourhood) : 0f'
						, rdc_100m
						, float32
					)
				{
					attribute<float32>   Total            (rdc_100m)    := = 'add('+asList(Grondgebruik/CBS2020Klasse/gg_12K_wo_OSA/name,',') + ')';
					attribute<float32>   diversity        (rdc_100m)    := = 'rdc_100m/IsStudyArea ? 1f - add('+asList( + 'sqr(' + Grondgebruik/CBS2020Klasse/gg_12K_wo_OSA/name + ')',',')+') : 0f';
				}
			}
		}
		
		#include<DiscreteAllocation100m_T.dms>
		#include<DiscreteAllocation25m_T.dms>
	}
}