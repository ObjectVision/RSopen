container Impl
{
	#include<Reistijden.dms>
	
	unit<uint32> NWB  
	:	StorageName     = "='%RSo_DataDir%/Grondgebruik/NWB/'+ModelParameters/NWB_file_date+'/wegvakken.shp'"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	{
		attribute<rdc_meter>       geometry (arc);
		attribute<string>          wegType;
	}
	
	attribute<float32> BelevingLandschap (rdc_100m) //let op dit is het orgineel 250 * 250 mtr
	:	Label       = "Belevingskaart van het Nederlandse landschap"
	,	Source      = "Y:\Data\Indibase\clo\w_nl_1\2_productie\kaart\1023_001k_clo\Data\bwmbel1km1"
					  "conversie in ArcGIS 10.3.1. naar tif-formaat met -9999 als missing value"
	,	url         = "https://www.clo.nl/indicatoren/nl1023-belevingskaart-van-het-nederlandse-landschap"
	,	StorageName = "%RSo_DataDir%/Omgeving/beleving_landschap/bwmbel1km1.tif";
	
	attribute<uint8> Kaveldichtheid_src (rdc_100m) : StorageName = "%RSo_DataDir%/Omgeving/Kaveldichtheid2018.tif";
	
	attribute<sec>    Reistijd5kInw      (rdc_100m)
	: URL          = "%RSo_DataDir%/Omgeving/Reistijd5kInw_meta.txt"
	, StorageName  = "%RSo_DataDir%/Omgeving/Reistijd5kInw.tif";
	
	attribute<bool> begrenzing_bebouwd_gebied (rdc_100m)
	:	Label       = "Grens Bebouwd Gebied 2003, orginele versie tbv monitoringsdoeleinden"
	,	Source      = "VROM Dataportaal 111011, Y:\Data\PBLbase\Data\BegrenzingBebouwdGebied.gdb\BegrBG_2003_org_VROM"
	,	url         = "%RSo_DataDir%/Beleid/Ruimte/overig/begrenzing_bebouwd_gebied_2003_vrom.xml"
	,	StorageName = "%RSo_DataDir%/Beleid/Ruimte/overig/begrenzing_bebouwd_gebied_2003_vrom.tif";
	
	attribute<float32> UAI_2021 (rdc_100m)
	:	StorageName     = "%RSo_DataDir%/Omgeving/UAI_2021.tif"
	,	StorageType     = "gdal.grid"
	,	Descr           = "https://github.com/ObjectVision/GeoDMS/wiki/Urban-Attractivity-Index"
	,	StorageReadOnly = "True";

	attribute<float32> UAI_2018 (rdc_100m)
	:	StorageName     = "%RSo_DataDir%/Omgeving/UAI_2018.tif"
	,	StorageType     = "gdal.grid"
	,	Descr           = "https://github.com/ObjectVision/GeoDMS/wiki/Urban-Attractivity-Index"
	,	StorageReadOnly = "True";
	
	attribute<Eur_m2> Hedonic_landPrice_2007_src (rdc_100m)
	:	StorageName     = "%RSo_DataDir%/Omgeving/Hedonic_landPrice_2007.tif"
	, 	Descr           = "De hedonische landprijzen uit Stad en Land van Henri de Groot geplot per pc4 en vergrid door Jip Claassens"
	, 	URL             = "https://www.cpb.nl/sites/default/files/publicaties/download/bijz89.pdf"
	,	StorageType     = "gdal.grid"
	,	StorageReadOnly = "True";
	
	attribute<Eur_m2> Hedonic_landPrice_2007 (rdc_100m) := Hedonic_landPrice_2007_src + 1[Eur_m2]; //+1 om een juiste log transformatie uit te kunnen voeren.
	
	unit<uint32> EHS_1990_src
	:  StorageName = "%RSo_DataDir%/Omgeving/EHS1990.shp"
	,  StorageType = "gdal.vect"
	,	Descr           = "Bron onbekend"
	,	StorageReadOnly = "True"
	{
		attribute<rdc_meter>  geometry (poly);
		attribute<.> Per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<.> Per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		
		container DistanceTo
		{
			unit<uint32> segments := arc2segm(../geometry);
			unit<uint32> pointset := dyna_point(segments/point, segments/nextpoint, value(AllocDomain/gridsize, meter_f64)), DialogType = "Map", DialogData = "point"
			{
				attribute<AllocDomain> AllocDomain_rel := point[AllocDomain];
			}
			attribute<meter> DistTo    (AllocDomain) := GridDist(resistance, pointset/AllocDomain_rel, const(0, pointset, meter));
			attribute<km>    DistTo_km (AllocDomain) := IsDefined(Per_AllocDomain) ? 0[km] : convert(DistTo, km);
			attribute<meter> resistance(AllocDomain) := const(AllocDomain/gridsize, AllocDomain, meter);
		}
	}
	
	unit<uint32> Natura2000_v2020
	: URL             = "http://geoData.nationaalgeoregister.nl/natura2000/atom/natura2000.xml"
	, Source          = "laag PS_Natura2000_as_is --> reproject"
	, StorageName     = "%RSo_DataDir%/Beleid/EU/Natura2000_20200524_RD_reproject.gdb"
	, StorageType     = "gdal.vect"
	, StorageReadOnly = "True"
	{
		attribute<rdc_meter> geometry (poly);
		attribute<bool>      IsLargeWaterBody := NAAM_N2K == 'IJsselmeer' 
													|| NAAM_N2K == 'Markermeer & IJmeer' 
													|| NAAM_N2K == 'Friese Front' 
													|| NAAM_N2K == 'Waddenzee' 
													|| NAAM_N2K == 'Voordelta' 
													|| NAAM_N2K == 'Vlakte van de Raan' 
													|| NAAM_N2K == 'Westerschelde & Saeftinghe' 
													|| NAAM_N2K == 'Oosterschelde' 
													|| NAAM_N2K == 'Grevelingen' 
													|| NAAM_N2K == 'Haringvliet' 
													|| NAAM_N2K == 'Noordzeekustzone'
													|| NAAM_N2K == 'Klaverbank'
													|| NAAM_N2K == 'Veluwerandmeren'
													|| NAAM_N2K == 'Klaverbank'
													|| NAAM_N2K == 'Zwarte Meer'
													|| NAAM_N2K == 'Hollands Diep'
													|| NAAM_N2K == 'Krammer-Volkerak'
													|| NAAM_N2K == 'Eemmeer & Gooimeer Zuidoever'
													|| NAAM_N2K == 'Ketelmeer & Vossemeer'
													|| NAAM_N2K == 'Doggersbank' ;
		
		unit<uint32> Subset := select_with_attr_by_cond(., NOT(IsLargeWaterBody))
		{
			unit<uint32> split := geos_split_union_polygon(geometry)
			{
				attribute<rdc_meter> geometry_outer (poly) := bg_outer_multi_polygon(geometry);
			}
			attribute<.> Per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.> Per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			
			container DistanceTo
			{
				unit<uint32> segments := arc2segm(../split/geometry_outer)
				{
					// For visualisation
					attribute<rdc_meter>                  geometry (arc)                 := points2sequence(PointSet/Point, PointSet/SeqNr, PointSet/Ordinal);
					unit<uint32> PointSet := union_unit(.,.)
					{
						attribute<rdc_meter>                   Point   := Union_Data(., ../Point, ../NextPoint);
						attribute<..>                          SeqNr   := value(id(.) % nrofrows(..), ..);
						attribute<uint32>                      Ordinal := id(.) / nrofrows(..);
					}
				}
				unit<uint32> pointset := dyna_point(segments/point, segments/nextpoint, value(AllocDomain/gridsize, meter_f64)), DialogType = "Map", DialogData = "point"
				{
					attribute<AllocDomain> Per_AllocDomain := point[AllocDomain];
					attribute<AdminDomain> Per_AdminDomain := point[AdminDomain];
				}
				attribute<meter> resistance_AllocDomain       (AllocDomain) := const(AllocDomain/gridsize, AllocDomain, meter);
				attribute<meter> resistance_AdminDomain       (AdminDomain) := const(AdminDomain/gridsize, AdminDomain, meter);
				attribute<meter> DistTo_AllocDomain           (AllocDomain) := GridDist(resistance_AllocDomain, pointset/Per_AllocDomain, const(0, pointset, meter));
				attribute<meter> DistTo_AdminDomain           (AdminDomain) := GridDist(resistance_AdminDomain, pointset/Per_AdminDomain, const(0, pointset, meter));
				attribute<km>    Write_DistTo_km_AllocDomain  (AllocDomain) := IsDefined(Per_AllocDomain) ? 0[km] : convert(DistTo_AllocDomain, km), StorageName = "%RSo_DataDir%/Beleid/EU/DistTo_Natura2000_2020_km_100m.tif", StorageType = "gdalwrite.grid";
				attribute<km>    Write_DistTo_km_AdminDomain  (AdminDomain) := IsDefined(Per_AdminDomain) ? 0[km] : convert(DistTo_AdminDomain, km), StorageName = "%RSo_DataDir%/Beleid/EU/DistTo_Natura2000_2020_km_25m.tif", StorageType = "gdalwrite.grid";
				attribute<km>    DistTo_km_AllocDomain        (AllocDomain) : StorageName = "%RSo_DataDir%/Beleid/EU/DistTo_Natura2000_2020_km_100m.tif", StorageType = "gdal.grid", StorageReadOnly = "true";
				attribute<km>    DistTo_km_AdminDomain        (AdminDomain) : StorageName = "%RSo_DataDir%/Beleid/EU/DistTo_Natura2000_2020_km_25m.tif", StorageType = "gdal.grid", StorageReadOnly = "true";
			}
		}
	}
	
	unit<uint32> Natura2000_BirdHabitat := select_with_attr_by_cond(Natura2000_v2020, Natura2000_v2020/BESCHERMIN == 'VR' || Natura2000_v2020/BESCHERMIN == 'VR+HR' )
	{
		attribute<bool> IsBirdHabitatarea (AllocDomain) := IsDefined(poly2grid(geometry, AllocDomain));
	}
	
	attribute<bool> BBG_groen_buff (rdc_10m) := ='potential((Classifications/Grondgebruik/CBSKlasse/IsGroen_breed[SourceData/Grondgebruik/BBG/dominant/per_10m/Y'+/ModelParameters/BBG_Year+'])[float32], Geography/Distmatrices/Impl_10m/pot100m/PotRange/binair)[bool]';
	
	container GWV
	{
		unit<uint32> src 
		:	StorageType     = "gdal.vect" 
		,	StorageReadOnly = "True"
		,	url             = "https://geoservices.rijkswaterstaat.nl/apps/geonetwork/srv/dut/catalog.search#/metaData/gwvbb9ff-9994-4784-a769-92598d071400"
		, 	StorageName     = "%RSo_DataDir%/Omgeving/Geluid/GWV_2020/02_Shape_segment/GWV_2020_buffer_FULL_FLAT_PLANAR_NONE.shp"  
		{
			attribute<rdc_meter>  geometry (poly);
		}
		
		unit<uint32> selection := select_with_org_rel(src/extra_info == 'Geen')
		,  DialogType = "Map"
		,  DialogData = "geometry"
		{
			attribute<rdc_meter> geometry (poly) := src/geometry[org_rel];
			attribute<string> Type := src/Type[org_rel];
		}
	}
}