container Impl
: Descr = "Diverse omgevingskenmerken zoals afstand tot Natura2000, belevingskaart landschap, UAI, hedonic land price, reistijd tot 5k inwoners en GWV. Tevens de wegvakken uit het NWB en de BBG groen buffer.";
{
	#include<Reistijden.dms>
	
	unit<UInt32> NWB  
	:	StorageName     = "='%RSo_DataDir%/Grondgebruik/NWB/'+ModelParameters/NWB_file_date+'/wegvakken.shp'"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	,	Descr           = "Nationaal Wegen Bestand wegvakken"
	{
		attribute<rdc_meter>       geometry (arc);
		attribute<String>          wegType;
	}
	
	attribute<Float32> BelevingLandschap (rdc_100m) //let op dit is het orgineel 250 * 250 mtr
	:	Label       = "Belevingskaart van het Nederlandse landschap"
	,	Source      = "Y:\Data\Indibase\clo\w_nl_1\2_productie\kaart\1023_001k_clo\Data\bwmbel1km1"
					  "conversie in ArcGIS 10.3.1. naar tif-formaat met -9999 als missing value"
	,	url         = "https://www.clo.nl/indicatoren/nl1023-belevingskaart-van-het-nederlandse-landschap"
	,	Descr       = "De belevingskaart van het Nederlandse landschap is een kaart die de belevingswaarde van het landschap in Nederland weergeeft. De kaart is gebaseerd op een model dat verschillende landschapskenmerken combineert, zoals natuurwaarden, cultuurhistorie, recreatieve waarde en landschappelijke kwaliteit. Elke locatie in Nederland krijgt een score die de belevingswaarde van het landschap op die plek aangeeft. Hogere scores duiden op een hogere belevingswaarde."
	,	StorageName = "%RSo_DataDir%/Omgeving/beleving_landschap/bwmbel1km1.tif";
	
	attribute<UInt8> Kaveldichtheid_src (rdc_100m) : StorageName = "%RSo_DataDir%/Omgeving/Kaveldichtheid2018.tif", Descr = "Aantal kavels per hectare in de buurt (1km) van de cel", StorageType = "gdal.grid", StorageReadOnly = "True";
	
	attribute<sec>    Reistijd5kInw      (rdc_100m)
	: URL          = "%RSo_DataDir%/Omgeving/Reistijd5kInw_meta.txt"
	, StorageName  = "%RSo_DataDir%/Omgeving/Reistijd5kInw.tif"
	, Descr        = "Reistijd in seconden naar 5.000 inwoners"
	
	attribute<Bool> begrenzing_bebouwd_gebied (rdc_100m)
	:	Label       = "Grens Bebouwd Gebied 2003, orginele versie tbv monitoringsdoeleinden"
	,	Source      = "VROM Dataportaal 111011, Y:\Data\PBLbase\Data\BegrenzingBebouwdGebied.gdb\BegrBG_2003_org_VROM"
	,	url         = "%RSo_DataDir%/Beleid/Ruimte/overig/begrenzing_bebouwd_gebied_2003_vrom.xml"
	,	StorageName = "%RSo_DataDir%/Beleid/Ruimte/overig/begrenzing_bebouwd_gebied_2003_vrom.tif"
	,	Descr       = "Grens van het bebouwd gebied in 2003, zoals vastgesteld door het Ministerie van VROM. Deze grens wordt gebruikt voor monitoringsdoeleinden en kan afwijken van de actuele grens van het bebouwd gebied."
	
	attribute<Float32> UAI_2021 (rdc_100m)
	:	StorageName     = "%RSo_DataDir%/Omgeving/UAI_2021.tif"
	,	StorageType     = "gdal.grid"
	,	Descr           = "https://github.com/ObjectVision/GeoDMS/wiki/Urban-Attractivity-Index"
	,	StorageReadOnly = "True"
	,	Descr           = "Urban Attractivity Index (UAI) is een samengestelde index die de aantrekkelijkheid van stedelijke gebieden meet op basis van verschillende factoren zoals bereikbaarheid, voorzieningen, leefomgeving en economische activiteit. De UAI wordt gebruikt om inzicht te krijgen in de kwaliteit en aantrekkelijkheid van stedelijke gebieden voor bewoners, bedrijven en bezoekers. Hogere UAI-waarden duiden op een hogere aantrekkelijkheid van het gebied."

	attribute<Float32> UAI_2018 (rdc_100m)
	:	StorageName     = "%RSo_DataDir%/Omgeving/UAI_2018.tif"
	,	StorageType     = "gdal.grid"
	,	Descr           = "https://github.com/ObjectVision/GeoDMS/wiki/Urban-Attractivity-Index"
	,	StorageReadOnly = "True"
	,	Descr 		 = "Urban Attractivity Index (UAI) is een samengestelde index die de aantrekkelijkheid van stedelijke gebieden meet op basis van verschillende factoren zoals bereikbaarheid, voorzieningen, leefomgeving en economische activiteit. De UAI wordt gebruikt om inzicht te krijgen in de kwaliteit en aantrekkelijkheid van stedelijke gebieden voor bewoners, bedrijven en bezoekers. Hogere UAI-waarden duiden op een hogere aantrekkelijkheid van het gebied."
	
	attribute<Eur_m2> Hedonic_landPrice_2007_src (rdc_100m)
	:	StorageName     = "%RSo_DataDir%/Omgeving/Hedonic_landPrice_2007.tif"
	, 	Descr           = "De hedonische landprijzen uit Stad en Land van Henri de Groot geplot per pc4 en vergrid door Jip Claassens"
	, 	URL             = "https://www.cpb.nl/sites/default/files/publicaties/download/bijz89.pdf"
	,	StorageType     = "gdal.grid"
	,	StorageReadOnly = "True"
	,	Descr           = "Hedonische landprijs is een economische maatstaf die de residuele waarde van land meet.";
	
	attribute<Eur_m2> Hedonic_landPrice_2007 (rdc_100m) := Hedonic_landPrice_2007_src + 1[Eur_m2]; //+1 om een juiste log transformatie uit te kunnen voeren.
	
	unit<UInt32> EHS_1990_src
	:  StorageName = "%RSo_DataDir%/Omgeving/EHS1990.shp"
	,  StorageType = "gdal.vect"
	,	Descr           = "Ecologische Hoofdstructuur (EHS) is een netwerk van natuurgebieden in Nederland dat bedoeld is om de biodiversiteit te behouden en te versterken. De EHS bestaat uit kerngebieden, verbindingszones en ontwikkelingsgebieden die samen een aaneengesloten netwerk vormen voor flora en fauna."
	,	StorageReadOnly = "True"
	{
		attribute<rdc_meter>  geometry (poly);
		attribute<.> Per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<.> Per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		
		container DistanceTo
		: Descr = "Afstand tot de EHS in 1990"
		{
			unit<UInt32> segments := arc2segm(../geometry);
			unit<UInt32> pointset := dyna_point(segments/point, segments/nextpoint, value(AllocDomain/gridsize, meter_f64)), DialogType = "Map", DialogData = "point"
			{
				attribute<AllocDomain> AllocDomain_rel := point[AllocDomain];
			}
			attribute<meter> DistTo    (AllocDomain) := GridDist(resistance, pointset/AllocDomain_rel, const(0, pointset, meter));
			attribute<km>    DistTo_km (AllocDomain) := IsDefined(Per_AllocDomain) ? 0[km] : convert(DistTo, km);
			attribute<meter> resistance(AllocDomain) := const(AllocDomain/gridsize, AllocDomain, meter);
		}
	}
	
	unit<UInt32> Natura2000_v2020
	: URL             = "http://geoData.nationaalgeoregister.nl/natura2000/atom/natura2000.xml"
	, Source          = "laag PS_Natura2000_as_is --> reproject"
	, StorageName     = "%RSo_DataDir%/Beleid/EU/Natura2000_20200524_RD_reproject.gdb"
	, StorageType     = "gdal.vect"
	, StorageReadOnly = "True"
	, Descr 		= "Natura 2000 is een Europees netwerk van beschermde natuurgebieden dat is opgezet om de biodiversiteit te behouden en te versterken. Het netwerk bestaat uit speciale beschermingszones (SBZ) voor vogels en speciale gebieden voor de bescherming van habitats en soorten (SGS). Natura 2000-gebieden worden beheerd volgens specifieke richtlijnen om de ecologische waarden te waarborgen en duurzame ontwikkeling te bevorderen."
	{
		attribute<rdc_meter> geometry (poly);
		attribute<Bool>      IsLargeWaterBody := NAAM_N2K == 'IJsselmeer' 
													|| NAAM_N2K == 'Markermeer & IJmeer' 
													|| NAAM_N2K == 'Friese Front' 
													|| NAAM_N2K == 'Waddenzee' 
													|| NAAM_N2K == 'Voordelta' 
													|| NAAM_N2K == 'Vlakte van de Raan' 
													|| NAAM_N2K == 'Westerschelde & Saeftinghe' 
													|| NAAM_N2K == 'Oosterschelde' 
													|| NAAM_N2K == 'Grevelingen' 
													|| NAAM_N2K == 'Haringvliet' 
													|| NAAM_N2K == 'Noordzeekustzone'
													|| NAAM_N2K == 'Klaverbank'
													|| NAAM_N2K == 'Veluwerandmeren'
													|| NAAM_N2K == 'Klaverbank'
													|| NAAM_N2K == 'Zwarte Meer'
													|| NAAM_N2K == 'Hollands Diep'
													|| NAAM_N2K == 'Krammer-Volkerak'
													|| NAAM_N2K == 'Eemmeer & Gooimeer Zuidoever'
													|| NAAM_N2K == 'Ketelmeer & Vossemeer'
													|| NAAM_N2K == 'Doggersbank' ;
		
		unit<UInt32> Subset := select_with_attr_by_cond(., NOT(IsLargeWaterBody))
		{
			unit<UInt32> split := geos_split_union_polygon(geometry)
			{
				attribute<rdc_meter> geometry_outer (poly) := bg_outer_multi_polygon(geometry);
			}
			attribute<.> Per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.> Per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			
			container DistanceTo
			{
				unit<UInt32> segments := arc2segm(../split/geometry_outer)
				{
					// For visualisation
					attribute<rdc_meter>                  geometry (arc)                 := points2sequence(PointSet/Point, PointSet/SeqNr, PointSet/Ordinal);
					unit<UInt32> PointSet := union_unit(.,.)
					{
						attribute<rdc_meter>                   Point   := Union_Data(., ../Point, ../NextPoint);
						attribute<..>                          SeqNr   := value(id(.) % NrOfRows(..), ..);
						attribute<UInt32>                      Ordinal := id(.) / NrOfRows(..);
					}
				}
				unit<UInt32> pointset := dyna_point(segments/point, segments/nextpoint, value(AllocDomain/gridsize, meter_f64)), DialogType = "Map", DialogData = "point"
				{
					attribute<AllocDomain> Per_AllocDomain := point[AllocDomain];
					attribute<AdminDomain> Per_AdminDomain := point[AdminDomain];
				}
				attribute<meter> resistance_AllocDomain       (AllocDomain) := const(AllocDomain/gridsize, AllocDomain, meter);
				attribute<meter> resistance_AdminDomain       (AdminDomain) := const(AdminDomain/gridsize, AdminDomain, meter);
				attribute<meter> DistTo_AllocDomain           (AllocDomain) := GridDist(resistance_AllocDomain, pointset/Per_AllocDomain, const(0, pointset, meter)), Descr = "Afstand tot het dichtstbijzijnde Natura2000 gebied in meters, op AllocDomain";
				attribute<meter> DistTo_AdminDomain           (AdminDomain) := GridDist(resistance_AdminDomain, pointset/Per_AdminDomain, const(0, pointset, meter)), Descr = "Afstand tot het dichtstbijzijnde Natura2000 gebied in meters, op AdminDomain";
				attribute<km>    Write_DistTo_km_AllocDomain  (AllocDomain) := IsDefined(Per_AllocDomain) ? 0[km] : convert(DistTo_AllocDomain, km), StorageName = "%RSo_DataDir%/Beleid/EU/DistTo_Natura2000_2020_km_100m.tif", StorageType = "gdalwrite.grid";
				attribute<km>    Write_DistTo_km_AdminDomain  (AdminDomain) := IsDefined(Per_AdminDomain) ? 0[km] : convert(DistTo_AdminDomain, km), StorageName = "%RSo_DataDir%/Beleid/EU/DistTo_Natura2000_2020_km_25m.tif", StorageType = "gdalwrite.grid";
				attribute<km>    DistTo_km_AllocDomain        (AllocDomain) : StorageName = "%RSo_DataDir%/Beleid/EU/DistTo_Natura2000_2020_km_100m.tif", StorageType = "gdal.grid", StorageReadOnly = "true";
				attribute<km>    DistTo_km_AdminDomain        (AdminDomain) : StorageName = "%RSo_DataDir%/Beleid/EU/DistTo_Natura2000_2020_km_25m.tif", StorageType = "gdal.grid", StorageReadOnly = "true";
			}
		}
	}
	
	unit<UInt32> Natura2000_BirdHabitat := select_with_attr_by_cond(Natura2000_v2020, Natura2000_v2020/BESCHERMIN == 'VR' || Natura2000_v2020/BESCHERMIN == 'VR+HR' )
	, Descr = "Subset van Natura2000 gebieden die als vogelrichtlijngebied zijn aangewezen."
	{
		attribute<Bool> IsBirdHabitatarea (AllocDomain) := IsDefined(poly2grid(geometry, AllocDomain));
	}
	
	attribute<Bool> BBG_groen_buff (rdc_10m) := ='potential((Classifications/Grondgebruik/CBSKlasse/IsGroen_breed[SourceData/Grondgebruik/BBG/dominant/per_10m/Y'+/ModelParameters/BBG_Year+'])[float32], Geography/Distmatrices/Impl_10m/pot100m/PotRange/binair)[bool]', Descr = "Buffer van 100m rond alle groenbestemmingen in de BBG, inclusief parken, begraafplaatsen, sportvelden en volkstuinen. Gebaseerd op de BBG 2020.";
	
	container GWV
	: Descr = "Geluidwerende voorzieningen (GWV) 2020, volledige set met alle typen voorzieningen, inclusief buffers rondom wegen en spoorwegen."
	{
		unit<UInt32> src 
		:	StorageType     = "gdal.vect" 
		,	StorageReadOnly = "True"
		,	url             = "https://geoservices.rijkswaterstaat.nl/apps/geonetwork/srv/dut/catalog.search#/metaData/gwvbb9ff-9994-4784-a769-92598d071400"
		, 	StorageName     = "%RSo_DataDir%/Omgeving/Geluid/GWV_2020/02_Shape_segment/GWV_2020_buffer_FULL_FLAT_PLANAR_NONE.shp"  
		{
			attribute<rdc_meter>  geometry (poly);
		}
		
		unit<UInt32> selection := select_with_org_rel(lowercase(src/extra_info) == lowercase('Geen'))
		,  DialogType = "Map"
		,  DialogData = "geometry"
		{
			attribute<rdc_meter> geometry (poly) := src/geometry[org_rel];
			attribute<String> Type := src/Type[org_rel];
		}
	}
}