container Impl
{
	#include<Reistijden.dms>
	
	unit<uint32> NWB  
	:	StorageName     = "='%RSo_DataDir%/Grondgebruik/NWB/'+ModelParameters/NWB_file_date+'/wegvakken.shp'"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	{
		attribute<rdc_meter>       geometry (arc);
		attribute<string>          wegtype;
	}
	
	attribute<Float32> BelevingLandschap (rdc_100m) //let op dit is het orgineel 250 * 250 mtr
	:	Label       = "Belevingskaart van het Nederlandse landschap"
	,	Source      = "Y:\data\Indibase\clo\w_nl_1\2_productie\kaart\1023_001k_clo\data\bwmbel1km1"
					  "conversie in ArcGIS 10.3.1. naar tif-formaat met -9999 als missing value"
	,	url         = "https://www.clo.nl/indicatoren/nl1023-belevingskaart-van-het-nederlandse-landschap"
	,	StorageName = "%RSo_DataDir%/Omgeving/beleving_landschap/bwmbel1km1.tif";
	
	attribute<uint8> Kaveldichtheid_src (rdc_100m) : StorageName = "%RSo_DataDir%/Omgeving/Kaveldichtheid2018.tif";
	
	attribute<sec>    Reistijd5kInw      (rdc_100m)
	: url          = "%RSo_DataDir%/Omgeving/Reistijd5kInw_meta.txt"
	, StorageName  = "%RSo_DataDir%/Omgeving/Reistijd5kInw.tif";
	
	attribute<bool> begrenzing_bebouwd_gebied (rdc_100m)
	:	Label       = "Grens Bebouwd Gebied 2003, orginele versie tbv monitoringsdoeleinden"
	,	Source      = "VROM dataportaal 111011, Y:\data\PBLbase\Data\BegrenzingBebouwdGebied.gdb\BegrBG_2003_org_VROM"
	,	url         = "%RSo_DataDir%/Beleid/Ruimte/overig/begrenzing_bebouwd_gebied_2003_vrom.xml"
	,	StorageName = "%RSo_DataDir%/Beleid/Ruimte/overig/begrenzing_bebouwd_gebied_2003_vrom.tif";
	
	// attribute<float32> UAI_2002_src (rdc_100m)
	// :	StorageName     = "%RSo_DataDir%/Omgeving/UAI_2002.tif"
	// ,	StorageType     = "gdal.grid"
	// ,	Descr           = "The Urban Attractivity Index describes the presence of four types of urban amenities: historic buildings and monuments; cultural facilities; shops; hotels, restaurants and other catering establishments. The numbers of units per amenity type are counted per 500 m grid cell, rescaled to a maximum value of 0.25 per type, added up and averagedout over a 2.5 km radius (Broitman and Koomen, 2015)."
	// ,	URL             = "https://research.vu.nl/en/datasets/urban-attractivity-index-of-the-netherlands-in-2002"
	// ,	StorageReadOnly = "True";
	
	// attribute<float32> UAI_2002 (rdc_100m) := UAI_2002_src / 100f; //deling om fractie te krijgen.
	
	attribute<float32> UAI_2021 (rdc_100m)
	:	StorageName     = "%RSo_DataDir%/Omgeving/UAI_2021.tif"
	,	StorageType     = "gdal.grid"
	,	Descr           = "https://github.com/ObjectVision/GeoDMS/wiki/Urban-Attractivity-Index"
	,	StorageReadOnly = "True";

	attribute<float32> UAI_2018 (rdc_100m)
	:	StorageName     = "%RSo_DataDir%/Omgeving/UAI_2018.tif"
	,	StorageType     = "gdal.grid"
	,	Descr           = "https://github.com/ObjectVision/GeoDMS/wiki/Urban-Attractivity-Index"
	,	StorageReadOnly = "True";
	
	attribute<eur_m2> Hedonic_landprice_2007_src (rdc_100m)
	:	StorageName     = "%RSo_DataDir%/Omgeving/Hedonic_landprice_2007.tif"
	, 	Descr           = "De hedonische landprijzen uit Stad en Land van Henri de Groot geplot per pc4 en vergrid door Jip Claassens"
	, 	URL             = "https://www.cpb.nl/sites/default/files/publicaties/download/bijz89.pdf"
	,	StorageType     = "gdal.grid"
	,	StorageReadOnly = "True";
	
	attribute<eur_m2> Hedonic_landprice_2007 (rdc_100m) := Hedonic_landprice_2007_src + 1[eur_m2]; //+1 om een juiste log transformatie uit te kunnen voeren.
	
	// attribute<uint32> Vinex_src (rdc_100m)
	// :	StorageName     = "%RSo_DataDir%/Omgeving/VinexPlans.tif"
	// ,	Descr           = "Bron onbekend"
	// ,	StorageType     = "gdal.grid"
	// ,	StorageReadOnly = "True";
	
	// attribute<uint32> Natura2000_src (rdc_100m)
	// :	StorageName     = "%RSo_DataDir%/Omgeving/IsNatura2000.tif"
	// ,	StorageType     = "gdal.grid"
	// ,	Descr           = "Bron onbekend"
	// ,	StorageReadOnly = "True";
	
	// attribute<uint32> Bundelingsgebieden_src (rdc_100m)
	// :	StorageName     = "%RSo_DataDir%/Omgeving/nationaal_bundelingsgebied_def_juni09.tif"
	// ,	StorageType     = "gdal.grid"
	// ,	Descr           = "Bron onbekend"
	// ,	StorageReadOnly = "True";
	
	// unit<uint32> Bufferzones_2005_src
	// :  StorageName = "%RSo_DataDir%/Omgeving/bufferzones_2005.shp"
	// ,  StorageType = "gdal.vect"
	// ,	Descr           = "Bron onbekend"
	// ,	StorageReadOnly = "True"
	// {
		// attribute<rdc_meter> geometry (poly);
		// attribute<.> per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		// attribute<.> per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
	// }
	
	unit<uint32> EHS_1990_src
	:  StorageName = "%RSo_DataDir%/Omgeving/EHS1990.shp"
	,  StorageType = "gdal.vect"
	,	Descr           = "Bron onbekend"
	,	StorageReadOnly = "True"
	{
		attribute<rdc_meter>  geometry (poly);
		attribute<.> per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<.> per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		
		container DistanceTo
		{
			unit<uint32> segments := arc2segm(../geometry);
			unit<uint32> pointset := dyna_point(segments/point, segments/nextpoint, value(AllocDomain/gridsize, meter)), DialogType = "Map", DialogData = "point"
			{
				attribute<AllocDomain> AllocDomain_rel := point[AllocDomain];
			}
			attribute<meter> DistTo    (AllocDomain) := GridDist(resistance, pointset/AllocDomain_rel, const(0, pointset, meter));
			attribute<km>    DistTo_km (AllocDomain) := IsDefined(per_AllocDomain) ? 0[km] : convert(DistTo, km);
			attribute<meter> resistance(AllocDomain) := const(AllocDomain/gridsize, AllocDomain, meter);
		}
	}
	
	unit<uint32> Natura2000_v2020
	: url             = "http://geodata.nationaalgeoregister.nl/natura2000/atom/natura2000.xml"
	, Source          = "laag PS_Natura2000_as_is --> reproject"
	, StorageName     = "%RSo_DataDir%/Beleid/EU/Natura2000_20200524_RD_reproject.gdb"
	, StorageType     = "gdal.vect"
	, StorageReadOnly = "True"
	{
		attribute<rdc_meter> geometry (poly);
		attribute<.> per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<.> per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		
		container DistanceTo
		{
			unit<uint32> segments := arc2segm(../geometry);
			unit<uint32> pointset := dyna_point(segments/point, segments/nextpoint, value(AllocDomain/gridsize, meter)), DialogType = "Map", DialogData = "point"
			{
				attribute<AllocDomain> per_AllocDomain := point[AllocDomain];
				attribute<AdminDomain> per_AdminDomain := point[AdminDomain];
			}
			attribute<meter> resistance_AllocDomain (AllocDomain) := const(AllocDomain/gridsize, AllocDomain, meter);
			attribute<meter> resistance_AdminDomain (AdminDomain) := const(AdminDomain/gridsize, AdminDomain, meter);
			attribute<meter> DistTo_AllocDomain     (AllocDomain) := GridDist(resistance_AllocDomain, pointset/per_AllocDomain, const(0, pointset, meter));
			attribute<meter> DistTo_AdminDomain     (AdminDomain) := GridDist(resistance_AdminDomain, pointset/per_AdminDomain, const(0, pointset, meter));
			attribute<km> DistTo_km_AllocDomain     (AllocDomain) := IsDefined(per_AllocDomain) ? 0[km] : convert(DistTo_AllocDomain, km);
			attribute<km> DistTo_km_AdminDomain     (AdminDomain) := IsDefined(per_AdminDomain) ? 0[km] : convert(DistTo_AdminDomain, km);
		}
	}
	
	unit<uint32> Natura2000_BirdHabitat := select_with_attr_by_cond(Natura2000_v2020, Natura2000_v2020/BESCHERMIN == 'VR' || Natura2000_v2020/BESCHERMIN == 'VR+HR' )
	{
		attribute<bool> IsBirdHabitatArea (AllocDomain) := IsDefined(poly2grid(geometry, AllocDomain));
	}
	
	
	// unit<uint32> GroeneHart_2004_src
	// :  StorageName = "%RSo_DataDir%/Omgeving/Gh_2004.shp"
	// ,  StorageType = "gdal.vect"
	// ,	Descr           = "Bron onbekend"
	// ,	StorageReadOnly = "True"
	// {
		// attribute<rdc_meter>  geometry (poly);
		// attribute<.> per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		// attribute<.> per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		
		// container DistanceTo
		// {
			// unit<uint32> segments := arc2segm(../geometry);
			
			// unit<uint32> pointset := dyna_point(segments/point, segments/nextpoint, value(AllocDomain/gridsize, meter)), DialogType = "Map", DialogData = "point"
			// {
				// attribute<AllocDomain> per_AllocDomain := point[AllocDomain];
				// attribute<AdminDomain> per_AdminDomain := point[AdminDomain];
			// }
			
			// attribute<meter> resistance_AllocDomain (AllocDomain) := const(AllocDomain/gridsize, AllocDomain, meter);
			// attribute<meter> resistance_AdminDomain (AdminDomain) := const(AdminDomain/gridsize, AdminDomain, meter);
			// attribute<meter> DistTo_AllocDomain     (AllocDomain) := GridDist(resistance_AllocDomain, pointset/per_AllocDomain, const(0, pointset, meter));
			// attribute<meter> DistTo_AdminDomain     (AdminDomain) := GridDist(resistance_AdminDomain, pointset/per_AdminDomain, const(0, pointset, meter));
			
			// attribute<km> DistTo_km_AllocDomain  (AllocDomain) := convert(DistTo_AllocDomain, km);
			// attribute<km> DistTo_km_AdminDomain  (AdminDomain) := convert(DistTo_AdminDomain, km);
		// }
	// }
	
	attribute<bool> bbg_groen_buff (rdc_10m) := ='potential((Classifications/grondgebruik/CBSKlasse/IsGroen_breed[SourceData/Grondgebruik/BBG/dominant/per_10m/Y'+/ModelParameters/BBG_Year+'])[float32], Geography/Distmatrices/Impl_10m/pot100m/potrange/binair)[bool]';
	// attribute<bool> bbg_groen_buff (rdc_10m) := ='potential((Classifications/grondgebruik/CBS2020Klasse/IsGroen_breed[SourceData/Grondgebruik/BBG/dominant/per_10m/Y'+/ModelParameters/BBG_Year+'])[float32], Geography/Distmatrices/Impl_10m/pot100m/potrange/binair)[bool]';
	
	container GWV
	{
		unit<uint32> src 
		:	StorageType     = "gdal.vect" 
		,	StorageReadOnly = "True"
		,	url             = "https://geoservices.rijkswaterstaat.nl/apps/geonetwork/srv/dut/catalog.search#/metadata/gwvbb9ff-9994-4784-a769-92598d071400"
		, 	StorageName     = "%RSo_DataDir%/Omgeving/Geluid/GWV_2020/02_Shape_segment/GWV_2020_buffer_FULL_FLAT_PLANAR_NONE.shp"  
		{
			attribute<rdc_meter>  geometry (poly);
		}
		
		unit<uint32> selection := select_with_org_rel(src/extra_info == 'Geen')
		,  DialogType = "Map"
		,  DialogData = "geometry"
		{
			attribute<rdc_meter> geometry (poly) := src/geometry[org_rel];
			attribute<string> type := src/type[org_rel];
		}
	}
}