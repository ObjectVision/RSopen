container RegioIndelingen
{ 
	#include<Impl.dms>
	
	unit<uint32> CBS_Gebiedsindelingen_jaren := range(uint32, 2015, 2023)
	{
		attribute<uint32> jaar            := id(.);
		attribute<string> name            := 'Y'+string(jaar);
		attribute<bool>   IsGeneraliseerd := jaar < 2019;
	}
	container CBS :=
		for_each_ne(
			CBS_Gebiedsindelingen_jaren/name
			, 'Read_Gebiedsindelingen_gpkg_T('+quote(string(CBS_Gebiedsindelingen_jaren/jaar))+')'
		)
	{
		container Last := =last(CBS_Gebiedsindelingen_jaren/name);
	}

	Template Read_Gebiedsindelingen_gpkg_T
	{
		parameter<string> jaar;
		//
		parameter<bool>   IsGeneraliseerd     := rjoin('Y'+jaar, CBS_Gebiedsindelingen_jaren/name, CBS_Gebiedsindelingen_jaren/IsGeneraliseerd);
		parameter<string> gegeneraliseerd_str := IsGeneraliseerd ? '_gegeneraliseerd' : '_niet_gegeneraliseerd';
		
		container gpkg
		:	StorageName     = "='%RSo_DataDir%/RegioIndelingen/cbsgebiedsindelingen'+jaar+'.gpkg'"
		, 	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "alltables"
		,	DialogData      = "rdc_meter_base"
		,	URL             = "https://www.cbs.nl/nl-nl/dossier/nederland-regionaal/geografische-data/cbs-gebiedsindelingen"
		,	KeepData        = "true"
		{
			unit<uint32> provincie_gegeneraliseerd
			{
				attribute<string>    label := statnaam;	
			}
		}
		
		unit<uint32> Buurt     := ='gpkg/buurt'+gegeneraliseerd_str
		{
			attribute<rdc_meter> geometry                                 (poly) := ='gpkg/buurt'+gegeneraliseerd_str+'/geometry[rdc_meter]';
			attribute<string>    label                                           := statnaam;
			attribute<string>    name                                            := AsItemName(statnaam);
			attribute<.>         per_AdminDomain                   (AdminDomain) := per_AllocDomain[AdminDomain/AllocDomain_rel];
			attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		unit<uint32> Wijk      := ='gpkg/wijk'+gegeneraliseerd_str
		{
			attribute<rdc_meter> geometry                                 (poly) := ='gpkg/wijk'+gegeneraliseerd_str+'/geometry[rdc_meter]';
			attribute<string>    label                                           := statnaam;
			attribute<string>    name                                            := AsItemName(statnaam);
			attribute<.>         per_AdminDomain                   (AdminDomain) := per_AllocDomain[AdminDomain/AllocDomain_rel];
			attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		unit<uint32> Gemeente  := ='gpkg/gemeente'+gegeneraliseerd_str
		{
			attribute<rdc_meter>      geometry                                 (poly) := ='gpkg/gemeente'+gegeneraliseerd_str+'/geometry[rdc_meter]';
			attribute<rdc_meter_base> geometry_base                       (poly) := ='gpkg/gemeente'+gegeneraliseerd_str+'/geometry';
			attribute<string>    label                                           := statnaam;
			attribute<string>    name                                            := AsItemName(statnaam);
			attribute<uint32>    gem_nr                                          := uint32(right(statcode, 4));
			attribute<.>         per_AdminDomain                   (AdminDomain) := per_AllocDomain[AdminDomain/AllocDomain_rel];
			attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.>         per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
			attribute<.>         per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
			
			attribute<Impl/Read_NVM_2011_COROP2022Begrenzing_shp/ZonderBuitengebied>  NVM_2011_rel := point_in_polygon(centroid_or_mid(geometry), Impl/Read_NVM_2011_COROP2022Begrenzing_shp/ZonderBuitengebied/geometry);
			attribute<Provincie>  Provincie_rel := point_in_polygon(centroid_or_mid(geometry), Provincie/geometry);
			
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		unit<uint32> COROP     := gpkg/coropgebied_gegeneraliseerd
		{
			attribute<rdc_meter> geometry                                 (poly) := gpkg/coropgebied_gegeneraliseerd/geometry[rdc_meter];
			attribute<string>    label                                           := statnaam;
			attribute<string>    name                                            := AsItemName(statnaam);
			attribute<.>         per_AdminDomain                   (AdminDomain) := per_AllocDomain[AdminDomain/AllocDomain_rel];
			attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.>         per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
			attribute<.>         per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
			parameter<bool>      HeeftBuitengebied                               : [false];
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		unit<uint32> Provincie := gpkg/provincie_gegeneraliseerd
		{
			attribute<rdc_meter> geometry                                 (poly) := gpkg/provincie_gegeneraliseerd/geometry[rdc_meter];
			attribute<string>    label                                           := statnaam;
			attribute<string>    name                                            := replace(AsItemName(statnaam), 'Frysl√¢n', 'Friesland');
			attribute<.>         per_AdminDomain                   (AdminDomain) := per_AllocDomain[AdminDomain/AllocDomain_rel];
			attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.>         per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
			attribute<.>         per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
			attribute<NL>        NL_rel                                          := const(NL/V/Nederland, .);
			parameter<bool>      HeeftBuitengebied                               : [false];
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			
			unit<uint32> StudyArea := select_with_org_rel_with_attr_by_cond(., name == ModelParameters/StudyArea)
			{
				attribute<.>         per_AdminDomain                   (AdminDomain) := per_AllocDomain[AdminDomain/AllocDomain_rel];
				attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
				attribute<.>         per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
				attribute<.>         per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}
		}
	}
	
	unit<uint32> Provincie := CBS/last/provincie
	{
		attribute<rdc_meter_base> geometry_base (poly) := ='SourceData/RegioIndelingen/CBS/'+last(CBS_Gebiedsindelingen_jaren/name)+'/gpkg/provincie_gegeneraliseerd/geometry';
		attribute<string>    name            := CBS/last/provincie/name;
		
		container Per_Prov :=
			for_each_nex(
				Provincie/name
				, 'select_with_attr_by_cond(Provincie, name == '+quote(Provincie/name)+')'
				, uint32
			);
	}
	unit<uint32> Gemeente := CBS/last/Gemeente
	{
		attribute<rdc_meter> geometry (poly) := ='SourceData/RegioIndelingen/CBS/'+last(CBS_Gebiedsindelingen_jaren/name)+'/gpkg/gemeente_niet_gegeneraliseerd/geometry[rdc_meter]';
		attribute<string>    name            := CBS/last/gemeente/name;
		
		unit<uint32> Selectie := select_with_attr_by_cond(Gemeente, name == 'Baarn');
	}
	
	unit<uint32> NL := impl/Read_NL
	{
		attribute<string>          name                                       := const('Nederland',.);
		
		attribute<.>          per_rdc_25m                       (rdc_25m)     := poly2grid(geometry, rdc_25m);
		attribute<.>          per_rdc_250m                      (rdc_250m)    := poly2grid(geometry, rdc_250m);
		attribute<.>          per_AdminDomain                   (AdminDomain) := per_AllocDomain[AdminDomain/AllocDomain_rel];
		attribute<.>          per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<.>          per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
		attribute<.>          per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
		attribute<bool>       IsNederland_25m                       (rdc_25m) := per_rdc_25m == 0;
		attribute<bool>       IsNederland_250m                     (rdc_250m) := per_rdc_250m == 0;
		attribute<bool>       IsNederland_AllocDomain           (AllocDomain) := per_AllocDomain == 0;
		attribute<bool>       IsNederland_AdminDomain           (AdminDomain) := per_AdminDomain == 0;
		attribute<bool>       IsRegio                           (AllocDomain) := IsNederland_AllocDomain;
		
		parameter<bool> HeeftBuitengebied: [false];
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		
		unit<uint32> NL_BoundingBox : nrofrows = 1
		{
			parameter<rdc_meter>  union_NL            (poly) := bp_union_polygon(NVM/geometry[rdc_cm])[rdc_meter];
			parameter<rdc_meter>  BoudingBox_minus_NL (poly) := union_polygon - union_NL;
			
			unit<uint32> OutsideNL : nrofrows = 1
			{
				attribute<rdc_meter> geometry (poly) := union_data(.,BoudingBox_minus_NL[rdc_meter]);
			}
			
			parameter<meter> x_min  := 0[meter];
			parameter<meter> x_max  := 280000[meter]; 
			parameter<meter> y_min  := 300000[meter];
			parameter<meter> y_max  := 625000[meter];
			
			parameter<rdc_meter> top_left     := point_xy(x_min,y_max, rdc_meter);
			parameter<rdc_meter> top_right    := point_xy(x_max,y_max, rdc_meter);
			parameter<rdc_meter> bottom_left  := point_xy(x_min,y_min, rdc_meter);
			parameter<rdc_meter> bottom_right := point_xy(x_max,y_min, rdc_meter);
			
			unit<uint32> point_set    : nrofrows = 5
			{
				attribute<rdc_meter>      point        := union_data(., top_left, top_right, bottom_right, bottom_left, top_left);
				attribute<NL_BoundingBox> sequence_rel := const(0, .);
				attribute<.>              ordinal      := id(.);
			}
			
			attribute<rdc_meter>    polygon       (poly) := points2sequence(point_set/point, point_set/sequence_rel, point_set/ordinal);
			parameter<rdc_meter>    union_polygon (poly) := bp_union_polygon(polygon[rdc_cm])[rdc_meter];
		}
		
		unit<uint32> StudyArea := select_with_org_rel(IsDefined(point_in_polygon(centroid_or_mid(geometry), Geography/rdc_meter/geometry)))
		{
			attribute<rdc_meter>         geometry                                 (poly) := ../geometry[org_rel];
			attribute<.>                 per_AdminDomain                   (AdminDomain) := per_AllocDomain[AdminDomain/AllocDomain_rel];
			attribute<StudyArea>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<StudyArea>         per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
			attribute<StudyArea>         per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
			// container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
	}
	
	unit<uint32>  NVM := Impl/Read_NVM_2011_COROP2022Begrenzing_shp/ZonderBuitengebied
	{
		// attribute<rdc_meter>    geometry                 (poly)                 := bp_union_polygon(CBS/last/Gemeente/geometry[rdc_cm], CBS/last/Gemeente/NVM_2011_rel)[rdc_meter];

		attribute<.>            per_AdminDomain          (AdminDomain)          := per_AllocDomain[AdminDomain/AllocDomain_rel];
		attribute<.>            per_AllocDomain          (AllocDomain)          := poly2grid(geometry, AllocDomain);
		attribute<.>            per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
		attribute<.>            per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
		parameter<bool>         HeeftBuitengebied                               : [false];
		attribute<rdc_meter>    Centroid := centroid_or_mid(geometry);
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		
		unit<uint32> StudyArea := select_with_org_rel_with_attr_by_cond(., IsDefined(point_in_polygon(centroid_or_mid(geometry), Geography/rdc_meter/geometry)) || name == 'nw_Friesland')
		{
			attribute<rdc_meter> geometry (poly) := ../geometry[org_rel];
			attribute<.>         per_AdminDomain                   (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.>         per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
			attribute<.>         per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, per_AllocDomain);
			// container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
	}
	
	unit<uint32> RES := unique(Impl/Read_GemeenteRES_2018_gdb/RESnaam)
	{
		attribute<string>    label := values;
		attribute<rdc_meter> geometry (polygon) := bp_union_polygon(Impl/Read_GemeenteRES_2018_gdb/Geometry[rdc_cm], rlookup(Impl/Read_GemeenteRES_2018_gdb/RESnaam, values))[rdc_meter];
		attribute<.>         per_AdminDomain                   (AdminDomain) := per_AllocDomain[AdminDomain/AllocDomain_rel];
			attribute<.>         per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
		parameter<bool>      HeeftBuitengebied: [false];
		attribute<string>    name := AsItemName(label);
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint32> LMSSubzone := Impl/Read_LMSSubzone_shp
	{
		attribute<rdc_meter_base>    geometry_base                           (poly) := Impl/Read_LMSSubzone_shp/geometry_base;
		attribute<rdc_meter>         geometry_rd                             (poly) := geometry_base[rdc_meter];
		attribute<rdc_meter>         centroid                                       := centroid_or_mid(geometry_rd);
		attribute<uint32>            code                                           := uint32(ZONE_ID);
		attribute<string>            name0                                          := CBS/y2019/Gemeente/statnaam[Relaties/Gemeente2019] + '_' + string(ZONE_ID);
		attribute<string>            name                                           := !IsDefined(name0) ? 'Amsterdam_'+string(ZONE_ID) : replace(name0, '/', '_', '-', '_', ' ', '_','(','',')','','\''','','√¢','a','√∫','u',',','','.','');
		parameter<.>                 Ijburg2_proxy                                  := V/Amsterdam_621;
		attribute<bool>              IsIjburg2                                      := id(.) == V/Amsterdam_621;
		attribute<bool>              IsIjburg1                                      := id(.) == V/Amsterdam_622;
		
		attribute<bool>              IsIJburg2_AdminDomain             (AdminDomain) := IsIjburg2[per_AdminDomain];
		attribute<bool>              IsIJburg2_AllocDomain             (AllocDomain) := IsIjburg2[per_AllocDomain];
		
		attribute<Bool>              InNl                                            := LAND == 1[uint8];
		attribute<uint32>            LmsSubF                                         := LmsSub;
		attribute<.>                 per_rdc_100m                         (rdc_100m) := poly2grid(geometry_rd, rdc_100m);
		attribute<.>                 per_rdc_10m                           (rdc_10m) := poly2grid(geometry_rd, rdc_10m);
		attribute<.>                 per_AdminDomain                   (AdminDomain) := per_AllocDomain[AdminDomain/AllocDomain_rel];
		attribute<.>                 per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, per_AdminDomain);
		attribute<.>                 per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<string>            Label                                           := name, DialogType = "LabelText";
		
		unit<uint32> IJburg := select_with_org_rel(IsIjburg1 || IsIjburg2)
		{
			attribute<rdc_meter_base> geometry_base (poly) := ../geometry_base[org_rel];
		}
		
		parameter<.> Ijburg1: [621];
		
		container Relaties
		{
			attribute<..>                              LMSSubzone (..) := id(..);
			attribute<CBS/y2019/Gemeente>              Gemeente2019 (..) := point_in_polygon(centroid_or_mid(../Geometry), CBS/y2019/Gemeente/Geometry_base);
			attribute<RegioIndelingen/NVM>             NVM (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/NVM/geometry);
			attribute<CBS/last/corop>                  COROP (..) := point_in_polygon(centroid_or_mid(../Geometry), CBS/last/corop/geometry);
			attribute<Geography/RegioIndelingen/NL>    NL (..) := point_in_polygon(centroid_or_mid(../Geometry), RegioIndelingen/NL/geometry);
		}
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint32> Grootstedelijke_agglomeraties := impl/Read_Grootstedelijke_agglomeraties_shp
	{
		attribute<string>       name                          := AsItemName(statnaam);
		attribute<.>         per_AdminDomain                   (AdminDomain) := per_AllocDomain[AdminDomain/AllocDomain_rel];
		attribute<.>            per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	} 
	
 	// unit<uint32>  Randstad
	// : StorageName = "%LocalDataProjDir%/BaseData/RegioIndelingen/Randstad.fss"
	// , StorageReadOnly = "True"
	// {
		// attribute<rdc_meter> Geometry (poly);
		// attribute<int32>     IsRandstad;
		// attribute<.>         per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
		// attribute<.>         per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
	// }
	
	// unit<uint32> IJburg := CBS/y2019/Wijk
	// {
		// parameter<.> Ijburg2Proxy: [867];
	// }
	
	
	
	unit<uint32> Bevolkingskern_2011 := Impl/Read_Bevolkingskern_2011_shp
	{
		attribute<bool>         isMeerdan5Kinw    := Populatie >= 5000[float64];
		attribute<bool>         isMeerdan10Kinw   := Populatie >= 10000[float64];
		attribute<bool>         isMeerdan15Kinw   := Populatie >= 15000[float64];
		attribute<bool>         isMeerdan20Kinw   := Populatie >= 20000[float64];
		attribute<bool>         isMeerdan25Kinw   := Populatie >= 25000[float64];
		attribute<bool>         isMeerdan50Kinw   := Populatie >= 50000[float64];
		attribute<bool>         isMeerdan75Kinw   := Populatie >= 75000[float64];
		attribute<bool>         isMeerdan100Kinw  := Populatie >= 100000[float64];
		attribute<bool>         isMeerdan300Kinw  := Populatie >= 300000[float64];
		attribute<bool>         isMinderdan20Kinw := Populatie < 20000[float64];
		attribute<bool>         isMinderdan50Kinw := Populatie < 50000[float64];
		
			attribute<.>         per_AdminDomain                   (AdminDomain) := per_AllocDomain[AdminDomain/AllocDomain_rel];
		attribute<.>            per_AllocDomain    (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<bool>         Is_bbg_AdminDomain (AdminDomain) := IsDefined(per_AdminDomain);
		attribute<bool>         Is_bbg_AllocDomain (AllocDomain) := IsDefined(Per_AllocDomain);
		
		// unit<uint8> PopK : nrofrows = 11
		unit<uint8> PopK : nrofrows = 3
		{
			// attribute<string> name : ['isMeerdan5kinw','isMeerdan10Kinw','isMeerdan15Kinw','isMeerdan20Kinw','isMeerdan25Kinw','isMeerdan50Kinw','isMeerdan75Kinw','isMeerdan100Kinw','isMeerdan300Kinw','isMinderdan20Kinw','isMinderdan50Kinw'];
			attribute<string> name : ['isMeerdan20Kinw','isMeerdan100Kinw','isMinderdan20Kinw'];
		}
		
		container Maak_PopK_Buffers :=
			for_each_ne(
				PopK/name
				, 'Maak_PopK_Buffers_T('+quote(PopK/name)+')'
			)
		{
			parameter<string> Generate := 'Ready', ExplicitSuppliers = "=AsList(PopK/name+'/select/split_geometry/MetBuffer/Write_Is_Buffer', ';')";
		}
		
		Template Maak_PopK_Buffers_T
		{
			parameter<string> PopK_name;
			///
			unit<uint32> select := ='select_with_org_rel('+PopK_name+')'
			{
				attribute<rdc_meter> Geometry (poly) := org_rel -> Geometry;
				
				unit<uint32> split_geometry := bp_split_polygon(Geometry[rdc_cm])
				{
					attribute<rdc_meter> Buffer1000m     (poly) := bg_buffer_multi_polygon(geometry[rdc_meter], 1000d, 16b);
					attribute<rdc_meter> MetBuffer       (poly) := Buffer1000m
					{
						attribute<..>    per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
						attribute<bool>  Write_Is_Buffer (AllocDomain) := IsDefined(per_AllocDomain), StorageName = "='%LocalDataProjDir%/BaseData/PopBuffers/'+PopK_name+'_'+/ModelParameters/StudyArea+'.tif'";
						attribute<bool>  Is_Buffer       (AllocDomain) : StorageName = "='%LocalDataProjDir%/BaseData/PopBuffers/'+PopK_name+'_'+/ModelParameters/StudyArea+'.tif'", StorageReadOnly = "true";
					}
				}
			}
		}
	}
}