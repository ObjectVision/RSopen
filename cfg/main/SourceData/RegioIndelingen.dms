container RegioIndelingen
{ 
	#include<Impl.dms>
	
	unit<UInt32> CBS_Gebiedsindelingen_jaren := range(uint32, 2015, 2025)
	, Descr = "Welke CBS Gebiedsindelingen jaren zijn er"
	{
		attribute<UInt32> jaar            := id(.);
		attribute<String> name            := 'Y'+string(jaar);
		attribute<Bool>   IsGeneraliseerd := jaar < 2019, Descr = "Of er alleen een gegeneraliseerde versie van de gebiedsindelingen aanwezig is";
	}
	container CBS :=
		for_each_ne(
			CBS_Gebiedsindelingen_jaren/name
			, 'Read_Gebiedsindelingen_gpkg_T('+quote(string(CBS_Gebiedsindelingen_jaren/jaar))+')'
		), Descr = "Lees de CBS Gebiedsindelingen van het betreffende jaar uit de geopackages."
	{
		container Last := =last(CBS_Gebiedsindelingen_jaren/name), Descr = "De meest recente CBS Gebiedsindelingen";
	}

	Template Read_Gebiedsindelingen_gpkg_T
	{
		parameter<String> jaar;
		//
		parameter<Bool>   IsGeneraliseerd     := rjoin('Y'+jaar, CBS_Gebiedsindelingen_jaren/name, CBS_Gebiedsindelingen_jaren/IsGeneraliseerd);
		parameter<String> gegeneraliseerd_str := IsGeneraliseerd ? '_gegeneraliseerd' : '_niet_gegeneraliseerd', Descr = "Of de gegeneraliseerde versie van de gebiedsindelingen gebruikt moet worden, als het kan liever de niet-gegeneraliseerde versie gebruiken.";
		
		container gpkg
		:	StorageName     = "='%RSo_DataDir%/RegioIndelingen/cbsgebiedsindelingen'+jaar+'.gpkg'"
		, 	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "AllTables"
		,	DialogData      = "rdc_meter_base"
		,	URL             = "https://www.cbs.nl/nl-nl/dossier/nederland-regionaal/geografische-Data/cbs-gebiedsindelingen"
		,	KeepData        = "TRUE"
		{
			unit<UInt32> Provincie_gegeneraliseerd
			{
				attribute<String>    Label := statnaam;	
			}
		}
		
		unit<UInt32> Buurt     := ='gpkg/buurt'+gegeneraliseerd_str
		, Descr = "CBS Buurtindeling"
		{
			attribute<rdc_meter> geometry                                 (poly) := ='gpkg/buurt'+gegeneraliseerd_str+'/geometry[rdc_meter]';
			attribute<String>    Label                                           := statnaam;
			attribute<String>    name                                            := AsItemName(statnaam);
			attribute<.>         Per_AdminDomain                   (AdminDomain) := Per_AllocDomain[AdminDomain/AllocDomain_rel];
			attribute<.>         Per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			// container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		unit<UInt32> Wijk      := ='gpkg/wijk'+gegeneraliseerd_str
		, Descr = "CBS Wijkindeling"
		{
			attribute<rdc_meter> geometry                                 (poly) := ='gpkg/wijk'+gegeneraliseerd_str+'/geometry[rdc_meter]';
			attribute<String>    Label                                           := statnaam;
			attribute<String>    name                                            := AsItemName(statnaam);
			attribute<.>         Per_AdminDomain                   (AdminDomain) := Per_AllocDomain[AdminDomain/AllocDomain_rel];
			attribute<.>         Per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			
			attribute<Bool>      IsSintOedenrode := LowerCase(name) == 'sint_oedenrode';
		}
		unit<UInt32> Gemeente  := ='gpkg/gemeente'+gegeneraliseerd_str
		, Descr = "CBS Gemeenteindeling"
		{
			attribute<rdc_meter>      geometry                                 (poly) := ='gpkg/gemeente'+gegeneraliseerd_str+'/geometry[rdc_meter]';
			attribute<rdc_meter_base> geometry_base                       (poly) := ='gpkg/gemeente'+gegeneraliseerd_str+'/geometry';
			attribute<String>    Label                                           := statnaam;
			attribute<String>    name                                            := AsItemName(statnaam);
			attribute<UInt32>    gem_nr                                          := uint32(right(statcode, 4));
			attribute<.>         Per_AdminDomain                   (AdminDomain) := Per_AllocDomain[AdminDomain/AllocDomain_rel];
			attribute<.>         Per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.>         Per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, Per_AdminDomain);
			attribute<.>         Per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, Per_AllocDomain);
			
			attribute<Impl/Read_NVM_2011_COROP2022Begrenzing_shp/ZonderBuitengebied>  NVM_2011_rel := point_in_polygon(centroid_or_mid(geometry), Impl/Read_NVM_2011_COROP2022Begrenzing_shp/ZonderBuitengebied/geometry);
			attribute<Provincie>  Provincie_rel := point_in_polygon(centroid_or_mid(geometry), Provincie/geometry);
			
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}

		unit<UInt32> COROP     := gpkg/coropgebied_gegeneraliseerd
		, Descr = "CBS COROP indeling"
		{
			attribute<rdc_meter> geometry                                 (poly) := gpkg/coropgebied_gegeneraliseerd/geometry[rdc_meter];
			attribute<String>    Label                                           := statnaam;
			attribute<String>    name                                            := AsItemName(statnaam);
			attribute<.>         Per_AdminDomain                   (AdminDomain) := Per_AllocDomain[AdminDomain/AllocDomain_rel];
			attribute<.>         Per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.>         Per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, Per_AdminDomain);
			attribute<.>         Per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, Per_AllocDomain);
			parameter<Bool>      HeeftBuitengebied                               : [FALSE];
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		unit<UInt32> Provincie := gpkg/Provincie_gegeneraliseerd
		, Descr = "CBS Provincie indeling"
		{
			attribute<rdc_meter_base> geometry_org_base                        (poly) := gpkg/Provincie_gegeneraliseerd/geometry[rdc_meter_base];
			attribute<rdc_meter_base> geometry_base                            (poly) := geos_union_polygon(Provincie_metIJburg/geometry_base, Provincie_metIJburg/Provincie_rel), Descr = "Provinciegrenzen met IJburg geunioned. Zoals we in het water wel woningen kunnen alloceren. Deze provincie grenzen bepalen namelijk het grid domain.";
			attribute<rdc_meter>      geometry                                 (poly) := geometry_base[rdc_meter];
		
			attribute<String>    Label                                           := statnaam;
			attribute<String>    name                                            := replace(AsItemName(statnaam), 'Frysl√¢n', 'Friesland');
			attribute<.>         Per_AdminDomain                   (AdminDomain) := Per_AllocDomain[AdminDomain/AllocDomain_rel];
			attribute<.>         Per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<.>         Per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, Per_AdminDomain);
			attribute<.>         Per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, Per_AllocDomain);
			attribute<NL>        NL_rel                                          := const(NL/V/Nederland, .);
			
			parameter<Bool>      HeeftBuitengebied                               : [FALSE];
			
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			
			unit<UInt32> StudyArea := select_with_org_rel_with_attr_by_cond(., lowercase(ModelParameters/StudyArea) == lowercase('Nederland') ? const(TRUE,.) : name == ModelParameters/StudyArea)
			{
				attribute<.>         Per_AdminDomain                   (AdminDomain) := Per_AllocDomain[AdminDomain/AllocDomain_rel];
				attribute<.>         Per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
				attribute<.>         Per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, Per_AdminDomain);
				attribute<.>         Per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, Per_AllocDomain);
				
				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<UInt32> Provincie_metIJburg := union_unit(Provincie, RegioIndelingen/LMSSubzone/IJburg)
			, Descr = "Provinciegrenzen met IJburg geunioned. Zoals we in het water wel woningen kunnen alloceren."
			{
				attribute<rdc_meter_base> geometry_base  (poly) := union_data(., Provincie/geometry_org_base, RegioIndelingen/LMSSubzone/IJburg/geometry_base);
				attribute<String>         Label                 := union_data(., Provincie/statnaam, const('Noord-Holland', RegioIndelingen/LMSSubzone/IJburg));
				attribute<Provincie>      Provincie_rel         := rlookup(lowercase(Label), lowercase(Provincie/Label));
			}
		}
	}
	
	unit<UInt32> Provincie := CBS/last/Provincie
	, Descr = "CBS Provincie indeling in het meest recente jaar"
	{
		attribute<rdc_meter_base> geometry_base (poly) := ='SourceData/RegioIndelingen/CBS/last/gpkg/Provincie_gegeneraliseerd/geometry';
		attribute<String>         name                 := CBS/last/Provincie/name;
		
		attribute<Landsdelen> Landsdelen_rel := switch(
													case(id(.) == v/Groningen || id(.) == v/Drenthe, Landsdelen/v/Perifeer)
													, case(id(.) == v/Gelderland || id(.) == v/Overijssel, Landsdelen/v/Intermediate)
													, case(id(.) == v/Noord_Holland || id(.) == v/Zuid_Holland, Landsdelen/v/Randstad)
													, null_b
												);
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		
		container Per_Prov :=
			for_each_nex(
				Provincie/name
				, 'select_with_attr_by_cond(Provincie, name == '+quote(Provincie/name)+')'
				, uint32
			);
	}
	
	unit<UInt8> Landsdelen : NrOfRows = 3
	{
		attribute<rdc_meter> geometry (poly) := geos_union_polygon(Provincie/geometry, Provincie/Landsdelen_rel);
		attribute<String>    name            : ['Randstad', 'Intermediate', 'Perifeer'];
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt32> Gemeente := CBS/last/Gemeente
	, Descr = "CBS Gemeente indeling in het meest recente jaar"
	{
		attribute<rdc_meter> geometry (poly) := ='SourceData/RegioIndelingen/CBS/'+last(CBS_Gebiedsindelingen_jaren/name)+'/gpkg/gemeente_niet_gegeneraliseerd/geometry[rdc_meter]';
		attribute<String>    name            := CBS/last/gemeente/name;
		
		attribute<.>         Per_AdminDomain                   (AdminDomain) := Per_AllocDomain[AdminDomain/AllocDomain_rel];
		attribute<.>         Per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<.>         Per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, Per_AdminDomain);
		
		// unit<UInt32> Selectie := select_with_attr_by_cond(Gemeente, name == 'Baarn');
	}
	
	unit<UInt32> NL : NrOfRows = 1
	, Descr = "Nederland als geheel op basis van provincie grenzen. Dit bepaald het grid domain."
	{
		attribute<rdc_meter_base>  geometry_base (poly)                       := union_data(., geos_union_polygon(SourceData/RegioIndelingen/CBS/Last/Provincie/geometry_base));
		attribute<rdc_meter>       geometry (poly)                            := geometry_base[rdc_meter];
		attribute<String>          name                                       := const('Nederland',.);
		
		attribute<.>          per_rdc_25m                       (rdc_25m)     := poly2grid(geometry, rdc_25m);
		attribute<.>          per_rdc_250m                      (rdc_250m)    := poly2grid(geometry, rdc_250m);
		attribute<.>          Per_AdminDomain                   (AdminDomain) := Per_AllocDomain[AdminDomain/AllocDomain_rel];
		attribute<.>          Per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<.>          Per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, Per_AdminDomain);
		attribute<.>          Per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, Per_AllocDomain);
		attribute<Bool>       IsNederland_25m                       (rdc_25m) := per_rdc_25m == 0;
		attribute<Bool>       IsNederland_250m                     (rdc_250m) := per_rdc_250m == 0;
		attribute<Bool>       IsNederland_AllocDomain           (AllocDomain) := Per_AllocDomain == 0;
		attribute<Bool>       IsNederland_AdminDomain           (AdminDomain) := Per_AdminDomain == 0;
		attribute<Bool>       IsRegio                           (AllocDomain) := IsNederland_AllocDomain;
		
		parameter<Bool> HeeftBuitengebied: [FALSE];
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		
		unit<UInt32> NL_BoundingBox : NrOfRows = 1
		{
			parameter<rdc_meter>  union_NL            (poly) := geos_union_polygon(NVM/geometry);
			parameter<rdc_meter>  BoudingBox_minus_NL (poly) := geos_difference(union_polygon,union_NL);
			
			unit<UInt32> OutsideNL : NrOfRows = 1
			{
				attribute<rdc_meter> geometry (poly) := union_data(.,BoudingBox_minus_NL[rdc_meter]);
			}
			
			parameter<meter> x_min  := 0[meter];
			parameter<meter> x_max  := 280000[meter]; 
			parameter<meter> y_min  := 300000[meter];
			parameter<meter> y_max  := 625000[meter];
			
			parameter<rdc_meter> top_left     := point_xy(x_min,y_max, rdc_meter);
			parameter<rdc_meter> top_right    := point_xy(x_max,y_max, rdc_meter);
			parameter<rdc_meter> bottom_left  := point_xy(x_min,y_min, rdc_meter);
			parameter<rdc_meter> bottom_right := point_xy(x_max,y_min, rdc_meter);
			
			unit<UInt32> point_set    : NrOfRows = 5
			{
				attribute<rdc_meter>      point        := union_data(., top_left, top_right, bottom_right, bottom_left, top_left);
				attribute<NL_BoundingBox> Sequence_rel := const(0, .);
				attribute<.>              ordinal      := id(.);
			}
			
			attribute<rdc_meter>    polygon       (poly) := points2sequence(point_set/point, point_set/Sequence_rel, point_set/ordinal);
			parameter<rdc_meter>    union_polygon (poly) := geos_union_polygon(polygon);
		}
		
		unit<UInt32> StudyArea := select_with_org_rel(IsDefined(point_in_polygon(centroid_or_mid(geometry), Geography/rdc_meter/geometry)))
		{
			attribute<rdc_meter>         geometry                                 (poly) := ../geometry[org_rel];
			attribute<.>                 Per_AdminDomain                   (AdminDomain) := Per_AllocDomain[AdminDomain/AllocDomain_rel];
			attribute<StudyArea>         Per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
			attribute<StudyArea>         Per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, Per_AdminDomain);
			attribute<StudyArea>         Per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, Per_AllocDomain);
		}
	}
	
	unit<UInt32>  NVM := Impl/Read_NVM_2011_COROP2022Begrenzing_shp/ZonderBuitengebied
	, Descr = "NVM 2011 gebieden, waar de grenzen geharmoniseerd zijn met de COROP2022 begrenzing zonder buitengebied"
	{
		attribute<rdc_meter>    geometry                 (poly)                 := Impl/Read_NVM_2011_COROP2022Begrenzing_shp/ZonderBuitengebied/geometry;

		attribute<.>            Per_AdminDomain          (AdminDomain)          := Per_AllocDomain[AdminDomain/AllocDomain_rel];
		attribute<.>            Per_AllocDomain          (AllocDomain)          := poly2grid(geometry, AllocDomain);
		attribute<.>            Per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, Per_AdminDomain);
		attribute<.>            Per_CompactedAllocDomain (CompactedAllocDomain) := collect_by_cond(CompactedAllocDomain, AllocDomain/IsCompactedDomain, Per_AllocDomain);
		parameter<Bool>         HeeftBuitengebied                               : [FALSE];
		attribute<rdc_meter>    Centroid := centroid_or_mid(geometry);
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt32> RES := unique(Impl/Read_GemeenteRES_2018_gdb/RESnaam)
	{
		attribute<String>    Label                                           := values;
		attribute<rdc_meter> geometry                                 (poly) := geos_union_polygon(Impl/Read_GemeenteRES_2018_gdb/geometry, rlookup(lowercase(Impl/Read_GemeenteRES_2018_gdb/RESnaam), lowercase(values)));
		attribute<.>         Per_AdminDomain                   (AdminDomain) := Per_AllocDomain[AdminDomain/AllocDomain_rel];
		attribute<.>         Per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
		parameter<Bool>      HeeftBuitengebied                               := FALSE;
		attribute<String>    name                                            := AsItemName(Label);
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt32> LMSSubzone := Impl/Read_LMSSubzone_shp
	, Descr = "LMS Subzones, zoals gebruikt in de woningmarktmodellen van Amsterdam, Rotterdam en Den Haag"
	{
		attribute<rdc_meter_base>    geometry_base                           (poly) := Impl/Read_LMSSubzone_shp/geometry_base;
		attribute<rdc_meter>         geometry_rd                             (poly) := geometry_base[rdc_meter];
		attribute<rdc_meter>         Centroid                                       := centroid_or_mid(geometry_rd);
		attribute<UInt32>            code                                           := uint32(ZONE_id);
		attribute<String>            name0                                          := CBS/Y2024/Gemeente/statnaam[Relaties/Gemeente2024] + '_' + string(ZONE_id);
		attribute<String>            name                                           := !IsDefined(name0) ? 'Amsterdam_'+string(ZONE_id) : AsItemName(name0); //replace(name0, '/', '_', '-', '_', ' ', '_','(','',')','','\''','','√¢','a','√∫','u',',','','.','');
		
		//IJburg-hack om ervoor te zorgen dat IJburg niet water is.
		parameter<.>                 Ijburg2_proxy                                  := V/Amsterdam_621;
		attribute<Bool>              IsIjburg2                                      := id(.) == V/Amsterdam_621;
		attribute<Bool>              IsIjburg1                                      := id(.) == V/Amsterdam_622;
		attribute<Bool>              IsIJburg2_AdminDomain             (AdminDomain) := IsIjburg2[Per_AdminDomain];
		attribute<Bool>              IsIJburg2_AllocDomain             (AllocDomain) := IsIjburg2[Per_AllocDomain];
		
		attribute<Bool>              InNl                                            := LAND == 1[uint8];
		attribute<UInt32>            LmsSubF                                         := LmsSub;
		attribute<.>                 per_rdc_100m                         (rdc_100m) := poly2grid(geometry_rd, rdc_100m);
		attribute<.>                 per_rdc_10m                           (rdc_10m) := poly2grid(geometry_rd, rdc_10m);
		attribute<.>                 Per_AdminDomain                   (AdminDomain) := Per_AllocDomain[AdminDomain/AllocDomain_rel];
		attribute<.>                 Per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, Per_AdminDomain);
		attribute<.>                 Per_AllocDomain                   (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<String>            Label                                           := name, DialogType = "LabelText";
		
		unit<UInt32> IJburg := select_with_org_rel(IsIjburg1 || IsIjburg2)
		{
			attribute<rdc_meter_base> geometry_base (poly) := ../geometry_base[org_rel];
			attribute<rdc_meter>      geometry      (poly) := geometry_base[rdc_meter];
		}
		
		parameter<.> Ijburg1: [621];
		
		container Relaties
		{
			attribute<..>                              LMSSubzone (..) := id(..);
			attribute<CBS/Y2024/Gemeente>              Gemeente2024 (..) := point_in_polygon(centroid_or_mid(../geometry), CBS/Y2024/Gemeente/geometry_base);
			attribute<RegioIndelingen/NVM>             NVM (..) := point_in_polygon(centroid_or_mid(../geometry), RegioIndelingen/NVM/geometry);
			attribute<CBS/last/corop>                  COROP (..) := point_in_polygon(centroid_or_mid(../geometry), CBS/last/corop/geometry);
			attribute<Geography/RegioIndelingen/NL>    NL (..) := point_in_polygon(centroid_or_mid(../geometry), RegioIndelingen/NL/geometry);
		}
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt32> Grootstedelijke_agglomeraties := Impl/Read_Grootstedelijke_agglomeraties_shp
	, Descr = "Grootstedelijke agglomeraties zoals gebruikt in de Structuurvisie Infrastructuur en Ruimte (SVIR)"
	{
		attribute<String>       name                          := AsItemName(statnaam);
		attribute<.>         Per_AdminDomain                   (AdminDomain) := Per_AllocDomain[AdminDomain/AllocDomain_rel];
		attribute<.>            Per_AllocDomain (AllocDomain) := poly2grid(geometry, AllocDomain);
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	} 
	
	unit<UInt32> Bevolkingskern_2011 := Impl/Read_Bevolkingskern_2011_shp
	, Descr = "Bevolkingskernen zoals gedefinieerd door het CBS in 2011"
	{
		attribute<Bool>         isMeerdan5Kinw    := Populatie >= 5000[float64];
		attribute<Bool>         isMeerdan10Kinw   := Populatie >= 10000[float64];
		attribute<Bool>         isMeerdan15Kinw   := Populatie >= 15000[float64];
		attribute<Bool>         isMeerdan20Kinw   := Populatie >= 20000[float64];
		attribute<Bool>         isMeerdan25Kinw   := Populatie >= 25000[float64];
		attribute<Bool>         isMeerdan50Kinw   := Populatie >= 50000[float64];
		attribute<Bool>         isMeerdan75Kinw   := Populatie >= 75000[float64];
		attribute<Bool>         isMeerdan100Kinw  := Populatie >= 100000[float64];
		attribute<Bool>         isMeerdan300Kinw  := Populatie >= 300000[float64];
		attribute<Bool>         isMinderdan20Kinw := Populatie < 20000[float64];
		attribute<Bool>         isMinderdan50Kinw := Populatie < 50000[float64];
		
			attribute<.>         Per_AdminDomain                   (AdminDomain) := Per_AllocDomain[AdminDomain/AllocDomain_rel];
		attribute<.>            Per_AllocDomain    (AllocDomain) := poly2grid(geometry, AllocDomain);
		attribute<Bool>         Is_BBG_AdminDomain (AdminDomain) := IsDefined(Per_AdminDomain);
		attribute<Bool>         Is_BBG_AllocDomain (AllocDomain) := IsDefined(Per_AllocDomain);
		
		unit<UInt8> PopK : NrOfRows = 3
		, Descr = "Populatie klassen"
		{
			attribute<String> name : ['isMeerdan20Kinw','isMeerdan100Kinw','isMinderdan20Kinw'];
		}
		
		container Maak_PopK_Buffers :=
			for_each_ne(
				PopK/name
				, 'Maak_PopK_Buffers_T('+quote(PopK/name)+')'
			), Descr = "Maak voor elke bevolkingskern populatie klasse een buffer van 1km rondom de kernen"
		{
			parameter<String> Generate := 'Ready', ExplicitSuppliers = "=asList(PopK/name+'/select/split_geometry/MetBuffer/Write_Is_Buffer', ';')";
		}
		
		Template Maak_PopK_Buffers_T
		{
			parameter<String> PopK_name;
			///
			unit<UInt32> select := ='select_with_org_rel('+PopK_name+')'
			{
				attribute<rdc_meter> geometry (poly) := org_rel -> geometry;
				
				unit<UInt32> split_geometry := geos_split_polygon(geometry)
				{
					attribute<rdc_meter> Buffer1000m     (poly) := geos_buffer_multi_polygon(geometry[rdc_meter], 1000d, 16b);
					attribute<rdc_meter> MetBuffer       (poly) := Buffer1000m
					{
						attribute<..>    Per_AllocDomain (AllocDomain) := poly2grid(MetBuffer, AllocDomain);
						attribute<Bool>  Write_Is_Buffer (AllocDomain) := IsDefined(Per_AllocDomain), StorageName = "='%LocalDataProjDir%/BaseData/PopBuffers/'+PopK_name+'_'+/ModelParameters/StudyArea+'.tif'", StorageType = "tif";
						attribute<Bool>  Is_Buffer       (AllocDomain) : StorageName = "='%LocalDataProjDir%/BaseData/PopBuffers/'+PopK_name+'_'+/ModelParameters/StudyArea+'.tif'", StorageReadOnly = "TRUE", StorageType = "tif";
					}
				}
			}
		}
	}
}