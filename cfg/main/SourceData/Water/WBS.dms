container WBS
{
	//De gecombineerde sturingskaart is daarbij aangepast tov de oorspronkelijke levering van HKV, waarbij klasse 0 gebieden en gebieden met noData (uitgezonderd water) 
	//naar klasse A zijn omgezet. Dit is in de andere sturingskaarten nog niet gebeurd. Tenslotte zijn de rode niet-bouwen gebieden opgenomen in een apart vector bestand, 
	//dat voor weergave altijd boven de sturingskaarten moet worden gelegd.
	attribute<CombinatiekaartK> Combinatiekaart (rdc_5m)
	:	StorageName     = "%RSo_DataDir%/Omgeving/Water/WBS/combikaart_correctie_ND.tif"
	,	StorageType     = "gdal.grid"
	,	StorageReadOnly = "True"
	,   Source          = "Bron1"
						  "16 april 2024 per email Ruimtelijk afwegingskader kaarten.zip"
						  "Y:\Project\M500567_Gesprekstools\M500567_RuimteScanner\BronData\WBS\20240416\RuimtelijkAfwegingskaderKaarten";
						  					  	
	unit<UInt32> KlasseD
	:	StorageName     = "%RSo_DataDir%/Omgeving/Water/WBS/niet_bouwen_april24.shp"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "TRUE"
	,   Source          = "Bron1"
						  "16 april 2024 per email Ruimtelijk afwegingskader kaarten.zip"
	{
		attribute<rdc_meter>        geometry (poly);
		attribute<UInt32>           KlasseDGrid (rdc_5m):= poly2grid(geometry,rdc_5m);
		attribute<CombinatiekaartK> KlasseD     (rdc_5m):= IsDefined(KlasseDGrid) ? 7[CombinatiekaartK] : (0/0)[CombinatiekaartK];
	}
	
	
	attribute<CombinatiekaartK>  Combinatiekaart_5mtr           (rdc_5m) := IsDefined(KlasseD/KlasseD) ? KlasseD/KlasseD : Combinatiekaart;
	attribute<CombinatiekaartK>  Combinatiekaart_25mtr     (AdminDomain) := Modus(Combinatiekaart_5mtr, rdc_5m/rdc_25m_rel)[CombinatiekaartK];
	attribute<Combinatiekaart6K> Combinatiekaart_6kl_25mtr (AdminDomain) := Classify(Combinatiekaart_25mtr[int32], Combinatiekaart6K/ClassBreaks);

	unit<UInt32> CombinatiekaartK := cat_range(0,8)
	{
		attribute<String> Label: ['leeg',
								'1: Klasse A: Ja, Accepteren',
								'2: Klasse A: Ja, Accepteren',
								'3: Klasse A: Ja, Accepteren',
								'4:Klasse B: Ja Mits, kleine opgave',
								'5:Klasse C: Ja Mits, gemiddelde opgave',
								'6:Klasse C: Ja Mits, grote opgave',
								'7:Klasse D: Nee tenzij'
								];
								
		attribute<String> name       := AsItemName(Label);
		attribute<UInt32> BrushColor : [rgb(0,0,0), rgb(76,255,0), rgb(76,255,0), rgb(76,255,0), rgb(194,255,89), rgb(255,251,66), rgb(255,185,89), rgb(255,0,0)], DialogType = "BrushColor";
		
		container V := for_each_nedv(name, string(id(.)) + '[..]', void, .);
	}

	unit<UInt8> Combinatiekaart6K: NrOfRows = 6
	{
		attribute<String> Label : [
							'leeg',
							'1:Klasse A: Ja, Accepteren',
							'2:Klasse B: Ja Mits, kleine opgave',
							'3:Klasse C: Ja Mits, gemiddelde opgave',
							'4:Klasse C: Ja Mits, grote opgave',
							'5:Klasse D: Nee tenzij/Niet Bouwen'
							];
							
		attribute<String> name: [
							'leeg',
							'KlasseA',
							'KlasseB',
							'KlasseC1',
							'KlasseC2',
							'KlasseD'
							];
							
		attribute<Int32>  ClassBreaks : [0,1,4,5,6,7], DialogType = "Classification";
		attribute<UInt32> BrushColor  : [rgb(0,0,0),rgb(76,255,0), rgb(194,255,89), rgb(255,251,66), rgb(255,185,89), rgb(255,0,0)], DialogType = "BrushColor";
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
}