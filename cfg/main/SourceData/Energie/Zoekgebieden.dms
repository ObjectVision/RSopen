container Zoekgebieden
{
	unit<uint32> Bod
	: StorageName     = "%RSo_DataDir%/Energie/RES/Zoekgebieden/Zoekgebiedenkaart_conceptversie_regiosbod.gdb"
	, StorageType     = "gdal.vect"
	, StorageReadOnly = "True"
	, Source          = "Machiel Bakx / Generation.Energy, 1 juli 2021"
	, url             = "%RSo_DataDir%/Energie/RES/Zoekgebieden/210702_Verantwoording_concept-dataset_RES_zoekgebieden_NL.pdf"
	, SyncMode        = "Attr"
	{
		attribute<rdc_meter> Geometry (poly);
		attribute<float32> bod_GWh_km2 := bod_GWh[float32] / convert(value(Shape_Area, meter2), km2);//genomrlaiseerd bod tbv vergelijking

	}
	
	unit<uint32> Zoekgebied
	: StorageName     = "%RSo_DataDir%/Energie/RES/Zoekgebieden/Zoekgebiedenkaart_conceptversie_records.gdb"
	, StorageType     = "gdal.vect"
	, StorageReadOnly = "True"
	, Source          = "Machiel Bakx / Generation.Energy, 1 juli 2021"
	, url             = "%RSo_DataDir%/Energie/RES/Zoekgebieden/210702_Verantwoording_concept-dataset_RES_zoekgebieden_NL.pdf"
	, SyncMode        = "Attr"
	{
		attribute<rdc_meter>              Geometry (poly);
		attribute<meter2>                 oppervlakte         := area(Geometry, meter2);
		attribute<ambitie_unique>         amb_Rel             := rlookup(ambitie_st, ambitie_unique/values);
		attribute<gebied_typ_unique>      gebied_typ_Rel      := rlookup(gebied_typ, gebied_typ_unique/values);
		attribute<techniek_t_unique>      techniek_t_Rel      := rlookup(techniek_t, techniek_t_unique/values);
		attribute<string>                 gb_tech             := gebied_typ + "_" + techniek_t;
		attribute<string>                 amb_gb_tech         := ambitie_st + "_" + gebied_typ + "_" + techniek_t;
		attribute<string>                 amb_gb_tech_cor     := replace(amb_gb_tech,'(','',',','_',':','',' ','_',')','','+','','__','_');
		attribute<amb_gb_tech_unique>     amb_gb_tech_Rel     := rlookup(amb_gb_tech, amb_gb_tech_unique/values);
		attribute<amb_gb_tech_cor_unique> amb_gb_tech_cor_Rel := rlookup(amb_gb_tech_cor, amb_gb_tech_cor_unique/values);
		attribute<MW>                     bodMW               := bod_MW[MW];
		
		attribute<bool> IsWind :=
			techniek_t_Rel == techniek_t_unique/V/combinatie_zon_op_veld_wind ||
			techniek_t_Rel == techniek_t_unique/V/combinatie_zon_op_veld_wind_combinatie_zon_op_veld_wind ||
			techniek_t_Rel == techniek_t_unique/V/combinatie_zon_op_veld_zon_op_dak_wind ||
			techniek_t_Rel == techniek_t_unique/V/Wind;
		
		attribute<bool> IsZon              := techniek_t_Rel <> techniek_t_unique/V/Wind;
		attribute<bool> IsNietGerealiseerd := amb_Rel <> ambitie_unique/V/gerealiseerd;
		attribute<bool> IsZoekgebied       := gebied_typ_Rel == gebied_typ_unique/V/Zoekgebied || gebied_typ_Rel == gebied_typ_unique/V/Zoekgebied_cluster;
		attribute<bool> Wind               := IsWind && IsNietGerealiseerd && IsZoekgebied;
		attribute<bool> Zon                := IsZon && IsNietGerealiseerd && IsZoekgebied;
		attribute<bool> ZonEnWind          := Zon && Wind;
		attribute<bool> ZonGeenWind        := Zon && !Wind;
		attribute<bool> WindGeenZon        := Wind && !Zon;
		
		container gebied_typen := for_each_nedv(gebied_typ_unique/name, 'gebied_typ_Rel == '+string(id(gebied_typ_unique))+'[gebied_typ_unique]', Zoekgebied, bool);
	}
	
	unit<uint32> ambitie_unique := unique(Zoekgebied/ambitie_st)
	{
		attribute<uint32>  aantal         := pcount(Zoekgebied/amb_Rel);
		attribute<float32> oppervlakte    := sum(Zoekgebied/oppervlakte,Zoekgebied/amb_Rel);
		attribute<km2>     oppervlaktekm2 := oppervlakte[km2];
		attribute<string>  name           := replace(values,'(','',',','_',':','',' ','_',')','','+','','__','_');
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint32> gebied_typ_unique := unique(Zoekgebied/gebied_typ)
	{
		attribute<uint32>  aantal         := pcount(Zoekgebied/gebied_typ_Rel);
		attribute<float32> oppervlakte    := sum(Zoekgebied/oppervlakte,Zoekgebied/gebied_typ_Rel);
		attribute<km2>     oppervlaktekm2 := oppervlakte[km2];
		attribute<string> name := replace(values,'(','',',','_',':','',' ','_',')','','+','','__','_');
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint32> techniek_t_unique := unique(Zoekgebied/techniek_t)
	{
		attribute<uint32>  aantal         := pcount(Zoekgebied/techniek_t_Rel);
		attribute<float32> oppervlakte    := sum(Zoekgebied/oppervlakte,Zoekgebied/techniek_t_Rel);
		attribute<km2>     oppervlaktekm2 := oppervlakte[km2];
		attribute<string> name := replace(values,'(','',',','_',':','',' ','_',')','','+','','__','_');
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint32> amb_gb_tech_unique := unique(Zoekgebied/amb_gb_tech)
	{
		attribute<uint32>  aantal         := pcount(Zoekgebied/amb_gb_tech_Rel);
		attribute<meter2> oppervlakte    := sum(Zoekgebied/oppervlakte,Zoekgebied/amb_gb_tech_Rel);
		attribute<km2> oppervlaktekm2    := oppervlakte[km2];
	}
	
	unit<uint32> amb_gb_tech_cor_unique  := unique(Zoekgebied/amb_gb_tech_cor)
	{
		attribute<uint32>  aantal        := pcount(Zoekgebied/amb_gb_tech_cor_Rel);
		attribute<meter2> oppervlakte    := sum(Zoekgebied/oppervlakte,Zoekgebied/amb_gb_tech_cor_Rel);
		attribute<km2> oppervlaktekm2    := oppervlakte[km2];
	}
	
	container Analyse_amb_gb_tech := 
		for_each_ne(
			amb_gb_tech_cor_unique/Values
			, 'AnalyseSet_templ('+quote(amb_gb_tech_cor_unique/Values)+')'
		);
		
	Template AnalyseSet_templ
	{
		//
		parameter<string> name;
		//
		
		unit<uint32> AnalyseSet := ='subset(Zoekgebied/amb_gb_tech_cor=' + string(quote(name)) +')'
		{
			attribute<rdc_meter> Geometry(poly)           := Zoekgebied/Geometry[nr_OrgEntity];
			attribute<.>         grid (rdc_100m)          := poly2grid(Geometry, rdc_100m);
			attribute<bool>      IsGrid (rdc_100m)        := IsDefined(grid);
			
			attribute<float32>   bod_GWh         := Zoekgebied/bod_GWh[float32][nr_OrgEntity];
			attribute<float32>   oppervlakte     := Zoekgebied/oppervlakte[float32][nr_OrgEntity];
		}
		parameter<float32> sumoppervlakte := sum(AnalyseSet/oppervlakte);
	}
}