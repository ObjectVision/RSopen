container RES_3_elektriciteit_aanbod_potentieel
{
	container Wind
	{
		unit<UInt32> merge_wnd_hard_wt56_nat_ana_v3
		: StorageName     = "%RSo_DataDir%/Energie/RES/Analysekaarten/3_elektriciteit_aanbod_potentieel/wind/merge_wnd_hard_wt56_nat_ana_v3.gdb"
		, StorageType     = "gdal.vect"
		, StorageReadOnly = "True"
		, Source          = "Bron4, 21 december 2018"
		{
			attribute<rdc_meter> geometry (polygon);
			attribute<meter2>          oppervlakte   := area(geometry, meter2);
			attribute<rest_red_unique> rest_red_Rel  := rlookup(lowercase(rest_red), lowercase(rest_red_unique/values));
			
			attribute<.>    per_grid  (AdminDomain) := poly2grid(geometry, AdminDomain);
			attribute<Bool> IsHard    (AdminDomain) := Isdefined(per_grid);
			attribute<Bool> IsNotHard (AdminDomain) := !IsHard;
		}
		
		unit<UInt32> rest_red_unique := unique(merge_wnd_hard_wt56_nat_ana_v3/rest_red)
		{
			attribute<UInt32>  aantal         := pcount(merge_wnd_hard_wt56_nat_ana_v3/rest_red_Rel);
			attribute<Float32> oppervlakte    := sum(merge_wnd_hard_wt56_nat_ana_v3/oppervlakte,merge_wnd_hard_wt56_nat_ana_v3/rest_red_Rel);
			attribute<Float32> aandeel        := (oppervlakte / 6.98E+10f) * 100f; //todo parameter van Totaal!
			attribute<String> name        := replace(values,'(','',',','_',':','',' ','_',')','','+','','__','_');
			attribute<String> Label       := name, DialogType = "LabelText";
			attribute<UInt32> BrushColor  : DialogType = "BrushColor",
			[
				 rgb(255,  0,  0)
				,rgb(251,255, 33)
				,rgb(178,  0,255)
				,rgb(198,198,198)
				,rgb(127,127,127)
				,rgb(255,106,  0)
				,rgb(127,  0,  0)
				,rgb(255,173,191)
				,rgb(  0, 38,255)
				,rgb(  0,100,  0)
				,rgb(255,  0,  0)
				,rgb(  0,  0,255)
				,rgb(255,216,  0)
				,rgb(155,127,127)
				,rgb(  0,255,255)
			];
		}
		
		unit<UInt32> rest_red_laag
		{
			container Import := for_each_nxs(rest_red/naam_underscore, uint32, rest_red/Sqlstring)
			,	StorageName     = "%RSo_DataDir%/Energie/RES/Analysekaarten/3_elektriciteit_aanbod_potentieel/wind/merge_wnd_hard_wt56_nat_ana_v3.gdb"
			,	StorageReadOnly = "True"
			,	SyncMode        = "Attr"
			,	StorageType     = "gdal.vect"
			,	Sqlstring       = "=rest_red/Sqlstring"
			{
				unit<UInt32> Beperkt_kwetsbare_gebouwen :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Beperkt kwetsbare gebouwen'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
				
				unit<UInt32> Bestaande_kassen :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Bestaande kassen'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
				
				unit<UInt32> Bestaande_turbines :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Bestaande turbines'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
				
				unit<UInt32> Buisleidingen_bestaand :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Buisleidingen bestaand'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
				
				unit<UInt32> Hoogspanning :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Hoogspanning'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
				
				unit<UInt32> Kwetsbare_gebouwen :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Kwetsbare gebouwen'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
				
				unit<UInt32> Losse_woonbebouwing_geluid :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Losse woonbebouwing (geluid)'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
				
				unit<UInt32> Luchthaven :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Luchthaven'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
				
				unit<UInt32> Primaire_waterkering :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Primaire waterkering'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
				
				unit<UInt32> Risico_inrichting :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Risico-inrichting'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
				
				unit<UInt32> Spoor :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Spoor'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
				
				unit<UInt32> WaterWegen :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Waterwegen'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
				
				unit<UInt32> Wegen :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Wegen'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
				
				unit<UInt32> Woonkernen :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Woonkernen'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
				
				unit<UInt32> Zee :SqlString="SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Zee'"
				{
					attribute<rdc_meter> geometry(poly);
					attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
				}
			}
		}
		
		unit<UInt32> rest_red:NrOfRows=15
		{
			attribute<UInt32>   PenColor   := BrushColor, DialogType = "PenColor";
			attribute<UInt32>   BrushColor :
			[
				rgb(235,240,210),//'Beperkt kwetsbare gebouwen'
				rgb(255,238, 54),//'Bestaande kassen''
				rgb(180, 95,210),//'Bestaande turbines''
				rgb(200,160,215),//'Buisleidingen bestaand''
				rgb(100,170, 45),//'Hoogspanning''
				rgb(255,200,190),//'Kwetsbare gebouwen''
				rgb(255, 60,130),//'Losse woonbebouwing (geluid)''
				rgb(255,160,150),//'Luchthaven''
				rgb(240,145,190),//'Primaire waterkering''
				rgb(255,190,135),//'Risico-inrichting''
				rgb( 40,200, 70),//'Spoor''
				rgb(255,105, 35),//'Waterwegen''
				rgb(235,195,215),//'Wegen''
				rgb(220,155,120),//'Woonkernen''
				rgb(130,165,145)//Zee
			], DialogType = "BrushColor";
			
			attribute<String> naam :
			[
				'Beperkt kwetsbare gebouwen',
				'Bestaande kassen',
				'Bestaande turbines',
				'Buisleidingen bestaand',
				'Hoogspanning',
				'Kwetsbare gebouwen',
				'Losse woonbebouwing (geluid)',
				'Luchthaven',
				'Primaire waterkering',
				'Risico-inrichting',
				'Spoor',
				'Waterwegen',
				'Wegen',
				'Woonkernen',
				'Zee'
			];
			
			attribute<String> naam_underscore:=replace(naam,";","_","(","",")","","-","_"," ","_");
			
			attribute<String> Label:= naam, DialogType = "LabelText";
			
			attribute<String> SqlString := 'SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = ''' + naam + '''';
		}
		
		// unit<UInt32> merge_wnd_soft_wt56_prv_nat_ana_v2
		// : StorageName     = "%RSo_DataDir%/Energie/RES/Analysekaarten/3_elektriciteit_aanbod_potentieel/wind/merge_wnd_soft_wt56_prv_nat_ana_v2.gdb"
		// , StorageType     = "gdal.vect"
		// , StorageReadOnly = "True"
		// , Source          = "Bron5"
		// {
			// attribute<rdc_meter> geometry (polygon);
			// attribute<meter2>          oppervlakte   := area(geometry, meter2);
			// attribute<rest_rul_unique> rest_rul_Rel  := rlookup(rest_rul, rest_rul_unique/values);
			
			// attribute<.>    per_grid  (AdminDomain) := poly2grid(geometry, AdminDomain);
			// attribute<Bool> IsSoft    (AdminDomain) := Isdefined(per_grid);
			// attribute<Bool> IsNotSoft (AdminDomain) := !IsSoft;
		// }
		
		// unit<UInt32> rest_rul_unique := unique(merge_wnd_soft_wt56_prv_nat_ana_v2/rest_rul)
		// {
			// attribute<UInt32>  aantal         := pcount(merge_wnd_soft_wt56_prv_nat_ana_v2/rest_rul_Rel);
			// attribute<Float32> oppervlakte    := sum(merge_wnd_soft_wt56_prv_nat_ana_v2/oppervlakte,merge_wnd_soft_wt56_prv_nat_ana_v2/rest_rul_Rel);
			// attribute<Float32> aandeel        := (oppervlakte / 2.84127901E+10f) * 100f;//todo parameter van Totaal!
			// attribute<String>  name           := replace(values,'(','',',','_',':','',' ','_',')','','+','','__','_');
			// attribute<String>  Label          := name, DialogType = "LabelText";
			// attribute<UInt32>  BrushColor     : DialogType = "BrushColor",
			// [
				 // rgb(  0,158, 68)
				// ,rgb( 76,255,  0)
				// ,rgb(255,216,  0)
				// ,rgb(178,  0,255)
			// ];
		// }
	}
	
	container Zon
	{
		unit<UInt32> merge_zon_restr_veld_nat_ana_v2 //restrictief. Is er geen onderscheid bij zon tussen hard en zacht?
		: StorageName     = "%RSo_DataDir%/Energie/RES/Analysekaarten/3_elektriciteit_aanbod_potentieel/zon/merge_zon_restr_veld_nat_ana_v2.gdb"
		, StorageType     = "gdal.vect"
		, StorageReadOnly = "True"
		, Source          = "Bron5"
		{
			//rest_red (aleen Ecologie (Provincie)) en rest_typ (alleen NNN) niet van belang
			attribute<rdc_meter> geometry (polygon);
		}
	}
	
	// unit<UInt32> RES:=RES_9_grenzen/grenzen_resregios_2019_RES_land
	// {
		// attribute<String> Rescode :=RES_9_grenzen/grenzen_resregios_2019_RES_land/Rescode;
	// }
}