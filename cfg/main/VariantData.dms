////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Dit is RSOpen, de open source versie van het model RuimteScanner. Het scipt wordt uitgegeven onder GNU-GPL licentie.
//
// RSOpen is ontwikkeld door PBL Planbureau voor de Leefomgeving, i.s.m Object Vision B.V. en VU Vrije Universiteit Amsterdam.
// Opdrachtgever/ontwikkelaar PBL: Bart Rijken
// Contactpersoon/ontwikkelaar Object Vision B.V.: Jip Claassens (jclaassens@objectvision.nl)
// Contacpersoon PBL: Bas van Bemmel (Bas.vanBemmel@pbl.nl)
//
// Deze file bevat de verschillende analyses/rekenstappen die nodig zijn voor de berekening van de indicatoren
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

container VariantData: using = "Classifications;units;Geography;VariantParameters"
{
	
	container PotentieleState := 
		for_each_ne(
			Time/Zichtjaar/name
			, 'Templates/PotentieleState_T('+quote(Time/Zichtjaar/name)+', Zeef_AllocDomain/'+Time/Zichtjaar/name+'/SectorXSubsectoren, Density)'
		);
	
	container PotentieleState0 := 
		for_each_ne(
			Time/Zichtjaar/name
			, 'Templates/PotentieleState_T('+quote(Time/Zichtjaar/name)+', Zeef_AdminDomain, Density)'
		);
	
	container MaxWoningDichtheid := 
		for_each_ne(
			Classifications/Vastgoed/WP2xVSSH/name
			, 'Templates/Densities/MaxWoningDichtheid_T('+string(id(Classifications/Vastgoed/WP2xVSSH))+'[Classifications/Vastgoed/WP2xVSSH], BaseData/StartState/Grondgebruik/Per_AllocDomain/IsWoonlocatie)'
		);
	
	container Zeef_AllocDomain := 
		for_each_ne(
			Time/Zichtjaar/name
			, 'Templates/Beschikbaarheden/Zeef_Zichtjaar_T('+quote(Time/Zichtjaar/name)+', ., Density, Suitability)'
		);
	
	container Suitability        := 
		for_each_ne(
			Time/Zichtjaar/name
			, 'ZichtjaarT('+quote(Time/Zichtjaar/name)+')'
		)
	{
		#include<Geschiktheden.dms>
	}
	
	#include<Dichtheid.dms>
	#include<Zeef_SrcDomain_grid.dms>
	#include<Trede.dms>
	#include<Plannen.dms>
	
	container StateBasisjaar := for_each_nedvn(
		Classifications/Modellering/Standvar_Prep/path
		, 'collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, BaseData/StartState/StateBasisjaar/State/'+Classifications/Modellering/Standvar_Prep/path+')' 
		, CompactedAdminDomain
		, Classifications/Modellering/Standvar_Prep
		, Classifications/Modellering/Standvar_Prep/unit_name
	);
	
	#include<Claims.dms>
	#include<Wind_restricties.dms>
	#include<NietBouwen.dms>
	#include<Maatregelen.dms>
	#include<ZichtjaarT.dms>
	
	container Restricties := 
		for_each_ne(
			Actor/Sector/name
			,'MaakRestrictieCombinaties_T('+quote(Actor/Sector/name)+')'
		);
	
	
	container Stimuli := 
		for_each_ne(
			Actor/Sector/name
			,'MaakStimuliCombinaties_T('+quote(Actor/Sector/name)+')'
		);
		
	Template MaakRestrictieCombinaties_T
	{
		parameter<string> Sector; 
		
		parameter<string> CombinatieRef := ='VariantParameters/VariantK/RestrictiesVariant_'+Sector+'[Variant_rel]';
		container         src           := ='SourceData/Restricties/'+Sector;
		attribute<bool>   Result (AdminDomain) := switch(
													  case(CombinatieRef == 'ZeerHardHardMiddelZacht', src/ZeerHard || src/Hard || src/Middel || src/Zacht)
													, case(CombinatieRef == 'ZeerHardHardMiddel', src/ZeerHard || src/Hard || src/Middel)
													, case(CombinatieRef == 'ZeerHardHard', src/ZeerHard || src/Hard)
													, case(CombinatieRef == 'ZeerHard', src/ZeerHard)
													, case(CombinatieRef == 'HardMiddelZacht', src/Hard || src/Middel || src/Zacht)
													, case(CombinatieRef == 'HardMiddel', src/Hard || src/Middel)
													, case(CombinatieRef == 'Hard', src/Hard || src/Middel)
													, case(CombinatieRef == 'MiddelZacht', src/Middel || src/Zacht)
													, case(CombinatieRef == 'Middel', src/Middel)
													, case(CombinatieRef == 'Zacht', src/Zacht)
													, const(FALSE, AdminDomain)
												);
	}
	
	Template MaakStimuliCombinaties_T
	{
		parameter<string> Sector;
		//
		parameter<string> CombinatieRef := ='VariantParameters/VariantK/StimuliVariant_'+Sector+'[Variant_rel]';
		container         src           := ='SourceData/Stimuli/'+Sector;
		attribute<bool>   Result (AdminDomain) := switch(
													  case(CombinatieRef == 'HardMiddelZacht', src/Hard || src/Middel || src/Zacht)
													, case(CombinatieRef == 'HardMiddel', src/Hard || src/Middel)
													, case(CombinatieRef == 'Hard', src/Hard || src/Middel)
													, case(CombinatieRef == 'MiddelZacht', src/Middel || src/Zacht)
													, case(CombinatieRef == 'Middel', src/Middel)
													, case(CombinatieRef == 'Zacht', src/Zacht)
													, const(FALSE, AdminDomain)
												);
	}
}