container ExportSettings
{
	container GitImpl
	{
		parameter<String> PD                := expand(., '%projDir%');
		parameter<String> DOS_PD            := replace(PD, '/', '\\');

		parameter<String> SwitchDriveCmd    := substr(DOS_PD, 0, 2);
		parameter<String> CdCmd             := 'cd '+DOS_PD;
		parameter<String> DescrCmd          := 'git describe --all > git.txt'; //hoofdletter gevoelig, alles moet lowercase zijn!
		parameter<String> StatusCmd         := 'git status >> git.txt';
		parameter<String> HashCmd           := 'git rev-parse HEAD >> git.txt';
		parameter<String> RevisionInfoCmds  := SwitchDriveCmd + ' && ' + CdCmd + ' && ' + DescrCmd + ' && ' + StatusCmd + ' && ' + HashCmd;
		parameter<UInt32> WriterCode        := exec_ec(Expand(., '%env:ComSpec%'), '/c ' + RevisionInfoCmds, PD);

		parameter<String> RevisionInfo_temp : StorageName = "%ProjDir%/git.txt", StorageType = "str";
		parameter<String> ErrorMsg          := 'Error '+string(GitImpl/WriterCode)+' while producing %ProjDir%/git.txt';
	}
	container SvnImpl
	{
		parameter<String> RevisionInfoCmd   := Replace(Expand(., 'SubWCRev %RSo_DataDir% > %RSo_DataDir%/SubWCRevData.str'), '/', '\\');
		parameter<UInt32> WriterCode        := exec_ec(Expand(., '%env:ComSpec%'), '/c ' + RevisionInfoCmd, Expand(., '%RSo_DataDir%'));

		parameter<String> RevisionInfo_temp : StorageName = "%RSo_DataDir%/SubWCRevData.str";
		parameter<String> ErrorMsg          := 'Error '+string(SvnImpl/WriterCode)+' while producing %RSo_DataDir%/SubWCRevData.str';
	}
	container MetaInfo
	{
		parameter<String> Filename : ='%storageBasename%.xml';
		parameter<String> FileType : ='xml'; // default is 'ini' but ini files cannot be used well to store multi-line properties such as error messages of inproperly configured properties
		
		container Contents
		{
			container Software
			{
				parameter<String> GeoDMSVersion := string(GeoDmsMajorVersionNumber()) + '.' +  string(GeoDmsMinorVersionNumber())  +'.'  +  string(GeoDmsPatchNumber());
			}
			
			container Config
			{
				parameter<String> FullName := '=PropValue(this, '+Quote('FullName')+')';
				parameter<String> Expr     := '=PropValue(this, '+Quote('Expr'    )+')';
				parameter<String> RunFile  := expand(.,'%configDir%')+'.dms';
			}
			
			container Environment
			{
				parameter<String> Processor    := expand(., '%env:PROCESSOR_idENTIFIER%');
				parameter<String> User         := expand(., '%env:USERNAME%');
				parameter<String> Computername := expand(., '%env:COMPUTERNAME%');
			}
			
			container Git
			{
				parameter<String> RevisionInfo  :=  = (GitImpl/WriterCode==0) ? 'GitImpl/RevisionInfo_temp' : 'GitImpl/ErrorMsg';
			}
			container Svn
			{
				parameter<String> RevisionInfo  :=  = (SvnImpl/WriterCode==0) ? 'SvnImpl/RevisionInfo_temp' : 'SvnImpl/ErrorMsg';
			}
			container Parameters
			{
				parameter<String> Scenario_name                                 := /Scenario_name;
				parameter<String> Variant_name                                  := /Variant_name;
				parameter<String> SectorAllocRegios                             := asList(/VariantParameters/SectorAllocRegio/name, ',');
				parameter<String> Subsector_rels                                := asList(/CaseClassifications/StandVar/Subsector/ExportName, ',');
				parameter<String> LU_ModelTypes                                 := asList(/Classifications/Actor/LU_ModelType/ExportName, ',');
				parameter<String> AlleenEindjaar                                := string(ModelParameters/AlleenEindjaar);
				parameter<String> AdminDomain                                   := string(ModelParameters/Advanced/AdminDomain_ref);
				parameter<String> AllocDomain                                   := string(ModelParameters/Advanced/AllocDomain_ref);
				parameter<String> Suitability_ref                               := string(ModelParameters/Wonen/Suitability_ref);
				parameter<String> grondproductie_kosten_Variant                 := string(ModelParameters/Wonen/grondproductie_kosten_Variant);
				parameter<String> Model_StartYear                               := string(ModelParameters/Model_StartYear);
				parameter<String> Model_FinalYear                               := string(ModelParameters/Model_FinalYear);
				parameter<String> BAG_RecentYear                                := string(ModelParameters/BAG_RecentYear);
				parameter<String> LISA_StartYear                                := string(ModelParameters/LISA_StartYear);
				parameter<String> BGT_file_date                                 := string(ModelParameters/BGT_file_date);
				parameter<String> BRT_file_date                                 := string(ModelParameters/BRT_file_date);
				parameter<String> Default_NrOfIters                             := string(ModelParameters/Default_NrOfIters);
				parameter<String> NrOfIters_Wind                                := string(ModelParameters/Wind/NrOfIters_Wind);
				parameter<String> Default_NrOfSequences                         := string(ModelParameters/Default_NrOfSequences);
				parameter<String> Windpotentie_StempelAan                       := string(ModelParameters/Wind/Windpotentie_StempelAan);
				parameter<String> WindmolenAfschrijving                         := string(ModelParameters/Wind/WindmolenAfschrijving);
				parameter<String> Type_m2perBaan                                := string(ModelParameters/Werken/Type_m2perBaan);
				parameter<String> m2BVO_job_Kantoor_PreCORONA                   := string(ModelParameters/Werken/m2BVO_job_Kantoor_PreCORONA);
				parameter<String> Thuiswerk_verdikking_ook_op_bestaandekantoren := string(ModelParameters/Werken/Thuiswerk_verdikking_ook_op_bestaandekantoren);
				parameter<String> Groeifactor_CommercieelVastgoed_Kantoor       := string(ModelParameters/Werken/Groeifactor_CommercieelVastgoed/Kantoor);
				parameter<String> Groeifactor_CommercieelVastgoed_industrie     := string(ModelParameters/Werken/Groeifactor_CommercieelVastgoed/industrie);
				parameter<String> Groeifactor_CommercieelVastgoed_winkel        := string(ModelParameters/Werken/Groeifactor_CommercieelVastgoed/winkel);
				parameter<String> Verwervingskosten_NietWoningen                := string(ModelParameters/Wonen/Verwervingskosten/NietWoningen);
				parameter<String> Sloopkosten_Rijtjeswoning                     := string(ModelParameters/Wonen/Sloopkosten/Rijtjeswoning);
				parameter<String> Sloopkosten_Twee_onder_1_kap                  := string(ModelParameters/Wonen/Sloopkosten/Twee_onder_1_kap);
				parameter<String> Sloopkosten_Vrijstaand                        := string(ModelParameters/Wonen/Sloopkosten/Vrijstaand);
				parameter<String> Sloopkosten_Appartement                       := string(ModelParameters/Wonen/Sloopkosten/Appartement);
				parameter<String> Sloopkosten_Kantoor                           := string(ModelParameters/Wonen/Sloopkosten/Kantoor);
				parameter<String> Bouwkosten_Huurwoningen                       := asList(string(ModelParameters/Wonen/Bouwkosten/Huurwoningen),',');
				parameter<String> Bouwkosten_Koopwoningen                       := asList(string(ModelParameters/Wonen/Bouwkosten/Koopwoningen),',');
				parameter<String> Hoogbouwgrens                                 := string(ModelParameters/Wonen/Hoogbouwgrens);
				parameter<String> Bouwlaaghoogte                                := string(ModelParameters/Wonen/Bouwlaaghoogte);
				parameter<String> VormfactorEengezins                           := string(ModelParameters/Wonen/VormfactorEengezins);
				parameter<String> VormfactorMeergezins                          := string(ModelParameters/Wonen/VormfactorMeergezins);
				parameter<String> VormfactorHoogbouw                            := string(ModelParameters/Wonen/VormfactorHoogbouw);
				parameter<String> FractieUitgeefbaar                            := string(ModelParameters/Wonen/FractieUitgeefbaar);
				parameter<String> FractieUitgeefbaarTinyHouses                  := string(ModelParameters/Wonen/FractieUitgeefbaarTinyHouses);
				parameter<String> MaximaleDiepteAangepastBouwen                 := string(ModelParameters/Wonen/MaximaleDiepteAangepastBouwen);
				parameter<String> MaxBodemdaling                                := string(ModelParameters/Wonen/MaxBodemdaling);
				parameter<String> Wind_aantal_stempel_in1richting               := string(ModelParameters/Wind/aantal_stempel_in1richting);
				parameter<String> Wind_afstand_offset_stempel                   := string(ModelParameters/Wind/afstand_offset_stempel);
				// parameter<String> Wind_minAaneengeslotenWindmolens              := string(ModelParameters/Wind/minAaneengeslotenWindmolens);
				parameter<String> Wind_max_aantal_rijen_zonder_tussenruimte     := string(ModelParameters/Wind/max_aantal_rijen_zonder_tussenruimte);
				parameter<String> Wind_rijkolom_tussenruimte                    := string(ModelParameters/Wind/rijkolom_tussenruimte);
				// parameter<String> Wind_lijnOrientatie                           := string(ModelParameters/Wind/lijnOrientatie);
				parameter<String> Zon_Vermogen_ref                              := string(ModelParameters/Zon/Vermogen_ref);
				parameter<String> Zon_FractieVermogenHaIndienZonCombinerenMetBestaandGroen := string(ModelParameters/Zon/FractieVermogenHaIndienZonCombinerenMetBestaandGroen);
				parameter<String> Zon_Vollasturen_zonnepaneel                   := string(ModelParameters/Zon/Vollasturen_zonnepaneel);
				parameter<String> Zon_Vermogen_ha_laag                          := string(ModelParameters/Zon/Vermogen_ha_laag);
				parameter<String> Zon_Vermogen_ha_midden                        := string(ModelParameters/Zon/Vermogen_ha_midden);
				parameter<String> Zon_Vermogen_ha_hoog                          := string(ModelParameters/Zon/Vermogen_ha_hoog);
				parameter<String> Zon_minimale_opp_berm                         := string(ModelParameters/Zon/minimale_opp_berm);
				parameter<String> Zon_minimale_opp_gras                         := string(ModelParameters/Zon/minimale_opp_gras);
				parameter<String> Zon_minimale_opp_groen                        := string(ModelParameters/Zon/minimale_opp_groen);
				parameter<String> Zon_minimale_opp_parkeervlak                  := string(ModelParameters/Zon/minimale_opp_parkeervlak);
				parameter<String> Zon_minimale_IQ                               := string(ModelParameters/Zon/minimale_IQ);
			}
		}
	}
}