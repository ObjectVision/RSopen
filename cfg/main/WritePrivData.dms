container WritePrivData : using = "Classifications;Geography"
{
	container Grondposities
	{
		parameter<String> Generate := 'Ready', ExplicitSuppliers = "PrivData/Grondposities/Write_Per_AllocDomain_EigendomK_rel;PrivData/Grondposities/Write_Per_AdminDomain_EigendomK_rel";
	}
	
	container Claims := 
		for_each_ne(
			Modellering/Scenario_x_Variant_x_Zichtjaar/name
			, 'Gen_T('+quote(Modellering/Scenario_x_Variant_x_Zichtjaar/name)+')'
		)
	{
		parameter<String> Generate        := = asList(Modellering/Scenario_x_Variant_x_Zichtjaar/name+'/Generate', '+ ');
	}
		
	Template Gen_T 
	{
		parameter<String> ScenVarJaar_name;
		///
		parameter<String> Scenario_name  := rjoin(lowercase(ScenVarJaar_name), lowercase(Modellering/Scenario_x_Variant_x_Zichtjaar/name), Modellering/Scenario_x_Variant_x_Zichtjaar/Scenario_name);
		parameter<String> Variant_name   := rjoin(lowercase(ScenVarJaar_name), lowercase(Modellering/Scenario_x_Variant_x_Zichtjaar/name), Modellering/Scenario_x_Variant_x_Zichtjaar/Variant_name);
		parameter<String> Zichtjaar_name := rjoin(lowercase(ScenVarJaar_name), lowercase(Modellering/Scenario_x_Variant_x_Zichtjaar/name), Modellering/Scenario_x_Variant_x_Zichtjaar/Zichtjaar_name);

		parameter<String> Generate_Wonen  := 'Ready', ExplicitSuppliers = "=asList('PrivData/Claims/AggregateToRegions/'+Zichtjaar_name+'/Woningen/'+Scenario_name+'/'+Variant_name+'/AllocRegios/'+Modellering/AllocRegiosK/name+'/Write',';')";
		parameter<String> Generate_Werken := 'Ready', ExplicitSuppliers = "=asList('PrivData/Claims/AggregateToRegions/'+Zichtjaar_name+'/Banen/'+Scenario_name+'/'+Variant_name+'/AllocRegios/'+Modellering/AllocRegiosK/name+'/Write',';')";
		parameter<String> Generate        := Generate_Wonen + Generate_Werken; 
	}
	
	container LISA
	{
		unit<UInt32> Read_CSV
		: StorageName = "='%PrivDataDir%/LISA/LISA'+string(ModelParameters/LISA_FileYear)+'_'+string(ModelParameters/LISA_StartYear)+'_bas.csv'" 
		, StorageType = "gdal.vect"
		, Source      = "interne aanlevering binnen PBL 28 april 2025 LISA2023_1996tm2023_pnt.zip 28 bestanden 1996-2023"
		, url         = "%PrivDataDir%/LISA/LISA_2023_toelichting.pdf"
		{
			attribute<rdc_meter>             geometry      := point_xy(float64(x_alt), float64(y_alt), rdc_meter);
			attribute<UInt32>                banen_u32     := uint32(banen);
			attribute<String>                SBI08;
			
			
			attribute<Actor/TXLJobs7>        TXLJobs7_rel            := rjoin(lowercase(SBI08), lowercase(Actor/SBI08/SBI2008), Actor/SBI08/TXLJobs7_rel); 
			attribute<Gemeente>              Gem_rel                 := point_in_polygon(geometry, gemeente/geometry);
			attribute<Gemeente_x_TXLJobs7>   Gemeente_x_TXLJobs7_rel := combine_Data(Gemeente_x_TXLJobs7, Gem_rel, TXLJobs7_rel);
		}
	
		unit<UInt32> Make_fss := Read_CSV
		, StorageName = "='%PrivDataDir%/LISA/LISA'+string(ModelParameters/LISA_StartYear)+'.fss'"
		, IntegrityCheck = "lowercase(/ModelParameters/StudyArea) == lowercase('Nederland')"
		{
			attribute<rdc_meter>             geometry := Read_CSV/geometry;
			attribute<UInt32>                banen    := Read_CSV/banen_u32;
			attribute<String>                SBI08    := Read_CSV/SBI08;
		}
		
		unit<UInt32> fss
		: StorageName = "='%PrivDataDir%/LISA/LISA'+string(ModelParameters/LISA_StartYear)+'.fss'"
		, StorageReadOnly = "TRUE"
		{
			attribute<rdc_meter>             geometry;
			attribute<UInt32>                banen               : IntegrityCheck = "LiggenErPuntenBinnenStudyArea", Descr = "Check om ervoor te zorgen dat de geometry wel klopt. fss controleert niet goed op wijzigingen. Ingevoerd nadat fss geom fpoint was, maar dpoint moest worden. Dan krijg je corrupte waarden.";
			attribute<String>                SBI08;
			attribute<Actor/TXLJobs7>        TXLJobs7_rel        := rjoin(lowercase(SBI08), lowercase(Actor/SBI08/SBI2008), Actor/SBI08/TXLJobs7_rel); 
			attribute<Actor/TXLJobs7_noData> TXLJobs7_noData_rel := rjoin(TXLJobs7_rel, Actor/TXLJobs7_noData/TXLJobs7_rel, id(Actor/TXLJobs7_noData));
			
			parameter<Bool>                  LiggenErPuntenBinnenStudyArea := sum_uint32(IsDefined(point_in_polygon(geometry, rdc_meter/geometry))) > 0;
	
			unit<UInt32> pand_domain     := ='SourceData/Vastgoed/BAG/PerJaar/Y'+string(ModelParameters/LISA_StartYear)+'/pand'
			{
				attribute<.>   Pand_rel (..) := point_in_polygon(../geometry, geometry);
				container Per_TXLJobs7 :=
					for_each_nedv(
						Actor/TXLJobs7/name
						, 'sum(int32(banen) * int32(TXLJobs7_rel == '+string(id(Actor/TXLJobs7))+'[Actor/TXLJobs7]), Pand_rel)[Job]'
						, pand_domain
						, Job
					);
			}
			
			container Per_TXLJobs7_AdminDomain :=
				for_each_nedv(
					Actor/TXLJobs7/name
					, 'sum(pand_domain/Per_TXLJobs7/'+Actor/TXLJobs7/name+'[pand_domain/ToedelingsMatrix/Pand_rel] * pand_domain/ToedelingsMatrix/ToedelingPand, pand_domain/ToedelingsMatrix/AdminDomain_rel)'
					, AdminDomain
					, Job
				);
		}
		
		//tbv Alt LISA
		unit<UInt32> Gemeente := ='/SourceData/RegioIndelingen/CBS/Y'+string(ModelParameters/LISA_StartYear)+'/Gemeente'
		{
			attribute<.> LISA_Gem_rel := point_in_polygon(Read_CSV/geometry, geometry);
		}
		
		unit<UInt32> Gemeente_x_TXLJobs7 := combine(Gemeente, Actor/TXLJobs7)
		{
			attribute<String>         gem_naam     := Gemeente/Label[Gem_rel];
			attribute<UInt32>         gem_nr       := Gemeente/gem_nr[Gem_rel];
			attribute<Gemeente>       Gem_rel      := first_rel;
			attribute<Actor/TXLJobs7> TXLJobs7_rel := second_rel;
			attribute<String>         sector_naam  := Actor/TXLJobs7/name[TXLJobs7_rel];
		}
		
		unit<UInt32> Make_Alt_LISA_gem_CSV := Gemeente_x_TXLJobs7
		, StorageName = "='%RSo_DataDir%/Actoren/LISA/LISA'+string(ModelParameters/LISA_StartYear)+'_Gem_RuimteScanner.csv'" 
		, StorageType = "gdalwrite.vect"
		{
			attribute<String>          gemeente_naam := Gemeente_x_TXLJobs7/gem_naam;
			attribute<UInt32>          gemeente_nr   := Gemeente_x_TXLJobs7/gem_nr;
			attribute<String>          sector_naam   := Gemeente_x_TXLJobs7/Sector_naam;
			attribute<UInt32>          banen         := sum(Read_CSV/banen_u32, Read_CSV/Gemeente_x_TXLJobs7_rel);
		}
	}	
}