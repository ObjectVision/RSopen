container WritePrivData : using = "Classifications;Geography"
, Descr = "Hoofdbestand dat privdata (LISA, Claims, Grondposities) inleest en omzet naar interne formats"
{
	container Grondposities
	{
		parameter<String> Generate := 'Ready', ExplicitSuppliers = "PrivData/Grondposities/Write_Per_AllocDomain_EigendomK_rel;PrivData/Grondposities/Write_Per_AdminDomain_EigendomK_rel", Descr = "Triggerparameter om grondposities-output te genereren";
	}
	
	container Claims := 
		for_each_ne(
			Modellering/Scenario_x_Variant_x_Zichtjaar/name
			, 'Gen_T('+quote(Modellering/Scenario_x_Variant_x_Zichtjaar/name)+')'
		)
	{
		parameter<String> Generate        := = asList(Modellering/Scenario_x_Variant_x_Zichtjaar/name+'/Generate', '+ '), Descr = "Verzamelt generate-flags per scenario/variant/zichtjaar";
	}
		
	Template Gen_T 
	{
		parameter<String> ScenVarJaar_name;
		///
		parameter<String> Scenario_name  := rjoin(lowercase(ScenVarJaar_name), lowercase(Modellering/Scenario_x_Variant_x_Zichtjaar/name), Modellering/Scenario_x_Variant_x_Zichtjaar/Scenario_name), Descr = "Samengevoegde sleutel voor scenario";
		parameter<String> Variant_name   := rjoin(lowercase(ScenVarJaar_name), lowercase(Modellering/Scenario_x_Variant_x_Zichtjaar/name), Modellering/Scenario_x_Variant_x_Zichtjaar/Variant_name), Descr = "Samengevoegde sleutel voor variant";
		parameter<String> Zichtjaar_name := rjoin(lowercase(ScenVarJaar_name), lowercase(Modellering/Scenario_x_Variant_x_Zichtjaar/name), Modellering/Scenario_x_Variant_x_Zichtjaar/Zichtjaar_name), Descr = "Samengevoegde sleutel voor zichtjaar";

		parameter<String> Generate_Wonen  := 'Ready', ExplicitSuppliers = "=asList('PrivData/Claims/AggregateToRegions/'+Zichtjaar_name+'/Woningen/'+Scenario_name+'/'+Variant_name+'/AllocRegios/'+Modellering/AllocRegiosK/name+'/Write',';')", Descr = "Trigger om woning-aggregaties te genereren";
		parameter<String> Generate_Werken := 'Ready', ExplicitSuppliers = "=asList('PrivData/Claims/AggregateToRegions/'+Zichtjaar_name+'/Banen/'+Scenario_name+'/'+Variant_name+'/AllocRegios/'+Modellering/AllocRegiosK/name+'/Write',';')", Descr = "Trigger om werkgelegenheids-aggregaties te genereren";
		parameter<String> Generate        := Generate_Wonen + Generate_Werken, Descr = "Combinatie van woon- en werk-triggerflags"; 
	}
	
	container LISA
	{
		unit<UInt32> Read_CSV
		: StorageName = "='%PrivDataDir%/LISA/LISA'+string(ModelParameters/LISA_FileYear)+'_'+string(ModelParameters/LISA_StartYear)+'_bas.csv'" 
		, StorageType = "gdal.vect"
		, Source      = "interne aanlevering binnen PBL 28 april 2025 LISA2023_1996tm2023_pnt.zip 28 bestanden 1996-2023"
		, url         = "%PrivDataDir%/LISA/LISA_2023_toelichting.pdf"
		, Descr       = "Leest de aangeleverde LISA CSV met punten en basisattributen"
		{
			attribute<rdc_meter>             geometry      := point_xy(float64(x_alt), float64(y_alt), rdc_meter), Descr = "Puntgeometrie in RD-coördinaten (rdc_meter)";
			attribute<UInt32>                banen_u32     := uint32(banen), Descr = "Aantal banen uit bronbestand als 32-bit integer";
			attribute<String>                SBI08         : Descr = "SBI08 sectorcode uit bronbestand";
			
			//attribute<Actor/TXLJobs7>        TXLJobs7_rel            := rjoin(lowercase(SBI08), lowercase(Actor/SBI08/SBI2008), Actor/SBI08/TXLJobs7_rel), Descr = "Relatie naar TXLJobs7 gebaseerd op SBI08";
			//attribute<Gemeente>              Gem_rel                 := point_in_polygon(geometry, gemeente/geometry), Descr = "Gemeente-relatie op basis van geografische relatie";
			//attribute<Gemeente_x_TXLJobs7>   Gemeente_x_TXLJobs7_rel := combine_Data(Gemeente_x_TXLJobs7, Gem_rel, TXLJobs7_rel), Descr = "Combinatie-relatie Gemeente x TXLJobs7 voor aggregaties";
		}
	
		unit<UInt32> Make_fss := Read_CSV
		, StorageName = "='%PrivDataDir%/LISA/LISA'+string(ModelParameters/LISA_StartYear)+'.fss'"
		, IntegrityCheck = "lowercase(/ModelParameters/StudyArea) == lowercase('Nederland')"
		, Descr = "Converteert ingelezen CSV naar intern .fss formaat (mag alleen als studyarea == Nederland)"
		{
			attribute<rdc_meter>             geometry := Read_CSV/geometry, Descr = "Doorgegeven puntgeometrie uit Read_CSV";
			attribute<UInt32>                banen    := Read_CSV/banen_u32, Descr = "Doorgegeven banen-veld uit Read_CSV";
			attribute<String>                SBI08    := Read_CSV/SBI08, Descr = "Doorgegeven SBI08 uit Read_CSV";
		}
		
		unit<UInt32> fss
		: StorageName = "='%PrivDataDir%/LISA/LISA'+string(ModelParameters/LISA_StartYear)+'.fss'"
		, StorageReadOnly = "TRUE"
		, Descr = "Gelezen .fss bestand met LISA punten; read-only zodat downstream replicatie consistent blijft"
		{
			attribute<rdc_meter>             geometry            : Descr = "Puntgeometrie uit fss";
			attribute<UInt32>                banen               : IntegrityCheck = "LiggenErPuntenBinnenStudyArea", Descr = "Aantal banen; extra check dat punten binnen studiegebied liggen";
			attribute<String>                SBI08               : Descr = "SBI08 sectorcode uit fss";
			attribute<Actor/TXLJobs7>        TXLJobs7_rel        := rjoin(lowercase(SBI08), lowercase(Actor/SBI08/SBI2008), Actor/SBI08/TXLJobs7_rel), Descr = "Relatie naar TXLJobs7 op basis van SBI08 (uit fss)"; 
			attribute<Actor/TXLJobs7_noData> TXLJobs7_noData_rel := rjoin(TXLJobs7_rel, Actor/TXLJobs7_noData/TXLJobs7_rel, id(Actor/TXLJobs7_noData)), Descr = "Fallback-relatie voor sectoren zonder gegevens";
			
			parameter<Bool>                  LiggenErPuntenBinnenStudyArea := sum_uint32(IsDefined(point_in_polygon(geometry, rdc_meter/geometry))) > 0, Descr = "Controle of er punten binnen het studiegebied vallen";
	
			unit<UInt32> pand_domain     := ='SourceData/Vastgoed/BAG/PerJaar/Y'+string(ModelParameters/LISA_StartYear)+'/pand'
			, Descr = "Pand-domein uit BAG voor het referentiejaar"
			{
				attribute<.>   Pand_rel (..) := point_in_polygon(../geometry, geometry), Descr = "Relatie van LISA punt naar pand";
				container Per_TXLJobs7 := 
					for_each_nedv(
						Actor/TXLJobs7/name
						, 'sum(int32(banen) * int32(TXLJobs7_rel == '+string(id(Actor/TXLJobs7))+'[Actor/TXLJobs7]), Pand_rel)[Job]'
						, pand_domain
						, Job
					), Descr = "Per-TXLJobs7 aggregatie op pand-niveau";
			}
			
			container Per_TXLJobs7_AdminDomain := 
				for_each_nedv(
					Actor/TXLJobs7/name
					, 'sum(pand_domain/Per_TXLJobs7/'+Actor/TXLJobs7/name+'[pand_domain/ToedelingsMatrix/Pand_rel] * pand_domain/ToedelingsMatrix/ToedelingPand, pand_domain/ToedelingsMatrix/AdminDomain_rel)'
					, AdminDomain
					, Job
				), Descr = "Aggregatie van banen per AdminDomain op basis van pand-toedeling";
		}
		
		//tbv Alt LISA
		unit<UInt32> Gemeente := ='/SourceData/RegioIndelingen/CBS/Y'+string(ModelParameters/LISA_StartYear)+'/Gemeente'
		, Descr = "Gemeente-gebiedsindeling voor het referentiejaar"
		{
			attribute<.> LISA_Gem_rel := point_in_polygon(Read_CSV/geometry, geometry), Descr = "Relatie van punten naar gemeente";
		}
		
		unit<UInt32> Gemeente_x_TXLJobs7 := combine(Gemeente, Actor/TXLJobs7)
		, Descr = "Combinatietabel van gemeente en TXLJobs7 voor alternatieve LISA-output"
		{
			attribute<String>         gem_naam     := Gemeente/Label[Gem_rel], Descr = "Gemeentenaam via relatie";
			attribute<UInt32>         gem_nr       := Gemeente/gem_nr[Gem_rel], Descr = "Gemeentenummer via relatie";
			attribute<Gemeente>       Gem_rel      := first_rel, Descr = "Relatie naar gemeente (first_rel)";
			attribute<Actor/TXLJobs7> TXLJobs7_rel := second_rel, Descr = "Relatie naar TXLJobs7 (second_rel)";
			attribute<String>         sector_naam  := Actor/TXLJobs7/name[TXLJobs7_rel], Descr = "Naam van de sector/beroep (TXLJobs7)";
		}
		
		unit<UInt32> Make_Alt_LISA_gem_CSV := Gemeente_x_TXLJobs7
		, StorageName = "='%RSo_DataDir%/Actoren/LISA/LISA'+string(ModelParameters/LISA_StartYear)+'_Gem_RuimteScanner.csv'" 
		, StorageType = "gdalwrite.vect"
		, Descr = "Schrijft alternatieve LISA-uitvoer per gemeente x sector naar CSV"
		{
			attribute<String>          gemeente_naam := Gemeente_x_TXLJobs7/gem_naam, Descr = "Gemeentenaam voor uitvoerbestand";
			attribute<UInt32>          gemeente_nr   := Gemeente_x_TXLJobs7/gem_nr, Descr = "Gemeentenummer voor uitvoerbestand";
			attribute<String>          sector_naam   := Gemeente_x_TXLJobs7/Sector_naam, Descr = "Sectornaam voor uitvoerbestand";
			attribute<UInt32>          banen         := sum(Read_CSV/banen_u32, Read_CSV/Gemeente_x_TXLJobs7_rel), Descr = "Totaal aantal banen per gemeente x sector (geaggregeerd)";
		}
	}	
}
