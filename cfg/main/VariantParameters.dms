////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Dit is RSOpen, de open source versie van het model RuimteScanner. Het scipt wordt uitgegeven onder GNU-GPL licentie.
//
// RSOpen is ontwikkeld door PBL Planbureau voor de Leefomgeving, i.s.m Object Vision B.V. en VU Vrije Universiteit Amsterdam.
// Opdrachtgever/ontwikkelaar PBL: Bart Rijken
// Contactpersoon/ontwikkelaar Object Vision B.V.: Jip Claassens (jclaassens@objectvision.nl)
// Contacpersoon PBL: Bas van Bemmel (Bas.vanBemmel@pbl.nl)
//
// Deze file specificeert de variantparameters: parameters die voor elke variant verschillen, maar, gegeven een variant, hetzelfde zijn voor de scenario's.
// De configuratie bevat vijf (beleids)varianten: Business As Usual (BAU), Snelle Wereld (SW), GroenLand (GL), MondiaalOndernemend (MO), RegionaalGeworteld (RG).
// De BAU variant is uitgewerkt voor de 'Planmonitor NOVI 2023' (Kuiper, Rijken, Van Bemmel, 2023) : https://www.pbl.nl/publicaties/planmonitor-novi-2023
// De overige varianten zijn afkomstig uit de 'Ruimtelijke Verkenning 2023' (PBL, 2023) : https://www.pbl.nl/publicaties/planmonitor-novi-2023
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

container VariantParameters: using = "Classifications"
{
	parameter<string> Variant_name  := ../Variant_name;
	
	#include<VariantK.dms>
	#include<ReedsBenut.dms>
	#include<Tredes.dms>
	#include<Ontwikkelpakketten.dms>
	#include<FractiesGroenInWerken.dms>
	#include<FractiesGroenInVerblijfsrecreatie.dms>
	
	parameter<string> Recreatie_AllocRegio_name := = 'VariantK/Verblijfsrecreatie_AllocRegio_name[VariantK/V/'+Variant_name+']';
	
	unit<uint8> Sector     := Classifications/Actor/Sector;
	unit<uint8> AllocRegio := Classifications/Modellering/AllocRegiosK;
	
	unit<uint8> SectorAllocRegio := range(uint8, 0b, 6b) //1b
	{
		// Volgorde waarin de sectoren gealloceerd worden, incluisef het schaalniveau waarop dit (achtereenvolgens) gebeurt (de allocregio's).
		unit<UInt32> Elements := Range(uint32, 0, nrAttr * #.) 
		{
			// Gelijke sectoren moeten direct na elkaar komen. van klein naar grote alloc regios. Teneinde verdringing zo lokaal mogelijk op te lossen. Anders kan wel, maar geeft wellicht onwenselijke resultaten.
			attribute<String> Text: [
			// Name                , AllocRegio            , UseInLaterSeq , AantalIters        , AantalItersInLaterSeq, SortOrder
			  'Wonen'              , 'NVM'                 ,  'TRUE'       ,'Default_NrOfIters' ,'Default_NrOfIters','1'
			 // ,'Wonen'              , 'COROP'               , 'FALSE'       ,'Default_NrOfIters' ,'Default_NrOfIters','1'
			 // ,'Wonen'              , 'Provincie'           , 'FALSE'       ,'Default_NrOfIters' ,'Default_NrOfIters','1'
			 ,'Werken'             , 'NVM'                 ,  'TRUE'       ,'Default_NrOfIters' ,'Default_NrOfIters','2'
			 // ,'Werken'             , 'COROP'               , 'FALSE'       ,'Default_NrOfIters' ,'Default_NrOfIters','2'
			 // ,'Werken'             , 'Provincie'           , 'FALSE'       ,'Default_NrOfIters' ,'Default_NrOfIters','2'
			 ,'Zon'                , 'Provincie'           ,  'TRUE'       ,'Default_NrOfIters' ,'Default_NrOfIters','3'
			 ,'Verblijfsrecreatie' , 'Rec_AllocRegio_name' ,  'TRUE'       ,'Default_NrOfIters' ,'Default_NrOfIters','4'
			 ,'Wind'               , 'Provincie'           ,  'TRUE'       ,'NrOfIters_Wind'    ,'NrOfIters_Wind'   ,'5'
			 // ,'Wind'               , 'NL'                  , 'FALSE'       ,'Default_NrOfIters' ,'Default_NrOfIters','5'
			 ,'Landbouw'           , 'Provincie'           , 'FALSE'       ,'Default_NrOfIters' ,'Default_NrOfIters','6'
			];
		}
		
		attribute<string>     Default_SectorName    := Elements/Text[value(uInt32(id(.))* nrAttr + 0, Elements)];
		attribute<Sector>     Default_Sector        := ='union_data(.,'+AsList('Sector/V/'+Default_SectorName, ',')+')';
		attribute<string>     Default_RegioName     := replace(Elements/Text[value(uInt32(id(.))* nrAttr + 1, Elements)], 'Rec_AllocRegio_name', Recreatie_AllocRegio_name);
		attribute<AllocRegio> Default_Regio         := ='union_data(.,'+AsList('AllocRegio/V/'+Default_RegioName, ',')+')';
		
		// Kan een sector verdrongen worden door daarop volgende sectoren? In dat geval moet deze sector in een volgende sequence opnieuw worden doorlopen. In dat geval moet deze sector TRUE krijgen.
		// Verdringing wordt vervolgens zo lokaal mogelijk opgelost, en dus krijgt de kleinste regio per sector een TRUE.
		attribute<bool>       UseInLaterSequences   := Elements/Text[value(uInt32(id(.))* nrAttr + 2, Elements)][bool]; 
		attribute<uint8>      AantalIters           := uint8(replace(Elements/Text[value(uInt32(id(.))* nrAttr + 3, Elements)], 'Default_NrOfIters', string(ModelParameters/Default_NrOfIters), 'NrOfIters_Wind', string(ModelParameters/NrOfIters_Wind)));
		attribute<uint8>      AantalItersInLaterSeq := uint8(replace(Elements/Text[value(uInt32(id(.))* nrAttr + 4, Elements)], 'Default_NrOfIters', string(ModelParameters/Default_NrOfIters), 'NrOfIters_Wind', string(ModelParameters/NrOfIters_Wind)));
		attribute<string>     SortOrder             := Elements/Text[value(uInt32(id(.))* nrAttr + 5, Elements)];
		
		attribute<AllocRegio> AllocRegio_rel        := Default_Regio;
		attribute<Sector>     Sector_rel            := Default_Sector;
		
		attribute<string>     name                  := AllocRegio_name +'_'+ Sector_name;
		attribute<string>     SectorAllocRegio_name := Sector_name +'_'+ AllocRegio_name;
		attribute<string>     Sector_name           := Sector/name[sector_rel];
		attribute<string>     AllocRegio_name       := AllocRegio/name[AllocRegio_rel];
		attribute<string>     AllocRegio_path       := AllocRegio/path[AllocRegio_rel];
		
		unit<uint8> WonenAllocRegio := select_with_org_rel(Sector_rel == Sector/V/Wonen);
		
		unit<uint8> Uq_AllocRegios := unique(AllocRegio_name)
		{
			attribute<string> AllocRegio_Name := values;
			attribute<string> AllocRegio_path := rjoin(AllocRegio_Name, ../AllocRegio_name, ../AllocRegio_path);
		}
		unit<uint8> Uq_Sectors := unique(SortOrder + Default_SectorName)
		{
			attribute<string> SectorName                  := substr(values, 1, 99);
			attribute<bool>   IsWonen                     := SectorName == 'Wonen';
			attribute<bool>   IsWerken                    := SectorName == 'Werken';
			attribute<bool>   IsWind                      := SectorName == 'Wind';
			attribute<bool>   IsZon                       := SectorName == 'Zon';
			attribute<bool>   IsVerblijfsrecreatie        := SectorName == 'Verblijfsrecreatie';
			parameter<bool>   HasWonenSector              := any(IsWonen);
			parameter<bool>   HasWerkenSector             := any(IsWerken);
			parameter<bool>   HasWindSector               := any(IsWind);
			parameter<bool>   HasZonSector                := any(IsZon);
			parameter<bool>   HasVerblijfsrecreatieSector := any(IsVerblijfsrecreatie);
		}
		
		parameter<uint32> nrAttr := 6;
	}
}