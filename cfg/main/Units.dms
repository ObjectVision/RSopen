////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Dit is RSOpen, de open source versie van het model RuimteScanner. Het scipt wordt uitgegeven onder GNU-GPL licentie.
//
// RSOpen is ontwikkeld door PBL Planbureau voor de Leefomgeving, i.s.m Object Vision B.V. en VU Vrije Universiteit Amsterdam.
// Opdrachtgever/ontwikkelaar PBL: Bart Rijken
// Contactpersoon/ontwikkelaar Object Vision B.V.: Jip Claassens (jclaassens@objectvision.nl)
// Contacpersoon PBL: Bas van Bemmel (Bas.vanBemmel@pbl.nl)
//
// Deze file bevat een reeks Units, inclusief metriek en relaties. Ze worden in het model gebruikt om:
// 1. te voorkomen dat andersoortige entiteiten op elkaar worden betrokken (Woningen en banen optellen bijv.), en
// 2.  gemakkelijk te kunenn (des)aggregeren, (van GW naar MW bijv). 
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


container Units
{
	unit<float32> meter := BaseUnit('m', float32);
	unit<int32>   NrMeter := BaseUnit('m', int32);
	
	unit<float32> hm := 100.0 * meter;
	unit<float32> km := 1000.0 * meter;
	unit<float32> cm := 0.01 * meter;
	unit<float32> mm := 0.001 * meter;

	unit<float32> meter2   := meter * meter;
	unit<float32> m2_Footprint := meter2;
	unit<int32>   NrMeter2 := NrMeter * NrMeter;
	unit<float32> km2    := km * km;
	unit<float32> ha     := 10000.0 * meter2;
	unit<int32>   NrHa   := 10000 * NrMeter2;
	unit<float32> per_ha := 1.0 / ha;
	
	unit<float32> g      := BaseUnit('g', float32),   Label = "gram", Descr = "SI base unit for weight";
	unit<float32> kg     := 1000 * g;
	
	unit<float32> s   := BaseUnit('s', float32),   Label = "second", Descr = "SI base unit for time";
	unit<float32> sec := BaseUnit('s', float32);
	unit<float32> min := 60 * sec;
	unit<float32> uur := 60 * min;
	unit<float32> dag := 24 * uur;
	
	unit<float32> jaar:= BaseUnit('Yr', float32);
	unit<uint16>  yr  := BaseUnit('Yr', uint16);
	unit<float32> maand := (1.0/12.0) * jaar;
	unit<float32> jaarlijks:= 1.0 / jaar;
	
	unit<float32> mm_dag := mm / dag;
	
	unit<int16>  YearRange     := Range(jaar,  1900s, 2200s);
	unit<int16>  YearDiffRange := Range(jaar, -100s,  100s);
	
//	monetary
	unit<float32> Eur          := BaseUnit('EurO', float32);
	unit<int32>   NrEur        := BaseUnit('EurO', int32);
	unit<float32> kEur         := 1000.0 * Eur;
	unit<float32> mldEur       := 1000000.0 * kEur;
	unit<float32> Eur_m2       := Eur / meter2;
	unit<float32> Eur_m        := Eur / meter;
	unit<float32> Eur_ha       := Eur / ha;
	unit<float32> Eur_object   := Eur / verblijfsobject;
	unit<int32>   NrEur_ha         := NrEur / NrHa;
	unit<int32>   NrEur_Woning     := NrEur / NrWoningen;
	unit<float32> Eur_Woning       := Eur / Woning;
	unit<float32> Eur_jaarlijks    := Eur / jaar;
	unit<float32> Eur_yr           := Eur / jaar;
	unit<float32> Eur_m2_jaarlijks := Eur_m2 / jaar;
	unit<float32> kEur_Ha          := 1000.0 * Eur_Ha;
	unit<float32> mEur_Ha          := 1000.0 * kEur_Ha;
	unit<float32> Eur_Km           := Eur / Km;

	unit<float32> ton              := BaseUnit('ton', float32);
	unit<float32> Eur_ton          := Eur / ton;
	unit<float32> ton_jaarlijks    := ton / jaar;
	unit<float32> ton_ha           := ton / ggHa;
	unit<float32> ton_ha_jaarlijks := ton_ha / jaar;
	unit<float32> ggHa             := 10000.0 * meter * meter; //,       cdf = "Classifications/Hectare/K9/Classes";
	unit<float32> Eur_Ha_jaarlijks := Eur_Ha / jaar;
	unit<float32> Eur_ggHa         := Eur / ggHa;
	unit<float32> meterbd          := BaseUnit('m', float32); //,        cdf = "Classifications/Altitude/bd13K/Classes";
	unit<float32> meterhoogte      := BaseUnit('m', float32); //,        cdf = "Classifications/Altitude/hoogte7K/Classes";


// ============ Actor and Object based Units
	unit<float32> Job         := BaseUnit('Job', float32);
	unit<int32>   NrJobs      := BaseUnit('Job', int32);
	unit<float32> Job_min     := Job / min;
	unit<float32> Job_ha      := Job / ha;
	unit<int32>   FTE         := BaseUnit('FTE', int32);
	unit<float32> Persoon     := BaseUnit('P', float32);
	unit<int32>   NrPersonen  := BaseUnit('P', int32);
	unit<float32> Household       := BaseUnit('HH', float32);
	unit<int32>   NrHouseholds    := BaseUnit('HH', int32);
	unit<float32> Woning          := BaseUnit('W', float32);
	unit<int32>   NrWoningen      := BaseUnit('W', int32);
	unit<int32>   NrWoningenHa    := NrWoningen / NrHa;
	unit<float32> Persoon_Ha      := Persoon / ha;
	unit<float32> Verblijfsobject := BaseUnit('VBO', float32);
	unit<float32> PandUnit        := BaseUnit('Pand', float32);
	unit<float32> vbo_ha          := Verblijfsobject / ha;
	unit<int32>   NrVerblijfsobjecten := BaseUnit('VBO', int32);
	
	unit<float32> Household_Woning  := Household / Woning;
	unit<float32> Woning_Household  := Woning / Household;
	unit<float32> Persoon_Household := Persoon / Household;
	unit<float32> Persoon_Woning    := Persoon / Woning;
	unit<float32> NrWoningen_ha     := NrWoningen  / ha;
	unit<float32> m2_ha             := meter2  / ha;
	unit<float32> NrJobs_ha         := Job     / ha;
	
	unit<float32> Inw_ha           := Persoon / ha;
	unit<float32> m2BVO_job        := m2BVO / Job;
	unit<float32> m2_Job           :=  meter2 / Job;
	unit<float32> m2_Footprint_job := m2_Footprint / Job;
	unit<float32> m2PandFootprint  := meter2;
	unit<float32> m2PandFootprint_job := m2PandFootprint / Job;
	unit<float32> job_m2PandFootprint := Job / m2PandFootprint;
	unit<float32> m2PandFootprint_ha := m2PandFootprint / ha;
	unit<float32> m2_Vbo           := meter2 / Verblijfsobject;
	unit<float32> m2_Woning       := meter2 / Woning;
	unit<float32> Vbo_m2           := Verblijfsobject / meter2;
	unit<float32> ha_Vbo           := ha / Verblijfsobject;
	unit<float32> ha_Woning        := ha / Woning;
	unit<float32> eur_Vbo          := Eur / Verblijfsobject;
	unit<float32> m2_pand          := meter2 / PandUnit;
	unit<float32> m2_FTE           := meter2 / FTE;
	unit<float32> FTE_ha           := NrJobs / ha;
	
	unit<float32> m2PandFootprint_object := m2PandFootprint / Verblijfsobject;
	unit<float32> Ha_object              := Ha / Verblijfsobject;
	
	//
	unit<float32> Terreinoppervlak := meter2;
	unit<float32> m2BVO := meter2; // Bruto Vloeroppervlak
	unit<float32> Woonoppervlak := meter2;  // = GBO = gebruiksoppervlak
	unit<float32> Perceeloppervlak := meter2;  // = GBO = gebruiksoppervlak
	unit<float32> Woonoppervlak_m2BVO := Woonoppervlak / m2BVO; // vormfActor
	unit<float32> Woning_ha := Woning / ha;
	unit<float32> m2BVO_Woning := m2BVO / Woning;
	unit<float32> Woonoppervlak_Woning := Woonoppervlak / Woning;
	unit<float32> FSI := m2BVO / Terreinoppervlak; //FloorSpaceIndex
	unit<float32> GSI := m2PandFootprint / Terreinoppervlak; //GroundSpaceIndex
	unit<float32> Perceeloppervlak_Woning := Perceeloppervlak / Woning;
	//
	
	unit<float32> Ratio   := 1.0 * ha / ha;
	unit<float32> Percent := 100.0 * Ratio;
	
	unit<string>  string_t;
	unit<float32> float32_t;
	unit<bool>    bool_t;
	unit<uint2>   uint2_t;
	unit<uint8>   uint8_t;
	unit<uint16>  uint16_t;
	unit<uint32>  uint32_t;
	
	unit<uint32>   MaatregelK := Classifications/Modellering/MaatregelK;
	
	// Energie
	unit<uint8>   Energielabel := Classifications/Vastgoed/Energielabel;
	unit<float32> Joule  := BaseUnit('joule', float32);
	unit<float32> TJoule := 1000000000000.0 * Joule;
	unit<float32> J      := BaseUnit('J', float32), Label = "Joule", Descr = "SI unit for energy";
	
	unit<float32> kJ    := 1000 * J;
	unit<float32> MJ    := 1000 * kJ;
	unit<float32> MJ_yr := MJ / yr;
	unit<float32> GJ    := 1000 * MJ;
	unit<float32> PJ    := 1000000 * GJ;
	
	unit<float32> W      := J / s, Label = "Watt", Descr = "SI unit for power";
	unit<float32> kW     := 1000 * W;
	unit<float32> MW     := 1000 * kW;
	unit<float32> GW     := 1000 * MW;
	unit<float32> TW     := 1000 * GW;
	unit<float32> GWh    := uur * GW;
	unit<float32> TWh    := uur * TW;
	
	unit<float32> MW_km2 := MW / km2;
	unit<float32> MW_ha  := MW / ha;
	unit<float32> ha_ha  := ha / ha;
	
	unit<float32> Mol := BaseUnit('mol', float32);
	unit<float32> Mol_ha    := Mol / ha;
	unit<float32> Mol_ha_yr := Mol_ha / yr;
	

	unit<float32> m_s       := meter  / s;
	unit<float32> km_hr     := km / uur;
	
	unit<float32> kg_m2     := kg / meter2;
	unit<float32> kg_pand   := kg / pandunit;


	Template Classify_9K_Eur
	{
		//
		attribute<Eur> target (domain);
		unit<uint32> domain;
		//
		
		attribute<Eur> ClassifyJf (Target_9K) := ClassifyJenksFisher(target, Target_9K);
		parameter<uint32> max := max(ClassifyJf)[uint32];
		parameter<uint32> max_strlen := strlen(string(max));
		parameter<uint64> power := (10d^(max_strlen[float64]-4d))[uint64];
		attribute<Eur> ClassifyJf_rounded (Target_9K) := ((ClassifyJf[uint64] / power) * power)[Eur];
		attribute<uint32> ClassifyJf_rounded_integer (Target_9K) := ((ClassifyJf[uint64] / power) * power)[uint32];
		
		unit<uint8> Target_9K : NrOfRows = 9
		{
			parameter<string> dash := ' - ';
			parameter<string> comma := ',';
			attribute<string> Label_src := id(.) == (#target_9K[uint8] - 1b) ? string(ClassifyJf_rounded_integer) + ' or more' : string(ClassifyJf_rounded_integer) + dash + string(ClassifyJf_rounded_integer)[id(.) + 1b];
			attribute<string> Label := replace(
				Label_src, '00000000000','00.000.000.000'
						 , '0000000000' , '0.000.000.000'
						 , '000000000'  ,  '.000.000.000'
						 , '00000000'   ,    '00.000.000'
						 , '0000000'    ,     '0.000.000'
						 , '000000'     ,      '.000.000'
						 , '00000'      ,        '00.000'
						 , '0000'       ,         '0.000'
			), DialogType = "LabelText";
			
			attribute<uint32>   PenColor   := BrushColor, DialogType = "PenColor";
			attribute<uint32>   BrushColor :
			[
				rgb(255,255,229),
				rgb(255,247,188),
				rgb(254,227,145),
				rgb(254,196,79) ,
				rgb(254,153,41) ,
				rgb(236,112,20) ,
				rgb(204,76,2)   ,
				rgb(153,52,4)   ,
				rgb(102,37,6)
			], DialogType = "BrushColor";
			
			attribute<Eur> ClassBreaks  := ClassifyJf_rounded , DialogType = "Classification";
		}
	}
}