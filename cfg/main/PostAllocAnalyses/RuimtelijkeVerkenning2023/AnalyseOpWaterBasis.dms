////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Deze file bevat de resultaten van de RuimtelijkeVerkenning 2023 en de verwerking hiervan tbv landbouw en natuur voor Herijking Klimaatrisico's-project
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

container AnalyseOpWaterBasis: using = "Classifications;Units;Geography"
{
	attribute<bool> Landbouw_BAU_IsZout      (rdc_25m) := Landbouw_BAU && SourceData/Water/TeZout/Y2050/IsZoutAdminDomain;
	attribute<bool> Akkerbouw_GR_IsZout_org  (rdc_25m) := Akkerbouw_GR && SourceData/Water/TeZout/Y2050/IsZoutAdminDomain;
	
	//creeer nodata voor false waarden tbv districts functie
	attribute<uint8> Akkerbouw_GR_IsZout        (rdc_25m)  := !Akkerbouw_GR_IsZout_org ? (0/0)[uint8] : Akkerbouw_GR_IsZout_org[uint8];
	attribute<uint8> Akkerbouw_GR_IsZout_100mtr (rdc_100m) := modus(Akkerbouw_GR_IsZout,AdminDomain/AllocDomain_rel);
	
	unit<uint32> unit_district_Akkerbouw_GR_IsZout := district(Akkerbouw_GR_IsZout_100mtr)
	{
		attribute<UInt32>  id         := id(.);
		attribute<uint64>  count    := pcount(Districts);
		attribute<float32> area_ha  := count[float32]*AdminDomain/NrHaPerCell;
		attribute<km2>     area_km2 := count[float32]*AdminDomain/NrHaPerCell[km2];
		attribute<.>       Per_AllocDomain (AllocDomain):= Districts;
	}

	//maak polygonen van het districts-grid
	unit<uint32> polydomain := select_uint32_with_org_rel(IsDefined(unit_district_Akkerbouw_GR_IsZout/Districts))
	{
		parameter<float64>  gridsize := 100d;
	
		attribute<rdc_meter> point_rdc  := org_rel[rdc_meter];
		attribute<uint32>    id_nr      := unit_district_Akkerbouw_GR_IsZout/Districts[org_rel];
		attribute<region>    region_rel := rlookup(id_nr, RuimtelijkeVerkenning2023/AnalyseOpWaterBasis/polydomain/region/Values);

		unit<uint32> region := unique(id_nr)
		{
			attribute<rdc_meter> geometry (polygon)       := partitioned_union_polygon(ipolygon(geometry_boundingbox), region_rel)[rdc_meter];
			attribute<dpoint>    polygon_buffer (polygon) := bg_buffer_multi_polygon(geometry, 25.0, 32b);
			unit<uint32>         split_dissolve           := split_partitioned_union_polygon(ipolygon(geometry_boundingbox), region_rel)
			{
			}
			attribute<meter2>    area_m2                  := area(fpolygon(geometry), meter2);
		}
		
		//alleen die aangesloten gebieden van 10km2
		unit<uint32> region_sel := select_with_attr_by_cond(region, region/area_m2 > 10000000[meter2])
		{
			attribute<rdc_meter> geometry (polygon)
			{
				parameter<uint32> BrushColor := rgb(123,255,100), DialogType = "BrushColor";
				parameter<uint32> PenColor      := rgb(123,255,100), DialogType = "PenColor";
			}
			attribute<rdc_meter> centroid        := centroid(geometry)
			{
				parameter<meter> SymbolWorldSize := 1000[meter], DialogType = "SymbolWorldSize  ";
				parameter<Int16> SymbolIndex     := 169s, DialogType = "SymbolIndex";//https://github.com/ObjectVision/GeoDMS/wiki/SymbolFont
			}
			attribute<rdc_meter> centroid_or_mid := centroid_or_mid(geometry);
		}
		
		attribute<rdc_meter> geometry (poly) := points2sequence(pointset/point, pointset/sequence, pointset/ordinal);

		unit<uint32> pointset := union_unit(.,.,.,.,.)
		{
			attribute<rdc_meter>    point    := union_data(.
			  , point_rdc                                                 // left top 
			  , point_rdc + point_yx(0[meter_f64],gridsize, rdc_meter)    // right top 
			  , point_rdc + point_yx(-gridsize, gridsize, rdc_meter)      // right bottom 
			  , point_rdc + point_yx(-gridsize,0[meter_f64], rdc_meter)   // left bottom 
			  , point_rdc                                                 // left top 
			);
			attribute<..>     sequence := union_data(., id(..), id(..), id(..), id(..), id(..))[uint32];
			attribute<uint32> ordinal  := union_data(., const(0,..), const(1,..), const(2,..), const(3,..), const(4,..));
		}

		attribute<rdc_meter> geometry_boundingbox (poly) := points2sequence(pointset/point, pointset/sequence, pointset/ordinal)
		{
			parameter<meter>  PenWorldWidth := 5[meter]    , DialogType = "PenWorldWidth";
		}

		// attribute<rdc_meter>   centroid       := centroid(geometry_boundingbox);
		// attribute<AdminDomain> in_AdminDomain := centroid[AdminDomain];
		// attribute<meter2>      area_m2        := area(fpolygon(geometry_boundingbox), meter2);
	}
}