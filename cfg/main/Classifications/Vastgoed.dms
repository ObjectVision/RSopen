container Vastgoed : using = "Units"
{
	unit<uint32> GrondproductieModelVarianten : nrofrows = 3
	{
		attribute<string> name :
		[
			'BouwWoonrijp',
			'Bovenwijks',
			'PlanProces'
		];
		attribute<string> label := name;
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> StedelijkheidK: NrOfRows = 5
	{
		attribute<string> name: ['MinderDanVijfentwintigK','VijfentwintigTotVijftigK','VijftigTotHonderdK','HonderdKPlus','G4'];
		attribute<string> Label := name, DialogType = "Labeltext";
		attribute<Persoon> Ondergrens: [0, 25000, 50000, 100000, 300000];
	}
	
	unit<uint32> Eigendom : nrofrows = 3
	{
		attribute<string> label: DialogType = "LabelText",
			['Koop', 'PartHuur', 'WoonCorp'];
		attribute<string> name := label;
		attribute<uint32> BrushColor : [rgb(255,0,0),rgb(0,255,0),rgb(0,0,255)], DialogType = "BrushColor";
		attribute<uint32> PenColor   : [rgb(112,128,144),rgb(112,128,144),rgb(112,128,144)]      , DialogType = "PenColor";
		attribute<int16>  PenWidth   : ['1s','1s','1s']                              , DialogType = "PenWidth";
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	unit<uint8> HuurKoop : nrofrows = 2
	{
		attribute<string> name: ['Koop','Huur'];
		attribute<string> label := name, DialogType = "LabelText";
	}
	
	unit<uint8> pand_status : nrofrows = 10
	{
		attribute<string>    label      : ['Bouw gestart','Bouwvergunning verleend','Niet gerealiseerd pand','Pand buiten gebruik','Pand gesloopt','Pand in gebruik','Pand in gebruik (niet ingemeten)','Sloopvergunning verleend','Pand ten onrechte opgevoerd','Verbouwing pand'], DialogType = "LabelText";
		attribute<string>    name       := replace(label, ' ', '_', '-', '_', '(', '', ')', '');
		attribute<bool>      IsInPlanvorming : [FALSE,  TRUE,  TRUE,  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
		attribute<bool>      IsInAanbouw     : [TRUE,   FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
		attribute<bool>      IsInGebruik     : [FALSE,  FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE,  FALSE, FALSE, TRUE];
		attribute<bool>      IsVoorraad      : [FALSE,  FALSE, FALSE, TRUE,  FALSE, TRUE,  TRUE,  FALSE, FALSE, TRUE];
		attribute<bool>      IsIngetrokken   : [FALSE,  FALSE, TRUE,  FALSE, TRUE,  FALSE, FALSE, TRUE,  TRUE,  FALSE];
		attribute<bool>      IsInSloop       : [FALSE,  FALSE, FALSE, TRUE,  TRUE,  FALSE, FALSE, TRUE,  TRUE,  FALSE];
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	unit<uint8> vbo_status : nrofrows = 8
	{
		attribute<string>    label       : ['Niet gerealiseerd verblijfsobject','Verblijfsobject buiten gebruik','Verblijfsobject gevormd','Verblijfsobject in gebruik','Verblijfsobject in gebruik (niet ingemeten)','Verblijfsobject ingetrokken','Verblijfsobject ten onrechte opgevoerd','Verbouwing verblijfsobject'], DialogType = "LabelText";
		attribute<string>    label_short : ['niet gerea','buiten gebr','gevormd','in gebr','in gebr (NI)','ingetr','ten onrechte opgev','verbouwing'], DialogType = "LabelText";
		attribute<string>    name        := replace(label, ' ', '_', '-', '_', '(', '', ')', '');
		attribute<string>    name_short  := AsItemName(label_short);
		attribute<bool>      IsInPlanvorming : [TRUE,  FALSE, TRUE,  FALSE, FALSE, FALSE, FALSE, FALSE];
		attribute<bool>      IsInAanbouw     : [FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
		attribute<bool>      IsInGebruik     : [FALSE, FALSE, FALSE, TRUE,  TRUE,  FALSE, FALSE, TRUE];
		attribute<bool>      IsVoorraad      : [FALSE, TRUE,  FALSE, TRUE,  TRUE,  FALSE, FALSE, TRUE];
		attribute<bool>      IsIngetrokken   : [TRUE,  FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE,  FALSE];
		attribute<bool>      IsInSloop       : [FALSE, TRUE,  FALSE, FALSE, FALSE, TRUE,  TRUE,  FALSE];
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	
	
	unit<uint8> vbo_plus : nrofrows = 2
	{
		attribute<string> label : ['logistiekfunctie','utiliteit combi-functie'];
		attribute<string> name  : ['logistiek','utiliteit_combi'];
	}
	
	unit<uint8> vbo_gebruiksdoel_plus := union_unit_uint8(vbo_gebruiksdoel, vbo_plus)
	{
		attribute<string> name      := union_data(., vbo_gebruiksdoel/name, vbo_plus/name);
		attribute<string> label     := union_data(., vbo_gebruiksdoel/label, vbo_plus/label);
		
		attribute<Actor/Jobs6> jobs6_rel := union_data(.
			,Actor/Jobs6/V/Ov_consumentendiensten // 'bijeenkomstfunctie',
			,Actor/Jobs6/V/Overheid_kw_diensten   // 'celfunctie',
			,Actor/Jobs6/V/Overheid_kw_diensten   // 'gezondheidszorgfunctie',
			,Actor/Jobs6/V/Nijverheid             // 'industriefunctie',
			,Actor/Jobs6/V/Zak_dienstverlening    // 'kantoorfunctie',
			,Actor/Jobs6/V/Ov_consumentendiensten // 'logiesfunctie',
			,Actor/Jobs6/V/Overheid_kw_diensten   // 'onderwijsfunctie',
			,(0b/0b)[Actor/Jobs6]                 // 'overige gebruiksfunctie',
			,Actor/Jobs6/V/Ov_consumentendiensten // 'sportfunctie',
			,Actor/Jobs6/V/Detailhandel           // 'winkelfunctie',
			,(0b/0b)[Actor/Jobs6]                 // 'woonfunctie'
			,Actor/Jobs6/V/logistiek              // logistiek
			,Actor/Jobs6/V/Nijverheid             // util combi
		);
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> vbo_gebruiksdoel: nrofrows = 11, using = "Actor"
	{
		attribute<uint8> ID := ID(.);
		attribute<string> label:
		[
			'bijeenkomstfunctie',
			'celfunctie',
			'gezondheidszorgfunctie',
			'industriefunctie',
			'kantoorfunctie',
			'logiesfunctie',
			'onderwijsfunctie',
			'overige gebruiksfunctie',
			'sportfunctie',
			'winkelfunctie',
			'woonfunctie'
		];
		
		attribute<string> name := replace(replace(label,' ','_'), 'functie','');
		attribute<bool>   IsUtiliteit := label != 'woonfunctie';
		attribute<uint16> functie_code : [1,2,4,8,16,32,64,128,256,512,1024];
		attribute<uint32> BrushColor:  DialogType = "BrushColor",[rgb(255,255,255), rgb(  0,129,  0),rgb(  0,  0,255),rgb(255,220,  0),rgb(255,  0,  0)];
		attribute<TXLJobs9> TXLJobs9_rel := union_data(., 0[TXLJobs9], 0[TXLJobs9], 8[TXLJobs9], 2[TXLJobs9], 4[TXLJobs9], 6[TXLJobs9], 5[TXLJobs9], 0[TXLJobs9], 0[TXLJobs9], 7[TXLJobs9], 0[TXLJobs9]);
		
		// attribute<Actor/jobs5> jobs5_rel := union_data(.,
			// Actor/jobs5/V/Ov_consumentendiensten,
			// Actor/jobs5/V/Overheid_kw_diensten,
			// Actor/jobs5/V/Overheid_kw_diensten,
			// Actor/jobs5/V/NijverheidEnLogistiek,
			// Actor/jobs5/V/Zak_dienstverlening,
			// (0/0)[Actor/jobs5],
			// Actor/jobs5/V/Overheid_kw_diensten,
			// (0/0)[Actor/jobs5],
			// Actor/jobs5/V/Ov_consumentendiensten,
			// Actor/jobs5/V/Detailhandel,
			// (0/0)[Actor/jobs5]
		// );
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
		
		unit<uint8> Utiliteiten := subset(IsUtiliteit)
		{
			attribute<string> label        := ../label[nr_OrgEntity];
			attribute<string> name         := ../name[nr_OrgEntity];
			attribute<uint32> BrushColor   := ../BrushColor[nr_OrgEntity], DialogType = "BrushColor";
		}
	}
	
	unit<uint8> WP5 : nrofrows = 6
	{
		attribute<string> label      : ['geen woonpand','vrijstaand','twee onder 1 kap','hoekwoning'  ,'tussenwoning','appartement'], DialogType = "LabelText";
		attribute<string> label_engl : ['no_house'     ,'detached'  ,'semi-detached'   ,'end-terraced','terraced'    ,'apartment' ];
		attribute<string> name       := AsItemName(label);
		attribute<.>      WP5_rel    := id(.);
		attribute<WP4>    WP4_rel    :  [null,0,1,2,2,3]; 
		attribute<WP3>    WP3_rel    :  [0,1,1,1,1,2];
		attribute<WP2>    WP2_rel    :  [0,1,1,1,1,2];
		attribute<WP1>    WP1_rel    :  [0,1,1,1,1,2];
		
		attribute<uint32> BrushColor :  [rgb(255,255,255)  , rgb(150, 0, 0) ,rgb(118, 159, 255),rgb(255, 220, 0),rgb(255, 180, 0),rgb(255, 100, 255)], DialogType = "BrushColor";
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> WP4  : nrofrows = 4
	{
		attribute<string> label          : ['vrijstaand','twee onder 1 kap','rijtjeswoning','appartement'], DialogType = "LabelText";
		attribute<string> name       := AsItemName(label);
		attribute<string> Abbrev         : ['vrij', 'Tweeo1', 'rij', 'app'];
		attribute<uint32> BrushColor     : [rgb(150, 0, 0) ,rgb(118, 159, 255),rgb(255, 220, 0),rgb(255, 100, 255)], DialogType = "BrushColor";
		attribute<WP2>    WP2_rel        := union_data(., WP2/V/eengezins, WP2/V/eengezins, WP2/V/eengezins, WP2/V/meergezins);
		attribute<WP1>    WP1_rel        := const(WP1/V/Totaal[WP1], .);
		attribute<bool>   IsDetached     : [true, false, false, false];
		attribute<bool>   IsSemiDetached : [false, true, false, false];
		
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel := union_data(., Grondgebruik/CBSKlasse/Aggr/V/woongebied, Grondgebruik/CBSKlasse/Aggr/V/woongebied, Grondgebruik/CBSKlasse/Aggr/V/woongebied, Grondgebruik/CBSKlasse/Aggr/V/woongebied);
		attribute<bool> KanLokaalHogereDichtheidKrijgen: [true, true, true, true];
		
		container CBSKlassen := for_each_ne(Grondgebruik/CBSKlasse/Aggr/name, 'WP4T('+string(id(Grondgebruik/CBSKlasse/Aggr))+'[Grondgebruik/CBSKlasse/Aggr], ..)');
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
		
		container Per_WP2 := for_each_ne(WP2/name, 'T('+string(id(WP2))+'[WP2])');
		
		unit<uint32> xEnergielabel := combine(., Energielabel)
		{
			attribute<string> WP4_name := ../name[first_rel];
			attribute<string> Energielabel_name := Energielabel/name[second_rel];
			attribute<string> name := WP4_name+'/'+Energielabel_name;
			attribute<string> label := WP4_name+'_'+Energielabel_name, DialogType = "LabelText";
			
			container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
		}
		
		Template WP4T
		{
			//
			parameter<Grondgebruik/CBSKlasse/Aggr> id;
			unit<uint8> WP4;
			//
			
			unit<uint8> Subset := subset(WP4/CBSKlasse_Aggr_rel == id)
			{
				attribute<string> name := WP4/name[Nr_OrgEntity];
			}
		}
		
		Template T
		{
			parameter<WP2> id;
			
			unit<uint8> domain := subset(WP4/WP2_rel == id)
			{
				attribute<string> name := WP4/name[Nr_OrgEntity];
			}
		}
	}
	
	unit<uint8> WP3: nrofrows = 3
	{
		attribute<string> label       : ['geen woonpand','eengezins','meergezins'], DialogType = "LabelText";
		attribute<string> name        := replace(label, ' ', '_');
		attribute<WP2>    WP2_rel     := invert(WP2/WP3_rel);
		attribute<uint32> BrushColor  : [rgb(255,255,255)  , rgb(150, 0, 0),rgb(253, 98, 94)], DialogType = "BrushColor";
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> WP2 := subset(id(WP3) <> WP3/V/geen_woonpand)
	{
		attribute<WP3>                               WP3_rel                         := nr_OrgEntity;
		attribute<string>                            name                            := WP3/name[WP3_rel];
		attribute<string>                            name_short                      := union_data(., 'EG', 'MG');
		attribute<string>                            label                           := WP3/label[WP3_rel], DialogType = "LabelText";
		attribute<bool>                              KanLokaalHogereDichtheidKrijgen : [true, true];
		attribute<Actor/Sector>                      Sector_rel                      := const(Actor/Sector/V/Wonen, .);
		attribute<string>                            Sector_name                     := Actor/Sector/name[sector_rel];
		attribute<string>                            Sector_name_ThisName            := Sector_name+'/'+name;
		attribute<Actor/Sector/xSubSector>           SectorxSubSector_rel            := rjoin(name, Actor/Sector/xSubSector/SubSector_name, id(Actor/Sector/xSubSector));
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel              := union_data(., Grondgebruik/CBSKlasse/Aggr/V/woongebied, Grondgebruik/CBSKlasse/Aggr/V/woongebied);
		attribute<uint32>                            BrushColor                      := WP3/BrushColor[WP3_rel] , DialogType = "BrushColor";
		container                                    CBSKlassen                      := for_each_ne(Grondgebruik/CBSKlasse/Aggr/name, 'WP2T('+string(id(Grondgebruik/CBSKlasse/Aggr))+'[Grondgebruik/CBSKlasse/Aggr], ..)');
		
		Template WP2T
		{
			//
			parameter<Grondgebruik/CBSKlasse/Aggr> id;
			unit<uint8> WP2;
			//
			
			unit<uint8> Subset := subset(WP2/CBSKlasse_Aggr_rel == id)
			{
				attribute<string> name := WP2/name[Nr_OrgEntity];
			}
		}
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> WP1: NrOfRows = 1
	{
		attribute<string>                            name                 : ['Totaal'];
		attribute<string>                            label                := name, DialogType = "LabelText";
		attribute<bool>                              KanLokaalHogereDichtheidKrijgen: [true];
		attribute<Actor/Sector>                      Sector_rel           := const(Actor/Sector/V/Wonen, .);
		attribute<string>                            Sector_name          := Actor/Sector/name[sector_rel];
		attribute<string>                            Sector_name_ThisName := Sector_name+'/'+name;
		attribute<Actor/Sector/xSubSector>           SectorxSubSector_rel := rjoin(name, Actor/Sector/xSubSector/SubSector_name, id(Actor/Sector/xSubSector));
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel   := union_data(., Grondgebruik/CBSKlasse/Aggr/V/woongebied);
		attribute<uint32>                            BrushColor           : [rgb(255,60,60)], DialogType = "BrushColor";
		
		container CBSKlassen := for_each_ne(Grondgebruik/CBSKlasse/Aggr/name, 'WP1T('+string(id(Grondgebruik/CBSKlasse/Aggr))+'[Grondgebruik/CBSKlasse/Aggr], ..)');
		
		Template WP1T
		{
			//
			parameter<Grondgebruik/CBSKlasse/Aggr> id;
			unit<uint8> WP1;
			//
			
			unit<uint8> Subset := subset(WP1/CBSKlasse_Aggr_rel == id)
			{
				attribute<string> name := WP1/name[Nr_OrgEntity];
			}
		}
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> WPEengezinsK := subset(WP4/WP2_rel == WP2/V/eengezins)
	{
		attribute<string> name := WP4/name[Nr_OrgEntity];
		attribute<string> label := WP4/label[Nr_OrgEntity],  DialogType = "LabelText";
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	
	unit<uint8> VerblijfsrecreatieK: NrOfRows = 1
	{
		attribute<string>                            name                 : ['Totaal'];
		attribute<string>                            label                := name, DialogType = "LabelText";
		attribute<bool>                              KanLokaalHogereDichtheidKrijgen: [true];
		attribute<Actor/Sector>                      Sector_rel           := const(Actor/Sector/V/Verblijfsrecreatie, .);
		attribute<string>                            Sector_name          := Actor/Sector/name[sector_rel];
		attribute<string>                            Sector_name_ThisName := Sector_name+'/'+name;
		attribute<Actor/Sector/xSubSector>           SectorxSubSector_rel := rjoin(name, Actor/Sector/xSubSector/SubSector_name, id(Actor/Sector/xSubSector));
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel   := union_data(., Grondgebruik/CBSKlasse/Aggr/V/verblijfsrecreatie);
		attribute<uint32>                            BrushColor           : [rgb(102, 0, 0)], DialogType = "BrushColor";
		attribute<Actor/Jobs6>                       Jobs6_rel            := const(null_b,.);
		container CBSKlassen := for_each_ne(Grondgebruik/CBSKlasse/Aggr/name, 'WP1T('+string(id(Grondgebruik/CBSKlasse/Aggr))+'[Grondgebruik/CBSKlasse/Aggr], ..)');
		
		Template WP1T
		{
			//
			parameter<Grondgebruik/CBSKlasse/Aggr> id;
			unit<uint8> WP1;
			//
			
			unit<uint8> Subset := subset(WP1/CBSKlasse_Aggr_rel == id)
			{
				attribute<string> name := WP1/name[Nr_OrgEntity];
			}
		}
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	
	unit<uint8> VSSH : nrofrows = 2 //vrije sector - sociale huur
	{
		attribute<string>   name                             : ['VrijeSector','SocialeHuur'];
		attribute<string>   label                            := name, DialogType = "LabelText";
		attribute<uint32>   BrushColor                       : [rgb(138, 212, 235),rgb(0, 45, 179)], DialogType = "BrushColor";
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> WP2xVSSH := combine_uint8(WP2, VSSH)
	{
		attribute<string>                            name                    := WP_name+'_'+VSSH_name;
		attribute<string>                            label                   := name, DialogType = "LabelText";
		attribute<string>                            WP_name                 := WP2/name[first_rel];
		attribute<string>                            VSSH_name               := VSSH/name[second_rel];
		
		attribute<Actor/Sector>                      Sector_rel              := const(Actor/Sector/V/Wonen, .);
		attribute<string>                            Sector_name             := Actor/Sector/name[sector_rel];
		attribute<string>                            Sector_name_ThisName    := Sector_name+'/'+name;
		attribute<Actor/Sector/xSubSector>           SectorxSubSector_rel    := rjoin(name, Actor/Sector/xSubSector/SubSector_name, id(Actor/Sector/xSubSector));
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel      := const(Grondgebruik/CBSKlasse/Aggr/V/woongebied,.);
		attribute<uint32>                            BrushColor              : [rgb(255,0,0), rgb(255,153,51), rgb(153,0,0), rgb(204,102,0)], DialogType = "BrushColor";
		attribute<WP2>                               WP2_rel                 := first_rel;
		attribute<VSSH>                              VSSH_rel                := second_rel;
		attribute<bool>                              KanLokaalHogereDichtheidKrijgen : [true, true, true, true];
		attribute<Actor/Jobs6>                             Jobs6_rel               := const(null_b,.);
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> HouseCharacteristics : nrofrows = 11
	{
		attribute<string> name :
		[
			'size',
			'lotsize',
			'nrooms',
			'nbathrooms',
			'd_maintgood',
			'd_kk',
			'd_centralheating',
			'd_erfpacht',
			'd_isol_compl',
			'd_privpark',
			'd_highrise'
		];
		
		attribute<string> ValueType :
		[
			'uint16_t',
			'uint32_t',
			'uint8_t',
			'uint8_t',
			'uint2_t',
			'uint2_t',
			'uint2_t',
			'uint2_t',
			'uint2_t',
			'uint2_t',
			'uint2_t'
		];
		
		attribute<string> name2 := 'char_' + name;
		attribute<string> label := name;
	}
	
	unit<uint8> HouseCharacteristics_src : nrofrows = 34
	{
		attribute<string> name :
		[
			'lnsize', //
			'lnlotsize', //
			'nrooms', //
			'nbathrooms', //
			'd_centralheating', //
			'd_maintgood', //
			'd_isol_compl', //
			'd_privpark', //
			'd_highrise',//
			'd_kk', //
			'd_erfpacht', //
			'uai_2021', //
			'lnreistijd_500k_inw_2020_nl',//
			'reistijd_stations_2006', //
			'groennabij_2015',//
			'd_construnknown', //
			'd_constrlt1920', //
			'd_constr19201944', //
			'd_constr19451959', //
			'd_constr19601973', //
			'd_constr19741990', //
			'd_constr19911997', //
			'd_constrgt1997', //
			'y2012', //
			'y2013', //
			'y2014', //
			'y2015', //
			'y2016', //
			'y2017', //
			'y2018', //
			'y2019', //
			'y2020', //
			'y2021', //
			'constant' //
		];
	}
	
	unit<uint8> SectorCharacteristics_src : nrofrows = 2
	{
		attribute<string> name :
		[
			'size',
			'IsInvestmentProperty'
		];
	}
	
	unit<uint8> SectorCharacteristics : nrofrows = 13
	{
		attribute<string> name :
		[
			'lnfloorarea',
			'IsInvestmentProperty',
			'ln_DistTo_HighwayAccessExit',
			'ln_DistTo_Seaport',
			'ln_DistTo_Airports',
			'ln_DistTo_Trainstations',
			'ln_TravelTime_nearest100kInhab',
			'UAI',
			'ln_DistTo_Urban_Contour_2000',
			'LU_Share_Residential_2000',
			'LU_Diversity_index_2000',
			'Constant',
			'y2018'
		];
	}
	
	unit<uint32> WP4xHouseChar := combine(WP4, HouseCharacteristics)
	{
		attribute<string> name      :=  WP+'_'+HouseChar;
		attribute<string> WP        := rjoin(first_rel, id(WP4), WP4/name);
		attribute<string> HouseChar := rjoin(second_rel, id(HouseCharacteristics), HouseCharacteristics/name);
		attribute<string> ValueType := rjoin(second_rel, id(HouseCharacteristics), HouseCharacteristics/ValueType);
		
		unit<uint2>  uint2_t     := units/uint2_t;
		unit<uint8>  uint8_t     := units/uint8_t;
		unit<uint16> uint16_t    := units/uint16_t;
		unit<uint32> uint32_t    := units/uint32_t;
	}
	
	unit<uint32> WP2xHouseChar := combine(WP2, HouseCharacteristics)
	{
		attribute<string> name      :=  WP+'_'+HouseChar;
		attribute<string> WP        := rjoin(first_rel, id(WP2), WP2/name);
		attribute<string> HouseChar := rjoin(second_rel, id(HouseCharacteristics), HouseCharacteristics/name);
		attribute<string> ValueType := rjoin(second_rel, id(HouseCharacteristics), HouseCharacteristics/ValueType);
		
		unit<uint2>  uint2_t     := units/uint2_t;
		unit<uint8>  uint8_t     := units/uint8_t;
		unit<uint16> uint16_t    := units/uint16_t;
		unit<uint32> uint32_t    := units/uint32_t;
	}
	
	unit<uint8> Dichtheid_3K: nrofrows = 3
	{
		attribute<string> name        : ['High-density', 'Medium-density', 'Low-density'];
		attribute<string> label       := name, DialogType = "labelText";
		attribute<uint32> BrushColor  : DialogType = "BrushColor",
		[
				 rgb(255,  0,  0)
				,rgb(  0,  0,255)
				,rgb(  0,100,  0)
		];
	}
	
	unit<uint8> TXLHouseType: NrOfRows = 4
	{
		attribute<string> name:        ['eengezins_koop', 'eengezins_huur', 'meergezins_koop', 'meergezins_huur'];
		attribute<string> Label := name, DialogType = "LabelText";
		attribute<string> TXLTableRef: ['h1', 'h2', 'h3', 'h4'];
		attribute<string> TXLTbl_Ref: ['Totaal_aantal_koop_eengezinswoningen', 'Totaal_aantal_huur_eengezinswoningen', 'Totaal_aantal_koop_meergezinswoningen', 'Totaal_aantal_huur_meergezinswoningen'];
		attribute<string> BouwprogrammaTbl_Ref: ['Koop_ggb', 'Huur_ggb','Koop_app', 'Huur_app'];
		attribute<string> BAGRef: ['singlefamily', 'singlefamily', 'multifamily', 'multifamily'];
		attribute<string> COHouseTypeRef: ['eengezinswoning', 'eengezinswoning', 'etagewoning', 'etagewoning'];
		attribute<booL>   IsMultifam: [false, false, true, true];
		attribute<bool>   IsPrivate: [true, false, true, false];
		attribute<WP2>    WP2_rel  := union_data(., WP2/V/eengezins, WP2/V/eengezins, WP2/V/meergezins, WP2/V/meergezins);
		attribute<WP2>    Aggregatie_rel := WP2_rel;
		attribute<string> Aggregatie_Unit := const('WP2',.);
		
		unit<uint8> Meergezins := subset(TXLHouseType/IsMultifam);
		unit<uint8> Eengezins := subset(!TXLHouseType/IsMultifam);
	}
	
	unit<uint8> Gebruiksdoel: nrofrows = 11
	{
		attribute<string> ShortLabel:[
			'Winkel',
			'Logies',
			'Gezondheidszorg',
			'Kantoor',
			'Bijeenkomst',
			'Woon',
			'Onderwijs',
			'Industrie',
			'Overige gebruiks',
			'Sport',
			'Cel'
		];
		
		attribute<string> ShortName: Expr = "replace(ShortLabel, ' ', '_')";
		attribute<string> Label := ShortLabel + 'functie',  DialogType = "LabelText";
		attribute<string> Name: Expr = "ShortName + 'functie'";
		
		container V := for_each_nedv(Name, string(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> WOZ: NrOfRows = 6
	{
		attribute<string> name := 'Plus_'+string(ClassBreaks);
		attribute<string> Label := name, DialogType = "LabelText";
		attribute<Eur> ClassBreaks := ClassifyEqualCount(/SourceData/Vastgoed/WOZ/Y2017/Mean_AdminDomain, .), DialogType = "CLASS_BREAKS";
		attribute<uint32> BrushColor: DialogType = "BrushColor",
		[
			rgb(0,64,0), rgb(0,128,0), rgb(128,255,128), rgb(255,255,128), rgb(128,128,0), rgb(255,255,255)
		];
	}
	
	unit<uint8> Vierkanten : NrOfRows = 16
	{
		attribute<uint32> value: [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2015, 2016, 2017];
		attribute<string> name := 'J' + string(value);
		attribute<string> Label := name, DialogType = "LabelText";
	}
	
	unit<uint8> Energielabel: nrofrows = 8
	{
		attribute<string> name  : ['A' , 'B', 'C', 'D', 'E', 'F', 'G', 'N'];
		attribute<string> label : ['A+', 'B', 'C', 'D', 'E', 'F', 'G', 'Geen Label'], DialogType = "LabelText";
		
		attribute<uint32> Color : DialogType = "BrushColor",
		[
			 rgb(053,152,000)
			,rgb(114,167,017)
			,rgb(176,196,001)
			,rgb(247,230,000)
			,rgb(251,182,001)
			,rgb(249,097,014)
			,rgb(249,026,031)
		];
		
		attribute<uint32> SymbColor := Color, DialogType = "SymbolColor";
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
}