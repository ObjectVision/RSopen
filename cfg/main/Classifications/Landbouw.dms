container Landbouw : using = "Classifications/Actor"
{
	unit<uint8> GewasSoortYR : NrOfRows = 15
	{	
		unit<UInt32> Elements:= range(uint32, 0, nrAttr*#.)
		{
			attribute<String> Text: [ 
			// name                 , LandbouwK    , YR bron,   , bron param, rotatie klasse               , AantastingdoorVerzilting
			 'Riet'                 ,'rietteelt'   , 'Exotisch' , 'Kuhlmann', ''                           , 'TRUE' // input Marc Ravesloot, WUR
			,'Lisdodde'             ,'rietteelt'   , 'Exotisch' , ''        , ''                           , 'TRUE' // input Marc Ravesloot, WUR
			,'Consumptieaardappelen','akkerbouw'   , 'WWL'      , 'Diogo'   , ''                           , 'TRUE'
			,'Zetmeelaardappelen'   ,'akkerbouw'   , 'WWL'      , 'Diogo'   , ''                           , 'TRUE'
			,'Suikerbieten'         ,'akkerbouw'   , 'WWL'      , 'Diogo'   , ''                           , 'FALSE'
			,'Wintertarwe'          ,'akkerbouw'   , 'WWL'      , 'Diogo'   , ''                           , 'FALSE'
			,'Zaaiuien'             ,'akkerbouw'   , 'WWL'      , 'Diogo'   , ''                           , 'TRUE'
			,'Rijst'                ,'Rijst'       , 'Exotisch' , ''        , ''                           , 'FALSE' // input Marc Ravesloot, WUR
			,'Yacon'                ,'Yacon'       , 'Exotisch' , ''        , ''                           , 'FALSE' // input Marc Ravesloot, WUR
			,'Cranberry'            ,'Cranberry'   , 'Exotisch' , ''        , ''                           , 'FALSE' // input Marc Ravesloot, WUR
			,'Appelbomen'           ,'boomgaard'   , 'WWL'      ,'Diogo'    , ''                           , 'TRUE'  // tree fruit
			,'Moerasbomen'          ,'moerasbomen' , 'Exotisch' , ''        , ''                           , 'FALSE'
			,'Gras_maai'            ,'gg_vee'      , 'WWL'      ,'Diogo'    , 'Gras_zonder_herinzaaikosten', 'FALSE' //check in expert sessie
			,'Gras_beweiden'        ,'gg_vee'      , 'WWL'      ,'Diogo'    , 'Gras_met_herinzaaikosten'   , 'FALSE' //check in expert sessie
			,'Snijmais'             ,'gg_vee'      , 'WWL'      ,'Diogo'    , ''                           , 'TRUE'
			
			
			// ,'Suikerbieten'         ,'akkerbouw'   , 'Exotisch' , ''        , ''                           , 'FALSE'
			// ,'Grove_zomergroenten'  ,'groenteteelt', 'HELP'     , 'Diogo'   , ''                           , ''      //alleen HELP (dus geen varianten), waarschijnlijk niet relevant in Friesland.
			// ,'Wintergroenten'       ,'groenteteelt', 'HELP'     , 'Diogo'   , ''                           , ''      //alleen HELP (dus geen varianten), waarschijnlijk niet relevant in Friesland.
			// ,'Bladgroenten'         ,'groenteteelt', 'HELP'     , 'Diogo'   , ''                           , ''      //alleen HELP (dus geen varianten), waarschijnlijk niet relevant in Friesland.
			// ,'Groot_fruit'          ,'fruitteelt'  , 'HELP'     , 'Diogo'   , ''                           , ''      //tree fruit   //alleen HELP (dus geen varianten), waarschijnlijk niet relevant in Friesland.
			// ,'Klein_fruit'          ,'fruitteelt'  , 'HELP'     , 'Diogo'   , ''                           , ''      //berry fruit  //alleen HELP (dus geen varianten), waarschijnlijk niet relevant in Friesland.
			// ,'Boomteelt'            ,'boomkwekerij', 'HELP'     , 'Diogo'   , ''                           , ''     //alleen HELP (dus geen varianten), waarschijnlijk niet relevant in Friesland.
			// ,'Overig_boomteelt'     ,'boomkwekerij', 'HELP'     , 'Diogo'   , ''                           , ''     //alleen HELP (dus geen varianten), waarschijnlijk niet relevant in Friesland.
			// ,'Laanbomen'            ,'boomkwekerij', 'WWL'      , ''        , ''                           , 'TRUE' //geen rekenregel info en waarschijnlijk niet relevant in Friesland.
			// ,'Gras'                 ,'gg_vee'      , 'Exotisch' , ''        , ''                           , ''      //we hebben ook WWL, dus gebruiken die
			// ,'Granen'               ,'akkerbouw'   , 'Exotisch' , ''        , ''                           , ''      //we hebben ook WWL, dus gebruiken die
			// ,'Tulp'                 ,''            , 'WWL'      , ''        , ''                           , 'TRUE'      //geen rekenregel info en waarschijnlijk niet relevant in Friesland.
			// ,'Bloembollen'          ,''            , 'HELP'     , ''        , ''                           , ''      //geen rekenregel info en waarschijnlijk niet relevant in Friesland.
			];
		}
		// attribute<String>   HELP_Code            := rjoin(Name, HELP_GewasSoort/Name, HELP_GewasSoort/Code);
		attribute<String>   Label                := Name, DialogType = "LabelText";
		attribute<String>   Name                 := Elements/Text[value(UInt32(ID(.))* nrAttr +  0, Elements)];
		attribute<string>   LandbouwK            := Elements/Text[value(UInt32(ID(.))* nrAttr +  1, Elements)];
		attribute<string>   YR_bron              := Elements/Text[value(UInt32(ID(.))* nrAttr +  2, Elements)];
		attribute<string>   Rotatieklasse        := Elements/Text[value(UInt32(ID(.))* nrAttr +  4, Elements)];
		attribute<bool>     AantastingDoorVerzilt:= Elements/Text[value(UInt32(ID(.))* nrAttr +  5, Elements)][bool];
		attribute<LandbouwKlasses> LandbouwK_rel := ='union_data(., '+AsItemList(LandbouwK != '' ? 'Actor/LandbouwKlasses/V/'+LandbouwK : 'null_b')+')';
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		parameter<uint32> nrAttr := 6;
		
		container perLandbouwK_domain := 
			for_each_nex(
				Actor/LandbouwKlasses/name
				, 'select_with_attr_by_cond(GewasSoortYR, LandbouwK_rel == Actor/LandbouwKlasses/v/'+Actor/LandbouwKlasses/name+')'
				, uint8
			);
	}
	
	unit<uint8> Exotische_GewasSoort : NrOfRows = 10
	, Descr = "tbv kansenkaarten van WUR"
	{	
		unit<UInt32> Elements:= range(uint32, 0, nrAttr*#.)
		{
			attribute<String> Text: [ 
			// name                 
			 'Suikerbieten'
			,'Cranberry'   
			,'Granen'
			,'Gras'         
			,'Lisdodde'               
			,'Moerasbomen'  
			,'Riet'       
			,'Rijst'         
			,'Snijmais'             
			,'Yacon'          
			];
		}
		// attribute<String>   Code                 := String(ID(.)+1b);
		attribute<String>   Label                := Name, DialogType = "LabelText";
		attribute<String>   Name                 := Elements/Text[value(UInt32(ID(.))* nrAttr +  0, Elements)];

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		parameter<uint32> nrAttr := 1;
	}
	
	unit<uint8> WWL_GewasSoort : NrOfRows = 11
	, Descr = "uit Water Wijzer Landbouw"
	{	
		unit<UInt32> Elements:= range(uint32, 0, nrAttr*#.)
		{
			attribute<String> Text: [ 
			// name                 
			 'Appelbomen'
			,'consumptieaardappelen'   
			,'gras_beweiden'
			,'gras_maai'         
			,'laanbomen'               
			,'snijmais'  
			,'suikerbieten'       
			,'tulp'         
			,'wintertarwe'             
			,'zaaiuien'          
			,'zetmeelaardappelen'          
			];
		}
		// attribute<String>   Code                 := String(ID(.)+1b);
		attribute<String>   Label                := Name, DialogType = "LabelText";
		attribute<String>   Name                 := Elements/Text[value(UInt32(ID(.))* nrAttr +  0, Elements)];

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		parameter<uint32> nrAttr := 1;
	}
	
	unit<uint8> HELP_GewasSoort : NrOfRows = 14
	{	
		unit<UInt32> Elements:= range(uint32, 0, nrAttr*#.)
		{
			attribute<String> Text: [ 
			// name                 
			 'Gras_zonder_herinzaai'
			,'Gras_met_herinzaai'   
			,'consumptieaardappelen'
			,'suikerbieten'         
			,'Granen'               
			,'Grove_zomergroenten'  
			,'Wintergroenten'       
			,'Bladgroenten'         
			,'snijmais'             
			,'Bloembollen'          
			,'Groot_fruit'          
			,'Klein_fruit'          
			,'boomteelt'            
			,'Overig_boomteelt'     
			];
		}
		attribute<String>   HELP_Code            := String(ID(.)+1b);
		attribute<String>   Label                := HELP_Code + ';' + Name, DialogType = "LabelText";
		attribute<String>   Name                 := Elements/Text[value(UInt32(ID(.))* nrAttr +  0, Elements)];
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		parameter<uint32> nrAttr := 1;
	}
	
	unit<uint8> PeilK: NrOfRows = 2
	, Descr = "tbv HELP yield reduction berekening"
	{
		attribute<string> name  : ['GHG','GLG'];
		attribute<string> label : ['Gemiddeld Hoogste Grondwaterstand','Gemiddeld Laagste Grondwaterstand'], DialogType = "LabelText";
	}


	unit<uint8> VoederCategorie: nrofrows = 7
	{
		attribute<string> label: DialogType = "LabelText",
		['','extensive','non-dairy pasture','standard','nodata','intensive','other farms'];
		attribute<string> name :=  AsItemName(label);
		attribute<gg_vee_intensiteitK> gg_vee_intensiteitK_rel: [0,1,0,2,0,3,0];
		attribute <uint32> Palette: DialogType = "BrushColor",
		[
			rgb(  0,  0,  0),
			rgb(255,240, 38),
			rgb( 99,186, 49),
			rgb(255,223,165),
			rgb(128,128,128),
			rgb(255,  0,  0),
			rgb(173, 69, 16)
		];
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	unit<uint8> gg_vee_intensiteitK: nrofrows = 4
	{
		attribute<string> label: ['geen waarde','< 1.4 milking-cows per hectare','1.4 - 2 cows/ha','>= 2 cows/ha'], DialogType = "LabelText";
		attribute<string> name :=  label;
		attribute <uint32> Palette: [rgb(128,128,128), rgb( 99,186, 49), rgb(255,223,165), rgb(173, 69, 16)], DialogType = "BrushColor" ;
	}

	unit<uint8> VoederGewas: nrofrows = 7
	{
		attribute<string> label: DialogType = "LabelText",
		['','Grasland blijvend','Maïs snij-','Grasland tijdelijk','Bieten voeder- (inclusief aardperen)','Maïs corncob mix','Luzerne'];
		attribute<string> name :=  label;
		attribute <uint32> Palette: DialogType = "BrushColor",
		[
			rgb(  0,  0,  0),
			rgb(  0,255, 33),
			rgb(255,235,112),
			rgb(201,255,140),
			rgb(183,  0, 79),
			rgb(255,160, 53),
			rgb(255,127,237)
		];
	}
	unit<uint8> StallenKlasse: nrofrows = 7
	{
		attribute<uint32> color: [rgb(255,255,255),rgb(243,28,255),rgb(25,255,159),rgb(127,0,0),rgb(255,231,112),rgb(192,192,192),rgb(192,192,192)], DialogType = "BrushColor";
		attribute<String> Label: DialogType = "LabelText",
		[
			'0 nvt',
			'1 meer dan 150 nge',
			'2 100-150 nge',
			'3 70-100 nge',
			'4 50-70 nge',
			'5 16-50 nge',
			'6 3-16 nge'
		];
	}
	
	unit<uint8> LandbouwBodemKlasse: nrofrows = 6
	{
		attribute<uint8> ID: [0,1,2,3,4,5];
		attribute<string> label: DialogType = "LabelText",
		['dekzandgrond','kleigrond','natveen','zandgrond','zavelgrond','overig (ongeschikt)'];
		attribute<string> name :=  label;
		attribute <uint32> Palette: DialogType = "BrushColor",
		[
			rgb(255,255,  0),
			rgb(  0,128,128),
			rgb(128,  0,128),
			rgb(172, 89, 89),
			rgb(255, 94, 94),
			rgb(192,192,192)
		];
		parameter<uint8> dekzandgrond:         = value(0, .);
		parameter<uint8> kleigrond:            = value(1, .);
		parameter<uint8> natveen:              = value(2, .);
		parameter<uint8> zandgrond:            = value(3, .);
		parameter<uint8> zavelgrond:           = value(4, .);
		parameter<uint8> overig_ongeschikt:    = value(5, .);
	}
	
	unit<uint32> BodemkaartKlasse: nrofrows = 316
	{
		container Src:= Per_uint32('%RVF_DataDir%/Bodemtypenkaart/bodemkaart_1_50000_2006.csv', BodemkaartKlasse, ';');
		
		attribute<uint32> ID:            = id(BodemkaartKlasse);
		attribute<string> Label:         = value(Src/data/bodemcode_veld_eerste_bod, string), DialogType = "LabelText";
		attribute<string> landbouwnaam :=  value(Src/data/landbouwnaam, string);
		attribute<LandbouwBodemKlasse> landbouwID :=  value(Src/data/landbouwID, LandbouwBodemKlasse);
		
		Template Per_uint32
		{
			// Start template parameters
			parameter<String> Src;
			unit <uint32>     Unit;
			parameter<string> FieldSeparator;
			// End template parameters
						
			parameter<String> FileName:    = Src;
			parameter<String> FileData:
				StorageType = "str"
			,	StorageName = "=FileName";
			
			parameter<String> HeaderLine :=  readLines(FileData, void, 0);
			parameter<Bool>   HeaderOK:    = regex_match(HeaderLine, '\"[^\"]*+\"(;\"[^\"]*+\")*+');
			
			unit<UInt32> Field :=  Range(UInt32, 0, strcount(HeaderLine, FieldSeparator)+1)
			{
				attribute<String> Name :=  ReadArray(HeaderLine, Field, String, 0);
			}
			attribute<String> BodyLines(Unit) :=  readLines(FileData, Unit, HeaderLine/ReadPos); //, IntegrityCheck = "HeaderOK";
			attribute<Bool> LinesAreSignedIntegerStringOrEmpy (Unit) :=  regex_match(BodyLines, '(-?+[0-9]++|\"[^\"]*+\")?+(;(-?+[0-9]++|\"[^\"]*+\")?+)*+');
			
			container Data := 
				for_each_nedv(
					 Field/Name
					,'ReadElems(
						 BodyLines
						,string
						,'+MakeDefined(
							 Field/Name[sub_or_null(ID(Field),1)]+'/ReadPos'
							,'const(0, Unit)'
						)+'
					)'
					,Unit
					,string
				);
		}
	}
	unit<uint8> BodemKlasse14k: nrofrows = 15
	{
		attribute <uint32> Palette :
			[
			rgb(192,192,192), //0
			rgb(169, 0, 230), //1
			rgb(233,255,190), //2
			rgb(230,230,0), //3
			rgb(56,168,0), //4
			rgb(38,115,0), //5
			rgb(255,255,190), //6
			rgb(245,202,122), //7
			rgb(205,137,102), //8
			rgb(137,68,65), //9
			rgb(255,0,0), //10
			rgb(0,0,0), //11
			rgb(255,190,232), //12
			rgb(115,223,255), //13
			rgb(255,255,0) //14
			];
		attribute <String> Label :
			[
			'Water/Verhard/Geen gegevens',
			'V+W',
			'K1',
			'K2',
			'K3/4',
			'K5',
			'Z30',
			'Z50',
			'Z80',
			'ZI30',
			'Zs150',
			'Zs180',
			'L',
			'Z30/tertiaire klei',
			'Grind30'
			];
		attribute<string> name := AsItemName(label);
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	unit<uint8> HELPbodems: nrofrows = 72
	{
		attribute<String> Code := String(ID(.)+1b);
		attribute<string> label: DialogType = "LabelText",
		['bebouwing-water','V','aV','hV','kV - pV','zV','iV','geen waarde','Wo','vW','geen waarde','kW','zW','geen waarde','geen waarde','geen waarde','Kz1b','Kk1a','Kk1b','Kz2a','Kz2b','Kk2a','Kk2b','Kz34a','Kz34b','Kk34a','Kk34b','geen waarde','Kz5h','Kk5hz','Kk5h','geen waarde','geen waarde','geen waarde','geen waarde','Z1a','geen waarde','Z2a','geen waarde','tZ1a','tZ1b','tZ2a','geen waarde','geen waarde','geen waarde','geen waarde','geen waarde','EZ1a','EZ1b','geen waarde','geen waarde','geen waarde','geen waarde','geen waarde','geen waarde','KZ2','KZ1','geen waarde','tH1a','tH1b','tH2a','geen waarde','cH1a','cH1b','geen waarde','geen waarde','geen waarde','geen waarde','geen waarde','BLKd','G30','Z30/t'];
		attribute<string> name :=  label;
		attribute <uint32> Palette: DialogType = "BrushColor",
		[
			rgb(128,128,128),
			rgb(249,12,215),
			rgb(243,18,206),
			rgb( 88, 32,167),
			rgb( 25, 32,254),
			rgb(225,36,111),
			rgb(219,42,219),
			rgb(213,48,136),
			rgb(207,54,62),
			rgb(201,60,119),
			rgb(195,66,175),
			rgb(189,72,243),
			rgb( 25, 32, 30),
			rgb(177,84,41),
			rgb(171,90,2),
			rgb(165,96,121),
			rgb(159,102,134),
			rgb(153,108,33),
			rgb(147,114,60),
			rgb(141,120,216),
			rgb(135,126,12),
			rgb(129,132,120),
			rgb(123,138,138),
			rgb(117,144,239),
			rgb(111,150,250),
			rgb(105,156,2),
			rgb(99,162,192),
			rgb(93,168,94),
			rgb(87,174,167),
			rgb(81,180,171),
			rgb(75,186,62),
			rgb(69,192,187),
			rgb(63,198,129),
			rgb(57,204,224),
			rgb(51,210,156),
			rgb(45,216,153),
			rgb(39,222,226),
			rgb(33,228,25),
			rgb(27,234,196),
			rgb(21,240,70),
			rgb(15,246,183),
			rgb(9,252,39),
			rgb(189,72,243),
			rgb( 25, 32, 30),
			rgb(177,84,41),
			rgb(171,90,2),
			rgb(165,96,121),
			rgb(159,102,134),
			rgb(153,108,33),
			rgb(147,114,60),
			rgb(141,120,216),
			rgb(135,126,12),
			rgb(129,132,120),
			rgb(123,138,138),
			rgb(117,144,239),
			rgb(111,150,250),
			rgb(105,156,2),
			rgb(99,162,192),
			rgb(93,168,94),
			rgb(87,174,167),
			rgb(81,180,171),
			rgb(75,186,62),
			rgb(69,192,187),
			rgb(63,198,129),
			rgb(57,204,224),
			rgb(51,210,156),
			rgb(45,216,153),
			rgb(39,222,226),
			rgb(33,228,25),
			rgb(27,234,196),
			rgb(21,240,70),
			rgb(15,246,183)
		];
	}
	
	// unit<uint32> OpbrengstDervingTabel: = combine(HELP_GewasSoortYR,HELPbodems)
	// {
		// attribute<string> code     := HELP_GewasSoortYR/code[first_rel] + '_' + HELPbodems/code[second_rel];
		// attribute<string> Name := 'h'+code;
		// attribute<string> FileNameBase := 'hlp'+HELP_GewasSoortYR/code[first_rel] + '-' + HELPbodems/code[second_rel];
		// attribute<string> FileName1 := FileNameBase + '-1';
		// attribute<string> FileName2 := FileNameBase + '-2';
	// }
	// unit<uint32> OpbrengstDervingCel : = combine(GLGHelpKlasse,GHGHelpKlasse)
	// {
		// attribute<GLGHelpKlasse> GLG_rel := (#GLGHelpKlasse - 1) - first_rel;
		// attribute<GHGHelpKlasse> GHG_rel := second_rel;
		// attribute<string> code := GLGHelpKlasse/code[GLG_rel] + '-' + GHGHelpKlasse/code[GHG_rel];
		// attribute<string> label := code;
	// }
	
	// container NatSchadeTabellen     := for_each_ne(OpbrengstDervingTabel/Name, 'HELPbestanden_T('+Quote( OpbrengstDervingTabel/FileName1 ) + ')');
	// container DroogteSchadeTabellen := for_each_ne(OpbrengstDervingTabel/Name, 'HELPbestanden_T('+Quote( OpbrengstDervingTabel/FileName2 ) + ')');
	// unit<uint32> Make_OpbrengstDerving := combine(OpbrengstDervingTabel, OpbrengstDervingCel)
	// {
		// attribute<string> code := OpbrengstDervingTabel/code[first_rel] + '_'+ OpbrengstDervingCel/code[ second_rel ];
		// attribute<Percent> NS :=  = 'union_data(.,'+asitemlist('NatSchadeTabellen/'     + OpbrengstDervingTabel/Name + '/OBD') + ')', Descr = "Nationale schade";
		// attribute<Percent> DS :=  = 'union_data(.,'+asitemlist('DroogteSchadeTabellen/' + OpbrengstDervingTabel/Name + '/OBD') + ')', Descr = "Droogte schade";
		// attribute<Float32> TS := 1f - (1f - NS / 100[Percent])*(1f - DS  / 100[Percent]);
	// }
	
	// unit<uint32> OpbrengstDerving_CSV
	// : StorageName = "%RVF_DataDir%/OpbrengstDerving.csv"
	// , StorageType = "gdal.vect";
	
	// unit<uint32> Write_OpbrengstDerving := OpbrengstDerving_CSV
	// , StorageName = "%RVF_DataDir%/OpbrengstDerving.fss"
	// {
		// attribute<string>  code := unquote(OpbrengstDerving_CSV/code);
		// attribute<Percent> NS   := OpbrengstDerving_CSV/NS[Percent];
		// attribute<Percent> DS   := OpbrengstDerving_CSV/DS[Percent];
		// attribute<Float32> TS   := OpbrengstDerving_CSV/TS[float32];
	// }
	
	unit<uint32> OpbrengstDerving
	: StorageName = "%RVF_DataDir%/HELP_opbrengstderving/HELP_OpbrengstDerving.fss"
	, StorageReadOnly = "true"
	{
		attribute<string>  code;
		attribute<Percent> NS : Descr = "Nationale schade";
		attribute<Percent> DS : Descr = "Droogte schade";
		attribute<Float32> TS : Descr = "Totale schade";
	}
	
	Template HELPbestanden_T 
	{
		parameter<String> SrcTableNm;
		//
		parameter<String> SrcTable := '%RVF_DataDir%/Opbrengstderving_Waternood/'+ SrcTableNm + '.asc';
		parameter<String> SrcData: StorageName = "=SrcTable", StorageType = "str", StorageReadOnly = "True";
		
		unit<uint32>      Line:  NrOfRows = 82
		{
			attribute<string> Tekst := readlines(SrcData, ., 0);
		}
		unit<uint32> DataLine := subset( ID(Line) >= 6 )
		{
			attribute<string> Tekst := Line/Tekst [ nr_OrgEntity ];
		}
		parameter<string> DataTekst := aslist(DataLine/Tekst, ' ');
		attribute<Percent> OBD(OpbrengstDervingCel) := ReadArray(DataTekst, OpbrengstDervingCel, Percent, 0);
	}
	unit<uint32> GHGHELPKlasse: nrofrows = 41
	{
		attribute<int32> Classes: DialogType = "Classification",
		[
// ken negatieeve getallen (GHG ligt boven het maaiveld) aan de eerste klasse toe
			-1000,5,10,15,20
			,25,30,35,40,45
			,50,55,60,65,70
			,75,80,85,90,95
			,100,105,110,115,120
			,125,130,135,140,145
			,150,155,160,165,170
			,175,180,185,190,195
			,200
		];

		attribute<uint32> BrushColor(.): DialogType = "BrushColor",
		[
		rgb(0,0,255),rgb(0,6,248),rgb(0,13,241),rgb(0,19,235),rgb(0,26,228)
		,rgb(0,32,222),rgb(0,39,215),rgb(0,45,209),rgb(0,52,202),rgb(0,58,196)
		,rgb(0,65,189),rgb(0,71,183),rgb(0,78,176),rgb(0,85,170),rgb(0,91,163)
		,rgb(0,98,156),rgb(0,104,150),rgb(0,111,143),rgb(0,117,137),rgb(0,124,130)
		,rgb(0,130,124),rgb(0,137,117),rgb(0,143,111),rgb(0,150,104),rgb(0,156,98)
		,rgb(0,163,91),rgb(0,170,85),rgb(0,176,78),rgb(0,183,71),rgb(0,189,65)
		,rgb(0,196,58),rgb(0,202,52),rgb(0,209,45),rgb(0,215,39),rgb(0,222,32)
		,rgb(0,228,26),rgb(0,235,19),rgb(0,241,13),rgb(0,248,6),rgb(0,251,3)
		,rgb(0,255,0)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			'-1000-5','5-10','10-15','15-20','20-25'
			,'25-30','30-35','35-40','40-45','45-50'
			,'50-55','55-60','60-65','65-70','70-75'
			,'75-80','80-85','85-90','90-95','95-100'
			,'100-105','105-110','110-115','115-120','120-125'
			,'125-130','130-135','135-140','140-145','145-150'
			,'150-155','155-160','160-165','165-170','170-175'
			,'175-180','180-185','185-190','190-195','195-200'
			,'>200'
		];
		attribute<string> code := string(ID(.));
	}

	unit<uint32> GLGHELPKlasse: nrofrows = 65
	{
		attribute<int32> Classes: DialogType = "Classification",
		[
// ken negatieeve getallen (GLG ligt boven het maaiveld) aan de eerste klasse toe
			-1000,5,10,15,20
			,25,30,35,40,45
			,50,55,60,65,70
			,75,80,85,90,95
			,100,105,110,115,120
			,125,130,135,140,145
			,150,155,160,165,170
			,175,180,185,190,195
			,200,205,210,215,220
			,225,230,235,240,245
			,250,255,260,265,270
			,275,280,285,290,295
			,300,305,310,315,320
		];

		attribute<UInt32> BrushColor(.): DialogType = "BrushColor",
		[
		rgb(0,0,255),rgb(0,3,251),rgb(0,7,247),rgb(0,11,243),rgb(0,15,239)
		,rgb(0,19,235),rgb(0,23,231),rgb(0,27,227),rgb(0,31,223),rgb(0,35,219)
		,rgb(0,39,215),rgb(0,43,211),rgb(0,47,207),rgb(0,51,203),rgb(0,55,199)
		,rgb(0,59,195),rgb(0,63,191),rgb(0,67,187),rgb(0,71,183),rgb(0,75,179)
		,rgb(0,79,175),rgb(0,83,171),rgb(0,86,167),rgb(0,90,163),rgb(0,94,159)
		,rgb(0,98,155),rgb(0,102,151),rgb(0,106,147),rgb(0,110,143),rgb(0,114,139)
		,rgb(0,118,135),rgb(0,122,131),rgb(0,126,127),rgb(0,130,123),rgb(0,134,119)
		,rgb(0,138,115),rgb(0,142,111),rgb(0,146,107),rgb(0,150,103),rgb(0,154,99)
		,rgb(0,158,95),rgb(0,162,91),rgb(0,166,87),rgb(0,169,83),rgb(0,173,79)
		,rgb(0,177,75),rgb(0,181,71),rgb(0,185,67),rgb(0,189,63),rgb(0,193,59)
		,rgb(0,197,55),rgb(0,201,51),rgb(0,205,47),rgb(0,209,43),rgb(0,213,39)
		,rgb(0,217,35),rgb(0,221,31),rgb(0,225,27),rgb(0,229,23),rgb(0,233,19)
		,rgb(0,237,15),rgb(0,241,11),rgb(0,245,7),rgb(0,249,3),rgb(0,253,0)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			'-1000-5','5-10','10-15','15-20','20-25'
			,'25-30','30-35','35-40','40-45','45-50'
			,'50-55','55-60','60-65','65-70','70-75'
			,'75-80','80-85','85-90','90-95','95-100'
			,'100-105','105-110','110-115','115-120','120-125'
			,'125-130','130-135','135-140','140-145','145-150'
			,'150-155','155-160','160-165','165-170','170-175'
			,'175-180','180-185','185-190','190-195','195-200'
			,'200-205','205-210','210-215','215-220','220-225'
			,'225-230','230-235','235-240','240-245','245-250'
			,'250-255','255-260','260-265','265-270','270-275'
			,'275-280','280-285','285-290','290-295','295-300'
			,'300-305','305-310','310-315','315-320','>320'
		];
		attribute<string> code := string(ID(.));
	}

	unit<uint32> StrategyK : nrofrows = 2 
	{
		attribute<string> label: DialogType = "LabelText", ['Indexation','Fixation']; //'Abolition'
		attribute<string> name :=  label;
	
		container V: = for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	
	unit<uint8> CO2PriceK: nrofrows = 4
	{
		attribute<string> label:= name, DialogType = "LabelText";
		attribute<string> name := 'EUR_'+string(Price)+'_ton';
		attribute<EUR_ton> Price: [0, 30, 80, 160];
		
		container V :=  for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	// unit<uint8> CO2PriceK: nrofrows = 3
	// {
		// attribute<string> label: DialogType = "LabelText", ['no_CO2P', 'low_CO2P', 'high_CO2P'];
		// attribute<string> name :=  label;
		
		// attribute<EUR_ton> Price: [0, 40, 160];
		
		// container V: = for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	// }

	unit<uint32> DeepDrainageK: nrofrows = 2
	{
		attribute<string> label: DialogType = "LabelText", ['NoDD', 'DD'];
		attribute<string> name :=  label;
		attribute<ton_ha_jaarlijks> DDGrassYield: [0, 0.25]; //250 kg extra droge stof per ha pe
		attribute<EUR_Ha_jaarlijks> DD_costs:     [0, 117];
	
		container V: = for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	unit<uint32> DrainageKSrc :=  combine(StrategyK, DeepDrainageK) // for import phoenix results: CO2 emissions, water management costs, drainage levels
	{
		attribute<StrategyK>         StrategyK_rel           := first_rel;
		attribute<DeepDrainageK>     DeepDrainageK_rel       := second_rel;
		attribute<string>            Strategy_name           := StrategyK/name[StrategyK_rel];
		attribute<string>            DeepDrainage_name       := DeepDrainageK/name[DeepDrainageK_rel];
		attribute<string>            name                    := Strategy_name+'_'+DeepDrainage_name;
		attribute<ton_ha_jaarlijks>  DDGrassYield            := DeepDrainageK/DDGrassYield[DeepDrainageK_rel];
		attribute<EUR_Ha_jaarlijks>  DD_costs                := DeepDrainageK/DD_costs[DeepDrainageK_rel];
		attribute<string>            Label                   := name;
		
		container V: = for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	unit<uint32> Waterbeheeropties :=  select_with_attr_by_cond(DrainageKSrc, !(DrainageKSrc/StrategyK_rel == StrategyK/V/Fixation && DrainageKSrc/DeepDrainageK_rel == DeepDrainageK/V/DD))
	{

		// attribute<string>           Drainage_nameDDOption   := Drainage_name;           // valid in cells in which dd is technicaly possble
		// attribute<string>           Drainage_nameNoDDOption := Strategy_name + '_NoDD'; // valid in remaining cells
		attribute<UInt32>           BrushColor              := 	switch(
																	case(id(.) == v/Indexation_NoDD, rgb(204,255,229))
																	,case(id(.) == v/Indexation_DD, rgb(178,255,102))
																	,case(id(.) == v/Fixation_NoDD, rgb(242,64,131))
																	,null_u
																), DialogType = "BrushColor";
		
		container V: = for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	container Phoenix
	{
		parameter<Units/YearRange> StartYear: [2010];
		parameter<Units/YearRange> EndYear:   [2050];
		parameter<int16> ZichtJaarDuration:     = 10[int16];
		parameter<Bool> FirstZichtJaarRndUp:    = true;
	
		unit<uint32> Waterschap: nrofrows = 10
		{
			attribute<.> ID :=  id(.);
			attribute<String> name: [ 'Friesland', 'HDSR', 'AGV', 'HHNK', 'HHSK', 'Rijnland', 'WSRL', 'WDODELTA', 'HEA' , 'NZV']; // RENAME: Friesland -> WF
			attribute<String> lhmname: [ '_MIPWA', '_HYDROMEDAH', '', '', '', '', '_MORIA','_MIPWA','_MIPWA', ''];
			// voor aanroep van Friesland met oude bodemkaart exclusief groot peilegbeid-boezemsysteem roep aan
			attribute<string> label := name;
		
			attribute<String> dir_name: [ 'WaterschapFriesland', 'HDSR', 'AGV', 'HHNK', 'HHSK', 'Rijnland', 'WSRL', 'WDODELTA', 'HEA', 'NZV']; // RENAME: WaterschapFriesland -> WF
			attribute<string> grid_subdir: ['/v2', '', '', '/v2', '/v2', '', '' , '', '', ''];
			attribute<string> grid_suffix: ['', '', '', '_zonder_onderbemalingen_mca', '_zonder_onderbemalingen_mca', '', '', '', '', ''];
			attribute<string> gdb_peilgebieden_suffix: ['_vastgesteld', '', '', '_zonder_onderbemalingen', '_zonder_onderbemalingen', '', '' , '', ''];
			// bij aanpassing wel CreateAllShapes opnieuw draaien!
			attribute<string> gdb_name: [ 'waterschapfriesland_v6', 'HDSR_v4', 'AGV_v3', 'HHNK_v2', 'HHSK_v4', 'Rijnland_v3', 'WSRL_v3' , 'WDODelta', 'HEA', 'NZV_v2']; 
			
			attribute<string> label_ext: [
				'beheersgebied Waterschap Friesland (WF)',
				'beheersgebied Hoogheemraadschap De Stichtse Rijnlanden (HDSR)',
				'beheersgebied Hoogheemraadschap Amstel, Gooi en Vecht (AGV)',
				'beheersgebied Hoogheemraadschap Hollands Noorderkwartier  (HHNK)',
				'beheersgebied Hoogheemraadschap van Schieland en de Krimpenerwaard  (HHSK)',
				'beheersgebied Hoogheemraadschap van Rijnland',
				'beheersgebied Waterschap Rivierenland (WSRL)',
				'beheersgebied Drents Overijsselse Delta (WDODELTA)',
				'beheersgebied Waterschap Hunze en Aa''s',
				'beheersgebied Waterschap Noorderzijlvest'
			];
			
			container V: = for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		}
		
		unit<uint32> WSOverig: NrOfRows = 1
		{
			attribute<String> name: [ 'Overig' ];
		}
		
		unit<uint32> WaterschapPlus :=  union_unit(Waterschap, WSOverig)
		{
			attribute<String> name :=  union_data(.,Waterschap/name, WSOverig/name);
			attribute<String> Label :=  name, DialogType = "LabelText";
			
			container ToGrid: = 
				for_each_nedv(
					Waterschap/name,
					'IsDefined(float32(/BronDataSource/Phoenix/Waterschappen/'+Waterschap/name+'/grid/peilgebied_code_grid)) ? V/'+Waterschap/name+'[WaterschapPlus]: V/Overig',
					Geography/rdc_100m, WaterschapPlus
				)
			{
				attribute<WaterschapPlus> grid (Geography/rdc_100m): = = 'min_elem('+ AsItemList(Waterschap/name)+ ')';
			}
			
			container V: = for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		}

		unit<uint32> Scenario: nrofrows = 7
		{
			attribute<String> name:      ['PINoDD',   'PIhalfNoDD',   'PFDD',   'PIDD',   'PFNoDD',   'PISelectionDD3060',   'PISelectionDD30'];
			attribute<String> filename:  ['PI_NoDD',  'PIhalf_NoDD',  'PF_DD',  'PI_DD',  'PF_NoDD',  'PI_SelectionDD_30_60',  'PI_SelectionDD_30'];
			attribute<String> scenname:  ['scPINoDD', 'scPIhalfNoDD', 'scPFDD', 'scPIDD', 'scPFNoDD', 'scPISelectionDD3060','scPISelectionDD30'];
		}

		unit<uint32> Veen: nrofrows = 8
		{
			attribute<String> name:      ['diepe_veengrond','ondiepe_veengrond','klei_op_diepe_veengrond','klei_op_ondiepe_veengrond','zand_op_diepe_veengrond','zand_op_ondiepe_veengrond','nietrel','overig'];
		}
		
		parameter<int16> FirstZichtjaarRnd := 
			=  FirstZichtJaarRndUp
			? 'value(roundup  (float32(StartYear[YearRange]) / float32(ZichtJaarDuration)), int16) * ZichtJaarDuration'
			: 'value(rounddown(float32(StartYear[YearRange]) / float32(ZichtJaarDuration)), int16) * ZichtJaarDuration';
			
		parameter<int16> TotalYearsRnd :=  EndYear[int16] - FirstZichtJaarRnd;
		
		
		unit<uint8> Zichtjaar: nrofrows = 10
		{
			attribute<.> ID :=  id(.);
			attribute<YearRange>     StartYearPhoenix := MakeDefined(
															(id[YearRange] * ZichtJaarDuration + FirstZichtjaarRnd [YearRange]) * (id[YearRange] / id[YearRange])
															, StartYear) - ZichtJaarDuration[int16];
			attribute<YearRange>       EndYearPhoenix :=  id[YearRange] * ZichtJaarDuration + FirstZichtjaarRnd [YearRange] + ZichtJaarDuration[YearRange]- ZichtJaarDuration[int16];
			// Volgens bas van bemmel is het eindyear het jaar waarop de phoenix resultaten betrekking hebben
			attribute<string>                    name :=  'Y' + string(StartYearPhoenix) + '_Y' + string(EndYearPhoenix);
			attribute<string>             namePhoenix := 'J' + substr(name,2,4);
			attribute<string>                   Label: = namePhoenix;
		}

		unit<uint32> WaterschapZichtjaar
		:   = combine(Waterschap, Zichtjaar)
		{
			attribute<string>          name_first_rel :=  Waterschap/name[first_rel];
			attribute<string>          name_second_rel :=  Zichtjaar/namePhoenix[second_rel];
			attribute<string>  samenvoeg_nr1_nr2 :=  name_first_rel + '/'+ name_second_rel;
			attribute<string>   waterschapsnaam  :=  substr(samenvoeg_nr1_nr2, 0, strpos(samenvoeg_nr1_nr2, '_'));
			attribute<string>              label :=  samenvoeg_nr1_nr2;
			attribute<string> waterschapsnaamsub :=  waterschapsnaam+'_subextent';
		}

		unit<uint32> WaterschapZichtjaarScenario
		:   = combine(Waterschap, Zichtjaar, Scenario)
		{
			attribute<string>             name_first_rel :=  Waterschap/name[first_rel];
			attribute<string>             name_second_rel :=  Zichtjaar/namePhoenix[second_rel];
			attribute<string>             name_third_rel :=  Scenario/name[third_rel];
			attribute<string>                lokaal :=  Waterschap/lhmname[first_rel];
			attribute<string>     samenvoeg_nr1_nr2 :=  name_first_rel + '/'+ name_second_rel;
			attribute<string>     samenvoeg_nr1_nr3 :=  name_first_rel + '/'+ name_third_rel;
			attribute<string> samenvoeg_nr1_nr2_nr3 :=  name_first_rel + '/'+ name_third_rel+'/'+ name_second_rel;
			attribute<string>                 label :=  samenvoeg_nr1_nr2_nr3, DialogType = "LabelText";
			//om te runnen met de oude scenario's (lees oude bodemkaart en NHI-GHG en GLG voor AGV,Rijnland,HHSK en HHNK rest lokale hydrologische modellen): wijzig '_' in '_subextent'
			attribute<string>              filename :=  name_first_rel + '_' + Scenario/filename[third_rel]  + lokaal + '/'+ name_second_rel;
			attribute<string>       waterschapsnaam :=  name_first_rel;
			attribute<float32>      zichtjaar_value :=  value(substr(name_second_rel, 2, 2),float32);
			attribute<string>  prev_zichtjaar_name := name_first_rel + '/' + name_third_rel + '/' + Zichtjaar/namePhoenix[second_rel-uint8(1)];
		}

		unit<uint32> ZichtjaarScenarioVeen
		:   = combine(Scenario,Zichtjaar,Veen)
		{
			attribute<string>         scenario_name := Scenario/name[first_rel];
			attribute<string>        zichtjaar_name := Zichtjaar/namePhoenix[second_rel];
			attribute<string>             veen_name := Veen/name[third_rel];
			attribute<string>                 label :=  Veen_name + '/' + scenario_name + '/' + zichtjaar_name, DialogType = "LabelText";
		}

		unit<uint32> WaterschapZichtjaarScenarioVeen
		:   = combine(Waterschap,Zichtjaar, Scenario,Veen)
		{
			attribute<string>        waterschap_name:= Waterschap/name[first_rel];
			attribute<string>        zichtjaar_name := Zichtjaar/namePhoenix[second_rel];
			attribute<string>         scenario_name := Scenario/name[third_rel];
			attribute<string>             veen_name := Veen/name[fourth_rel];
			attribute<string>                 label :=  waterschap_name + '/' + Veen_name + '/' + scenario_name + '/' + zichtjaar_name, DialogType = "LabelText";
		}

		unit<uint32> ScenarioZichtjaar := Combine(Scenario,Zichtjaar)
		{
			attribute<string>             name_first_rel :=  Scenario/name[first_rel];
			attribute<string>             name_second_rel :=  Zichtjaar/namePhoenix[second_rel];
			attribute<string>     samenvoeg_nr1_nr2 :=  name_first_rel + '/'+ name_second_rel;
			attribute<string>                 label := scenario_name + '/' + zichtjaar_name, DialogType = "LabelText";
			
			attribute<string>         scenario_name := Scenario/name[first_rel];
			attribute<string>        zichtjaar_name := Zichtjaar/namePhoenix[second_rel];
		}
	}
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
}