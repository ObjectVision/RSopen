container Time
{
	unit<Int16> TigrisJaar: NrOfRows = 4
	{
		attribute<YearRange> Jaar: [2030, 2040, 2050, 2060];
		attribute<String> name := 'Y' + string(Jaar), DialogType = "LabelText";
	}
	
	unit<UInt8> ModelJaar: NrOfRows = 4
	{
		attribute<YearRange> YearRange_rel := union_data(., ModelParameters/Model_StartYear, 2030[YearRange], 2040[YearRange], ModelParameters/Model_FinalYear);
		attribute<String>    name          := 'Y' + string(YearRange_rel);
		attribute<Bool>      IsFirst       := id(.) == 0b;
		attribute<Bool>      IsLast        := id(.) == last(id(.));
		attribute<String>    PrevName      := IsFirst ? first(name) : name[id(.) - min_elem( id(.), 1b)];
		attribute<YearRange> PrevYear      := rjoin(lowercase(PrevName), lowercase(name), YearRange_rel);
	}
	
	unit<UInt8> Zichtjaar := = ModelParameters/AlleenEindjaar ? 'select_with_org_rel(ModelJaar/IsLast)' : 'select_with_org_rel(not(ModelJaar/IsFirst))'
	{
		attribute<ModelJaar> ModelJaar_rel     := org_rel;
		attribute<YearRange> YearRange_rel     := ModelJaar/YearRange_rel[ModelJaar_rel];
		attribute<YearRange> PrevYearRange_rel := rjoin(lowercase(PrevName), lowercase(ModelJaar/name), ModelJaar/YearRange_rel);
		
		attribute<String> name          := ModelJaar/name[ModelJaar_rel];
		attribute<String> Label         := name, DialogType = "LabelText";
		attribute<String> PrevName_triv := lowercase(PrevName) == lowercase('Y'+string(ModelParameters/Model_StartYear)) ? 'Basisjaar' : PrevName;
		
		attribute<Bool>   IsFirstZichtjaar := id(.) == 0b;
		attribute<String> PrevName   := IsFirstZichtjaar ? first(ModelJaar/name) : name[id(.) - min_elem( id(.), 1b)];
		attribute<String> PrevState  := IsFirstZichtjaar ? 'StartState_metBAGnieuwbouw' : PrevName+'/StateNaAllocatie';
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	unit<UInt32> jaren96_11 := range(uint32, 1996, 2012)
	{
		attribute<String> Label   := name , DialogType = "LabelText";
		attribute<String> name    := 'Y' + string(id(.));
		attribute<UInt32> value   := id(.);
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
}