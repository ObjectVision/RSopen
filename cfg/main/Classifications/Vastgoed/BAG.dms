unit<uint8> pand_status : NrOfRows = 10
{
	attribute<string>    Label      : ['Bouw gestart','Bouwvergunning verleend','Niet gerealiseerd pand','Pand buiten gebruik','Pand gesloopt','Pand in gebruik','Pand in gebruik (niet ingemeten)','Sloopvergunning verleend','Pand ten onrechte opgevoerd','Verbouwing pand'], DialogType = "LabelText";
	attribute<string>    name       := replace(Label, ' ', '_', '-', '_', '(', '', ')', '');
	attribute<bool>      IsInPlanvorming : [FALSE,  TRUE,  TRUE,  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
	attribute<bool>      IsInAanbouw     : [TRUE,   FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
	attribute<bool>      IsInGebruik     : [FALSE,  FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE,  FALSE, FALSE, TRUE];
	attribute<bool>      IsVoorraad      : [FALSE,  FALSE, FALSE, TRUE,  FALSE, TRUE,  TRUE,  FALSE, FALSE, TRUE];
	attribute<bool>      IsIngetrokken   : [FALSE,  FALSE, TRUE,  FALSE, TRUE,  FALSE, FALSE, TRUE,  TRUE,  FALSE];
	attribute<bool>      IsInSloop       : [FALSE,  FALSE, FALSE, TRUE,  TRUE,  FALSE, FALSE, TRUE,  TRUE,  FALSE];
	
	container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
}
unit<uint8> vbo_status : NrOfRows = 8
{
	attribute<string>    Label       : ['Niet gerealiseerd verblijfsobject','Verblijfsobject buiten gebruik','Verblijfsobject gevormd','Verblijfsobject in gebruik','Verblijfsobject in gebruik (niet ingemeten)','Verblijfsobject ingetrokken','Verblijfsobject ten onrechte opgevoerd','Verbouwing verblijfsobject'], DialogType = "LabelText";
	attribute<string>    Label_short : ['niet gerea','buiten gebr','gevormd','in gebr','in gebr (NI)','ingetr','ten onrechte opgev','verbouwing'], DialogType = "LabelText";
	attribute<string>    name        := replace(Label, ' ', '_', '-', '_', '(', '', ')', '');
	attribute<string>    name_short  := AsItemname(Label_short);
	attribute<bool>      IsInPlanvorming : [TRUE,  FALSE, TRUE,  FALSE, FALSE, FALSE, FALSE, FALSE];
	attribute<bool>      IsInAanbouw     : [FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
	attribute<bool>      IsInGebruik     : [FALSE, FALSE, FALSE, TRUE,  TRUE,  FALSE, FALSE, TRUE];
	attribute<bool>      IsVoorraad      : [FALSE, TRUE,  FALSE, TRUE,  TRUE,  FALSE, FALSE, TRUE];
	attribute<bool>      IsIngetrokken   : [TRUE,  FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE,  FALSE];
	attribute<bool>      IsInSloop       : [FALSE, TRUE,  FALSE, FALSE, FALSE, TRUE,  TRUE,  FALSE];
	
	container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
}

unit<uint8> nummeraanduiding_status : NrOfRows = 3
{
	attribute<string> Label      : ['onbekend','naamgeving ingetrokken','naamgeving uitgegeven'];
	attribute<string> name       := AsItemname(Label);

	container V := for_each_nedv(LowerCase(name), 'value('+string(id(.))+', ..)', void, .);
}
unit<uint8> openbareruimte_status : NrOfRows = 3
{
	attribute<string> Label      : ['onbekend','naamgeving ingetrokken','naamgeving uitgegeven'];
	attribute<string> name       := AsItemname(Label);

	container V := for_each_nedv(LowerCase(name), 'value('+string(id(.))+', ..)', void, .);
}

unit<uint8> woonplaats_status : NrOfRows = 3
{
	attribute<string> Label      : ['onbekend','woonplaats aangewezen','woonplaats ingetrokken'];
	attribute<string> name       := AsItemname(Label);

	container V := for_each_nedv(LowerCase(name), 'value('+string(id(.))+', ..)', void, .);
}


unit<uint8> vbo_plus : NrOfRows = 3
{
	attribute<string> Label : ['Logistiekfunctie','utiliteit combi-functie','niet woon'];
	attribute<string> name  : ['Logistiek','utiliteit_combi', 'niet_woon'];
}

unit<uint8> vbo_gebruiksdoel_plus := union_unit_uint8(vbo_gebruiksdoel, vbo_plus)
{
	attribute<string> name      := union_data(., vbo_gebruiksdoel/name, vbo_plus/name);
	attribute<string> Label     := union_data(., vbo_gebruiksdoel/Label, vbo_plus/Label);
	
	attribute<Actor/Jobs6> Jobs6_rel := union_data(.
		,Actor/Jobs6/V/Ov_consumentendiensten // 'bijeenkomstfunctie',
		,Actor/Jobs6/V/Overheid_kw_diensten   // 'celfunctie',
		,Actor/Jobs6/V/Overheid_kw_diensten   // 'Gezondheidszorgfunctie',
		,Actor/Jobs6/V/Nijverheid             // 'industriefunctie',
		,Actor/Jobs6/V/Zak_dienstverlening    // 'Kantoorfunctie',
		,Actor/Jobs6/V/Ov_consumentendiensten // 'logiesfunctie',
		,Actor/Jobs6/V/Overheid_kw_diensten   // 'onderwijsfunctie',
		,(0b/0b)[Actor/Jobs6]                 // 'overige gebruiksfunctie',
		,Actor/Jobs6/V/Ov_consumentendiensten // 'sportfunctie',
		,Actor/Jobs6/V/Detailhandel           // 'winkelfunctie',
		,(0b/0b)[Actor/Jobs6]                 // 'woonfunctie'
		,Actor/Jobs6/V/Logistiek              // 'Logistiek
		,Actor/Jobs6/V/Nijverheid             // 'util combi
		,(0b/0b)[Actor/Jobs6]                 // 'niet_woon'
	);
	
	container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
}

unit<uint8> vbo_gebruiksdoel: NrOfRows = 11, using = "Actor"
{
	attribute<uint8> id := id(.);
	attribute<string> Label:
	[
		'bijeenkomstfunctie',
		'celfunctie',
		'Gezondheidszorgfunctie',
		'industriefunctie',
		'Kantoorfunctie',
		'logiesfunctie',
		'onderwijsfunctie',
		'overige gebruiksfunctie',
		'sportfunctie',
		'winkelfunctie',
		'woonfunctie'
	];
	
	attribute<string> name := replace(replace(Label,' ','_'), 'functie','');
	attribute<bool>   IsUtiliteit := Label != 'woonfunctie';
	attribute<uint16> functie_code : [1,2,4,8,16,32,64,128,256,512,1024];
	attribute<uint32> BrushColor:  DialogType = "BrushColor",[rgb(255,255,255), rgb(  0,129,  0),rgb(  0,  0,255),rgb(255,220,  0),rgb(255,  0,  0)];
	attribute<TXLJobs9> TXLJobs9_rel := union_data(., 0[TXLJobs9], 0[TXLJobs9], 8[TXLJobs9], 2[TXLJobs9], 4[TXLJobs9], 6[TXLJobs9], 5[TXLJobs9], 0[TXLJobs9], 0[TXLJobs9], 7[TXLJobs9], 0[TXLJobs9]);
	
	container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	
	unit<uint8> Utiliteiten := select_with_org_rel(IsUtiliteit)
	{
		attribute<string> Label        := ../Label[org_rel];
		attribute<string> name         := ../name[org_rel];
		attribute<uint32> BrushColor   := ../BrushColor[org_rel], DialogType = "BrushColor";
	}
}

unit<uint8> WP5 : NrOfRows = 6
{
	attribute<string> Label      : ['geen woonpand','vRijstaand','twee onder 1 kap','hoekWoning'  ,'tussenWoning','Appartement'], DialogType = "LabelText";
	attribute<string> Label_engl : ['no_house'     ,'detached'  ,'semi-detached'   ,'end-terraced','terraced'    ,'apartment' ];
	attribute<string> name       := AsItemname(Label);
	attribute<.>      WP5_rel    := id(.);
	attribute<WP4>    WP4_rel    :  [null,0,1,2,2,3]; 
	attribute<WP3>    WP3_rel    :  [0,1,1,1,1,2];
	attribute<WP2>    WP2_rel    :  [null,0,0,0,0,1];
	attribute<WP1>    WP1_rel    :  [null,0,0,0,0,0];
	
	attribute<uint32> BrushColor :  [rgb(255,255,255)  , rgb(150, 0, 0) ,rgb(118, 159, 255),rgb(255, 220, 0),rgb(255, 180, 0),rgb(255, 100, 255)], DialogType = "BrushColor";
	
	container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
}

unit<uint8> WP4  : NrOfRows = 4
{
	attribute<string> Label          : ['vRijstaand','twee onder 1 kap','rijtjesWoning','Appartement'], DialogType = "LabelText";
	attribute<string> name_english     : ['detached'  ,'semidetached'   ,'terraced'     ,'apartment' ];
	attribute<string> name       := AsItemname(Label);
	attribute<string> Abbrev         : ['vrij', 'Tweeo1', 'rij', 'app'];
	attribute<uint32> BrushColor     : [rgb(150, 0, 0) ,rgb(118, 159, 255),rgb(255, 220, 0),rgb(255, 100, 255)], DialogType = "BrushColor";
	attribute<WP2>    WP2_rel        := union_data(., WP2/V/eengezins, WP2/V/eengezins, WP2/V/eengezins, WP2/V/meergezins);
	attribute<WP1>    WP1_rel        := const(WP1/V/Totaal[WP1], .);
	attribute<bool>   IsDetached     : [TRUE, FALSE, FALSE, FALSE];
	attribute<bool>   IsSemiDetached : [FALSE, TRUE, FALSE, FALSE];
	
	attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel := union_data(., Grondgebruik/CBSKlasse/Aggr/V/woongebied, Grondgebruik/CBSKlasse/Aggr/V/woongebied, Grondgebruik/CBSKlasse/Aggr/V/woongebied, Grondgebruik/CBSKlasse/Aggr/V/woongebied);
	attribute<bool> KanLokaalHogereDichtheidKrijgen: [TRUE, TRUE, TRUE, TRUE];
	
	container CBSKlassen := for_each_ne(Grondgebruik/CBSKlasse/Aggr/name, 'WP4T('+string(id(Grondgebruik/CBSKlasse/Aggr))+'[Grondgebruik/CBSKlasse/Aggr], ..)');
	
	container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	
	container Per_WP2 := for_each_ne(WP2/name, 'T('+string(id(WP2))+'[WP2])');
	
	unit<uint32> xEnergielabel := combine(., Energielabel)
	{
		attribute<string> WP4_name := ../name[first_rel];
		attribute<string> Energielabel_name := Energielabel/name[second_rel];
		attribute<string> name := WP4_name+'/'+Energielabel_name;
		attribute<string> Label := WP4_name+'_'+Energielabel_name, DialogType = "LabelText";
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	Template WP4T
	{
		//
		parameter<Grondgebruik/CBSKlasse/Aggr> id;
		unit<uint8> WP4;
		//
		
		unit<uint8> subset := select_with_org_rel(WP4/CBSKlasse_Aggr_rel == id)
		{
			attribute<string> name := WP4/name[org_rel];
		}
	}
	
	Template T
	{
		parameter<WP2> id;
		
		unit<uint8> domain := select_with_org_rel(WP4/WP2_rel == id)
		{
			attribute<string> name := WP4/name[org_rel];
		}
	}
}

unit<uint8> WP3: NrOfRows = 3
{
	attribute<string> Label       : ['geen woonpand','eengezins','meergezins'], DialogType = "LabelText";
	attribute<string> name        := replace(Label, ' ', '_');
	attribute<WP2>    WP2_rel     := invert(WP2/WP3_rel);
	attribute<uint32> BrushColor  : [rgb(255,255,255)  , rgb(150, 0, 0),rgb(253, 98, 94)], DialogType = "BrushColor";
	container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
}

unit<uint8> WP2 := select_with_org_rel(id(WP3) <> WP3/V/geen_woonpand)
{
	attribute<WP3>                               WP3_rel                         := org_rel;
	attribute<string>                            name                            := WP3/name[WP3_rel];
	attribute<string>                            name_short                      := union_data(., 'EG', 'MG');
	attribute<string>                            Label                           := WP3/Label[WP3_rel], DialogType = "LabelText";
	attribute<bool>                              KanLokaalHogereDichtheidKrijgen : [TRUE, TRUE];
	attribute<Actor/Sector>                      Sector_rel                      := const(Actor/Sector/V/Wonen, .);
	attribute<string>                            Sector_name                     := Actor/Sector/name[Sector_rel];
	attribute<string>                            Sector_name_Thisname            := Sector_name+'/'+name;
	attribute<Actor/Sector/xSubsector>           SectorxSubSector_rel            := rjoin(name, Actor/Sector/xSubsector/Subsector_name, id(Actor/Sector/xSubsector));
	attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel              := union_data(., Grondgebruik/CBSKlasse/Aggr/V/woongebied, Grondgebruik/CBSKlasse/Aggr/V/woongebied);
	attribute<uint32>                            BrushColor                      := WP3/BrushColor[WP3_rel] , DialogType = "BrushColor";
	container                                    CBSKlassen                      := for_each_ne(Grondgebruik/CBSKlasse/Aggr/name, 'WP2T('+string(id(Grondgebruik/CBSKlasse/Aggr))+'[Grondgebruik/CBSKlasse/Aggr], ..)');
	
	Template WP2T
	{
		//
		parameter<Grondgebruik/CBSKlasse/Aggr> id;
		unit<uint8> WP2;
		//
		
		unit<uint8> subset := select_with_org_rel(WP2/CBSKlasse_Aggr_rel == id)
		{
			attribute<string> name := WP2/name[org_rel];
		}
	}
	container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
}

unit<uint8> WP1: NrOfRows = 1
{
	attribute<string>                            name                 : ['Totaal'];
	attribute<string>                            Label                := name, DialogType = "LabelText";
	attribute<bool>                              KanLokaalHogereDichtheidKrijgen: [TRUE];
	attribute<Actor/Sector>                      Sector_rel           := const(Actor/Sector/V/Wonen, .);
	attribute<string>                            Sector_name          := Actor/Sector/name[Sector_rel];
	attribute<string>                            Sector_name_Thisname := Sector_name+'/'+name;
	attribute<Actor/Sector/xSubsector>           SectorxSubSector_rel := rjoin(name, Actor/Sector/xSubsector/Subsector_name, id(Actor/Sector/xSubsector));
	attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel   := union_data(., Grondgebruik/CBSKlasse/Aggr/V/woongebied);
	attribute<uint32>                            BrushColor           : [rgb(255,60,60)], DialogType = "BrushColor";
	
	container CBSKlassen := for_each_ne(Grondgebruik/CBSKlasse/Aggr/name, 'WP1T('+string(id(Grondgebruik/CBSKlasse/Aggr))+'[Grondgebruik/CBSKlasse/Aggr], ..)');
	
	Template WP1T
	{
		//
		parameter<Grondgebruik/CBSKlasse/Aggr> id;
		unit<uint8> WP1;
		//
		
		unit<uint8> subset := select_with_org_rel(WP1/CBSKlasse_Aggr_rel == id)
		{
			attribute<string> name := WP1/name[org_rel];
		}
	}
	
	container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
}

unit<uint8> WPEengezinsK := select_with_org_rel(WP4/WP2_rel == WP2/V/eengezins)
{
	attribute<string> name := WP4/name[org_rel];
	attribute<string> Label := WP4/Label[org_rel],  DialogType = "LabelText";
	
	container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
}

// unit<uint8> Gebruiksdoel: NrOfRows = 11
// {
	// attribute<string> ShortLabel:[
		// 'Winkel',
		// 'Logies',
		// 'Gezondheidszorg',
		// 'Kantoor',
		// 'Bijeenkomst',
		// 'Woon',
		// 'Onderwijs',
		// 'Industrie',
		// 'Overige gebruiks',
		// 'Sport',
		// 'Cel'
	// ];
	
	// attribute<string> Shortname: Expr = "replace(ShortLabel, ' ', '_')";
	// attribute<string> Label := ShortLabel + 'functie',  DialogType = "LabelText";
	// attribute<string> name: Expr = "Shortname + 'functie'";
	
	// container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
// }
