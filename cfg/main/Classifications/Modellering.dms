container Modellering : using = "Actor"
{
	unit<UInt8> Sequence_first := range(uint8, 0[uint8], 1[uint8])
	, Descr = "Unit om de eerste sequentie aan te duiden. Deze wordt voor Seq_0 gebruikt en is anders dan de latere sequentie set (welke sector alloc regios daarin zitten wordt immers via de variant parameters geregeld."
	{
		attribute<String> name      := 'Seq_'+string(id(.));
		attribute<String> Label     := name, DialogType = "LabelText";
		// attribute<String> PrevName  := MakeDefined(name[id(.) - 1[.]], '');
		// attribute<Bool>   HasStopped_ThisZichtjaar   := ='union_data(., '+asItemList('Sequences/'+name+'/Impl/StopSequence')+')';
	}
	
	unit<UInt8> Sequence_later := range(uint8, 1[uint8], ModelParameters/Default_NrOfSequences)
	, Descr = "Unit om de latere sequenties aan te duiden. Deze wordt voor Seq_1 t/m Seq_n gebruikt en is gelijk aan het aantal sequenties dat in de variant parameters is opgegeven."
	{
		attribute<String> name      := 'Seq_'+string(id(.));
		attribute<String> Label     := name, DialogType = "LabelText";
		attribute<String> PrevName  := MakeDefined(name[sub_or_null(id(.),1[.])], 'Seq_0');
		// attribute<Bool>   HasStopped_ThisZichtjaar   := ='union_data(., '+asItemList('Sequences/'+name+'/Impl/StopSequence')+')';
	}



	unit<UInt32> TIGRIS_Variants_IncludedList : NrOfRows = 3
	{
		attribute<String> name :['BAU','Verdichting', 'Uitleg'];
	}
	
	unit<UInt32> TIGRIS_Variants_WLO_Laag := TIGRIS_Variants_IncludedList
	{
		attribute<String> Scenario_name  := const('WLO_laag', .);
		attribute<String> Variant_name   := TIGRIS_Variants_IncludedList/name;
	}
	
	unit<UInt32> TIGRIS_Variants_WLO_Hoog := union_unit_uint32(VariantParameters/VariantK)
	{
		attribute<String> Scenario_name  := const('WLO_hoog', .);
		attribute<String> Variant_name   := union_data(., VariantParameters/VariantK/name);
	}
	
	unit<UInt32> TIGRIS_Variants := union_unit(TIGRIS_Variants_WLO_Laag, TIGRIS_Variants_WLO_Hoog)
	{
		attribute<String> Scenario_name  := union_data(.,TIGRIS_Variants_WLO_Laag/Scenario_name, TIGRIS_Variants_WLO_Hoog/Scenario_name);
		attribute<String> Variant_name   := union_data(.,TIGRIS_Variants_WLO_Laag/Variant_name, TIGRIS_Variants_WLO_Hoog/Variant_name);
	}
	
	unit<UInt32> Scenario_x_Variant_x_Zichtjaar := combine(TIGRIS_Variants, Time/Zichtjaar)
	{
		attribute<String> name           := Scenario_name + '_' + Variant_name + '_' + Zichtjaar_name;
		attribute<String> Scenario_name  := TIGRIS_Variants/Scenario_name[first_rel];
		attribute<String> Variant_name   := TIGRIS_Variants/Variant_name[first_rel];
		attribute<String> Zichtjaar_name := Time/Zichtjaar/name[second_rel];
	}

	unit<UInt8> NoData: NrOfRows = 1
	{
		attribute<String> name: ['geen'];
		attribute<String> Label := name, DialogType = "LabelText";
		// attribute<UInt32> Geen (AllocDomain) := const(0/0, AllocDomain);
	}
	
	unit<UInt32> StandVar_Prep_wWerken_wWind := union_unit(Sector/xSubsector, Sector/xSubsectoren/Werken/Subsector, WindK)
	{
		attribute<String> name                 := union_data(., Sector/xSubsector/StandVar_name,      Sector/xSubsectoren/Werken/Subsector/StandVar_PF_name,      WindK/StandVar_Jaar_name);
		attribute<String> Subsector_name       := union_data(., Sector/xSubsector/Subsector_name,     Sector/xSubsectoren/Werken/Subsector/Subsector_name,        WindK/Subsector_name);
		attribute<String> path                 := union_data(., Sector/xSubsector/StandVar_path,      Sector/xSubsectoren/Werken/Subsector/StandVar_PF_path,      WindK/StandVar_Jaar_path);
		attribute<String> Sector_name          := union_data(., Sector/xSubsector/Sector_name,        Sector/xSubsectoren/Werken/Subsector/Sector_name,           WindK/Sector_name);
		attribute<String> unit_name            := union_data(., Sector/xSubsector/ValUnit_ref,        Sector/xSubsectoren/Werken/Subsector/StandVar_PF_unit,      WindK/StandVar_Jaar_unit);
		attribute<String> value_Type           := union_data(., Sector/xSubsector/StandVar_valueType, Sector/xSubsectoren/Werken/Subsector/StandVar_PF_valueType, WindK/StandVar_Jaar_valueType);
		
		attribute<Bool>   HasClaims            := union_data(., Sector/xSubsector/HasClaims,           Sector/xSubsectoren/Werken/Subsector/HasClaims_PF,           const(FALSE, WindK));
		attribute<Bool>   HasAlloc             := union_data(., Sector/xSubsector/HasAlloc,            Sector/xSubsectoren/Werken/Subsector/HasAlloc_PF,            const(FALSE, WindK));
		attribute<Bool>   IsVastgoed           := union_data(., Sector/xSubsector/IsVastgoed,          Sector/xSubsectoren/Werken/Subsector/IsVastgoed_PF,          const(FALSE, WindK));
		attribute<Bool>   UseForLeegstandCorr  := union_data(., Sector/xSubsector/UseForLeegstandCorr, Sector/xSubsectoren/Werken/Subsector/UseForLeegstandCorr_PF, const(FALSE, WindK));
	}
	
	unit<UInt32> StandVar_Prep_wWerken_woWind  := union_unit(Sector/xSubsector, Sector/xSubsectoren/Werken/Subsector)
	{
		attribute<String> name                 := union_data(., Sector/xSubsector/StandVar_name,      Sector/xSubsectoren/Werken/Subsector/StandVar_PF_name);
		attribute<String> Subsector_name       := union_data(., Sector/xSubsector/Subsector_name,     Sector/xSubsectoren/Werken/Subsector/Subsector_name);
		attribute<String> path                 := union_data(., Sector/xSubsector/StandVar_path,      Sector/xSubsectoren/Werken/Subsector/StandVar_PF_path);
		attribute<String> Sector_name          := union_data(., Sector/xSubsector/Sector_name,        Sector/xSubsectoren/Werken/Subsector/Sector_name);
		attribute<String> unit_name            := union_data(., Sector/xSubsector/ValUnit_ref,        Sector/xSubsectoren/Werken/Subsector/StandVar_PF_unit);
		attribute<String> value_Type           := union_data(., Sector/xSubsector/StandVar_valueType, Sector/xSubsectoren/Werken/Subsector/StandVar_PF_valueType);
		
		attribute<Bool>   HasClaims            := union_data(., Sector/xSubsector/HasClaims,           Sector/xSubsectoren/Werken/Subsector/HasClaims_PF);
		attribute<Bool>   HasAlloc             := union_data(., Sector/xSubsector/HasAlloc,            Sector/xSubsectoren/Werken/Subsector/HasAlloc_PF);
		attribute<Bool>   IsVastgoed           := union_data(., Sector/xSubsector/IsVastgoed,          Sector/xSubsectoren/Werken/Subsector/IsVastgoed_PF);
		attribute<Bool>   UseForLeegstandCorr  := union_data(., Sector/xSubsector/UseForLeegstandCorr, Sector/xSubsectoren/Werken/Subsector/UseForLeegstandCorr_PF);
	}
	 
	unit<UInt32> StandVar_Prep_woWerken_woWind := Sector/xSubsector
	{
		attribute<String> name                 := Sector/xSubsector/StandVar_name;
		attribute<String> Subsector_name       := Sector/xSubsector/Subsector_name;
		attribute<String> path                 := Sector/xSubsector/StandVar_path;
		attribute<String> Sector_name          := Sector/xSubsector/Sector_name;
		attribute<String> unit_name            := Sector/xSubsector/ValUnit_ref;
		attribute<String> value_Type           := Sector/xSubsector/StandVar_valueType;
		
		attribute<Bool>   HasClaims            := Sector/xSubsector/HasClaims;
		attribute<Bool>   HasAlloc             := Sector/xSubsector/HasAlloc;
		attribute<Bool>   IsVastgoed           := Sector/xSubsector/IsVastgoed;
		attribute<Bool>   UseForLeegstandCorr  := Sector/xSubsector/UseForLeegstandCorr;
	}
	
	unit<UInt32> StandVar_Prep_woWerken_wWind := union_unit(Sector/xSubsector, WindK)
	{
		attribute<String> name                 := union_data(., Sector/xSubsector/StandVar_name,      WindK/StandVar_Jaar_name);
		attribute<String> Subsector_name       := union_data(., Sector/xSubsector/Subsector_name,     WindK/Subsector_name);
		attribute<String> path                 := union_data(., Sector/xSubsector/StandVar_path,      WindK/StandVar_Jaar_path);
		attribute<String> Sector_name          := union_data(., Sector/xSubsector/Sector_name,        WindK/Sector_name);
		attribute<String> unit_name            := union_data(., Sector/xSubsector/ValUnit_ref,        WindK/StandVar_Jaar_unit);
		attribute<String> value_Type           := union_data(., Sector/xSubsector/StandVar_valueType, WindK/StandVar_Jaar_valueType);
		
		attribute<Bool>   HasClaims            := union_data(., Sector/xSubsector/HasClaims,           const(FALSE, WindK));
		attribute<Bool>   HasAlloc             := union_data(., Sector/xSubsector/HasAlloc,            const(FALSE, WindK));
		attribute<Bool>   IsVastgoed           := union_data(., Sector/xSubsector/IsVastgoed,          const(FALSE, WindK));
		attribute<Bool>   UseForLeegstandCorr  := union_data(., Sector/xSubsector/UseForLeegstandCorr, const(FALSE, WindK));
	}
	
	unit<UInt32> StandVar_Prep := =/VariantParameters/SectorAllocRegio/Uq_Sectors/HasWerkenSector && /VariantParameters/SectorAllocRegio/Uq_Sectors/HasWindSector
										? 'StandVar_Prep_wWerken_wWind' 
										: /VariantParameters/SectorAllocRegio/Uq_Sectors/HasWerkenSector && NOT(/VariantParameters/SectorAllocRegio/Uq_Sectors/HasWindSector)
											? 'StandVar_Prep_wWerken_woWind'
											: NOT(/VariantParameters/SectorAllocRegio/Uq_Sectors/HasWerkenSector) && /VariantParameters/SectorAllocRegio/Uq_Sectors/HasWindSector
												? 'StandVar_Prep_woWerken_wWind'
												: 'StandVar_Prep_woWerken_woWind'
	{
		unit<Float32> Woning    := Units/Woning;
		unit<Float32> Job       := Units/Job;
		unit<Float32> meter2    := Units/meter2;
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		
		attribute<Bool> DeltaVar_Prep_cond := =/VariantParameters/SectorAllocRegio/Uq_Sectors/HasWindSector ? 'id(.) <> V/jaartal_ingebruikname_Wind' : 'const(TRUE,.)';
		attribute<Bool> IsLandbouw         := lowercase(Sector_name) == lowercase('Landbouw');
	}
	
	unit<UInt32> DeltaVar_Prep := =/VariantParameters/SectorAllocRegio/Uq_Sectors/HasWindSector 
										? 'select_with_org_rel(id(StandVar_Prep) <> StandVar_Prep/V/jaartal_ingebruikname_Wind)'
										: 'select_with_org_rel(IsDefined(id(StandVar_Prep)))'
	{
		attribute<String> name := StandVar_Prep/name[org_rel];
		attribute<String> path := StandVar_Prep/path[org_rel];
		attribute<String> Sector_name := StandVar_Prep/Sector_name[org_rel];
		attribute<String> unit_name := StandVar_Prep/unit_name[org_rel];
		attribute<String> value_Type := StandVar_Prep/value_Type[org_rel];
		
		unit<Float32> Woning    := Units/Woning;
		unit<Float32> Job       := Units/Job;
		unit<Float32> meter2    := Units/meter2;
	}
	
	unit<UInt32> AllCases := combine(ScenarioK, VariantParameters/VariantK)
	{
		attribute<String> Scenario_name := ScenarioK/name[first_rel];
		attribute<String> Variant_name  := VariantParameters/VariantK/name[second_rel];
		attribute<String> name          := Scenario_name+'/'+Variant_name;
		attribute<String> Label         := Scenario_name+'_'+Variant_name;
		attribute<Bool>   IsBAU         := lowercase(Variant_name) == lowercase('BAU');
		
		unit<UInt32> NotBAU := select_with_attr_by_cond(., !IsBAU);
	}
	
	unit<UInt8> DomainK: NrOfRows = 2
	{
		attribute<String> name := union_data(., 'AllocDomain', 'AdminDomain');
	}
	
	unit<UInt8> AllocRegiosK: NrOfRows = 4
	{
		attribute<String> name: ['NVM', 'COROP', 'Provincie', 'NL'];
		attribute<String> Label := name, DialogType = "LabelText";
		attribute<String> ref := name;
		attribute<String> path_src : ['','CBS/Last/','CBS/Last/',''];
		attribute<String> path     := 'RegioIndelingen/'+path_src+name;
		
		attribute<AllocRegiosK> Parent_rel := union_data(AllocRegiosK
		,	V/Provincie 
		,	V/Provincie
		,	V/NL
		,	uint8(0/0)
		);
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt8> OrdeningsCriterium: NrOfRows = 2
	{
		attribute<String> name: ['Geschiktheid', 'Dichtheid'];
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt8> ScenarioK: NrOfRows = 2
	{
		attribute<String> name : ['WLO_laag', 'WLO_hoog'];
		attribute<String> TableRef : ['laag', 'hoog'];
		attribute<Bool> IsVoorExport: [FALSE, TRUE];
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt8> VergelijkRegiosK: NrOfRows = 5
	{
		attribute<String> name: ['LMSSubzone', 'Gemeente', 'NVM', 'COROP', 'Provincie'];
		attribute<String> SrcRef:
		[
			'/Geography/RegioIndelingen/LMSSubzone',
			'/Geography/RegioIndelingen/Gemeente2019_single',
			'/Geography/RegioIndelingen/NVM',
			'/Geography/RegioIndelingen/COROP',
			'/Geography/RegioIndelingen/Provincie'
		];
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	unit<UInt32> BBGK: NrOfRows = 2
	{
		attribute<String> name: ['BBG', 'Geen_BBG'];
		attribute<String> Label := name, DialogType = "LabelText";
		container V := for_each_nedv(name, string(id(.)) + '[..]', void, .);
	}
	
	unit<UInt8> DichtheidRegio: NrOfRows = 6
	{
		attribute<String> name: ['Buurt', 'Wijk', 'Gemeente', 'NVM', 'COROP', 'Provincie'];
		attribute<String> SrcRef := 'RegioIndelingen/'+ union_data(., 'Buurt/Src_2019', 'Wijk/Src_2019', 'Gemeente2019_single', 'NVM_2011', 'COROP', 'Provincie');
	}
	
	unit<UInt8> HardheidK: NrOfRows = 2
	{
		attribute<String> name: ['Hard', 'Zacht'];
	}
	
	unit<UInt32> HardheidXDomainK := combine(HardheidK, domainK)
	{
		attribute<String> HardheidK_name := HardheidK/name[first_rel];
		attribute<String> domainK_name := domainK/name[second_rel];
		attribute<String> name := HardheidK_name+'/'+domainK_name;
	}
	
	unit<UInt32> MaatregelK: NrOfRows = 3
	{
		attribute<String> name: ['Bouwen', 'Maatregelen', 'NietBouwen'];
		attribute<String> Label := name, DialogType = "LabelText";
		attribute<UInt32> BrushColor : DialogType = "BrushColor",
		[
			rgb(127,127,127), rgb(188,184,217), rgb( 63,  0,125)
		];
		
		container V := for_each_nedv(name, string(id(.)) + '[..]', void, .);
	}
	
	container PlaceHolder : Descr = "Something an empty container is needed, in that case this one can be used.";
}