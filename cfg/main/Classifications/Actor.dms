container Actor
{
	unit<UInt8> BoervariantK : NrOfRows = 3
	, Descr = " - Rationele boer: waardeert de toekomst, kijkt vooruit, neemt exotische gewassen mee. Oftewel, hun toekomstige landgebruik is gebaseerd op NPV en claims; simulatie obv het discrete allocatiemechanisme
				 - Intermediate boer: wel exotische gewassen, hogere discontovoet, hogere transitiekosten. Toekomst weegt dus minder zwaar mee, en hebben meer weerstand tegen exotische gewassen.
				 - Conservatieve boer: kijkt niet naar de toekomst, wil geen exotische gewassen. Alles blijft zoals het is. hun teelt zullen ze niet veranderen naar toekomst, ongeacht veranderingen in de NPV van hun bestaande teelt tov de alternatieven. Dit landbgebruik kan dus exogeen worden opgelegd."
	{
		attribute<String> name        : ['RationeleBoer', 'IntermediateBoer', 'ConservatieveBoer'];
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .); 
	}
	
	unit<UInt8> LandbouwK : NrOfRows = 1
	{
		attribute<String> Sector_name        : ['Landbouw'];
		attribute<String> Subsector_name     : ['Totaal'];
		attribute<UInt32> BrushColor         : [rgb(255,0,0)];
		attribute<String> ref                : ['Landbouw'];
		attribute<String> SrcRefRestricties  : ['Landbouw'];
		attribute<String> Subsector_ref      : ['Classifications/Actor/LandbouwKlasses']; 
		
		attribute<String> ValUnit_ref        : ['Ha'];
		attribute<String> ValUnitDens_ref    : ['Ha_Ha'];
		attribute<String> ValUnit_ref2       : ['Ha']; 
		attribute<String> StandVar_name      : ['Aantal_Ha_@SS@'];
		attribute<String> StandVar_valueType : ['float32'];
		
		attribute<Bool>   HasClaims            : [FALSE];
		attribute<Bool>   HasAlloc             : [TRUE];
		attribute<Bool>   IsVastgoed           : [FALSE];
		attribute<Bool>   UseForLeegstandCorr  : [FALSE];
	}
	
	unit<UInt8> WonenK: NrOfRows = 1
	{
		attribute<String> Sector_name        : ['Wonen'];
		attribute<String> Subsector_name     : ['Totaal'];
		attribute<UInt32> BrushColor         : [rgb(255,0,0)];
		attribute<String> ref                : ['Woongebied'];
		attribute<String> SrcRefRestricties  : ['Woongebied'];
		attribute<String> Subsector_ref      : ['Classifications/Vastgoed/WP2xVSSH']; 
		
		attribute<String> ValUnit_ref        : ['Woning'];
		attribute<String> ValUnitDens_ref    : ['Woning_ha'];
		attribute<String> ValUnit_ref2       : ['Woningen']; 
		attribute<String> StandVar_name      : ['Aantal_Woningen_@SS@'];
		attribute<String> StandVar_valueType : ['float32'];
		
		attribute<Bool>   HasClaims            : [TRUE];
		attribute<Bool>   HasAlloc             : [TRUE];
		attribute<Bool>   IsVastgoed           : [TRUE];
		attribute<Bool>   UseForLeegstandCorr  : [TRUE];
	}
		
	unit<UInt8> WerkenK: NrOfRows = 1
	{
		attribute<String> Sector_name        : ['Werken'];
		attribute<String> Subsector_name     : ['Totaal'];
		attribute<UInt32> BrushColor         : [rgb(192,192,192)];
		attribute<String> ref                : ['Bedrijventerrein'];
		attribute<String> SrcRefRestricties  : ['Bedrijventerrein'];
		attribute<String> Subsector_ref      : ['Classifications/Actor/Jobs6']; 
		
		attribute<String> ValUnit_ref        : ['Job'];
		attribute<String> ValUnitDens_ref    : ['Job_ha'];
		attribute<String> ValUnit_ref2       : ['Banen']; 
		attribute<String> StandVar_name      : ['Banen_@SS@'];
		attribute<String> StandVar_valueType : ['float32'];
		attribute<String> StandVar_PF_name   : ['m2PandFootprint_@SS@'];
		
		attribute<Bool>   HasClaims            : [TRUE];
		attribute<Bool>   HasAlloc             : [TRUE];
		attribute<Bool>   IsVastgoed           : [FALSE];
		attribute<Bool>   UseForLeegstandCorr  : [TRUE];
		
		attribute<Bool>   HasClaims_PF            : [FALSE];
		attribute<Bool>   HasAlloc_PF             : [FALSE];
		attribute<Bool>   IsVastgoed_PF           : [TRUE];
		attribute<Bool>   UseForLeegstandCorr_PF  : [FALSE];
	}
	unit<UInt8> AdditioneleK: NrOfRows = 4
	{
		attribute<String> Sector_name    : ['Natuur','Infra','Water','Overig'];
		attribute<String> Subsector_name := const('Totaal',.);
		attribute<UInt32> BrushColor     : [rgb(103,174,0),rgb(115,76,0),rgb(151,219,242),rgb(255,255,255)];
	}
	
	unit<UInt8> VerblijfsrecreatieK : NrOfRows = 1
	{
		attribute<String>                      name                 : ['Totaal'];
		attribute<String>                      Subsector_name       := name;
		attribute<String>                      Label                := name, DialogType = "LabelText";
		attribute<Bool>                        KanLokaalHogereDichtheidKrijgen: [TRUE];
		attribute<Sector>                      Sector_rel           := const(Sector/V/Verblijfsrecreatie, .);
		attribute<String>                      Sector_name          := Sector/name[Sector_rel];
		attribute<String>                      Sector_name_Thisname := Sector_name+'/'+name;
		attribute<Sector/xSubsector>           SectorxSubSector_rel := rjoin(lowercase(name), lowercase(Sector/xSubsector/Subsector_name), id(Sector/xSubsector));
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel   := union_data(., Grondgebruik/CBSKlasse/Aggr/V/Verblijfsrecreatie);
		attribute<UInt32>                      BrushColor           : [rgb(102, 0, 0)], DialogType = "BrushColor";
		attribute<Jobs6>                       Jobs6_rel            := const(null_b,.);
		attribute<String>                      ref                  : ['Verblijfsrecreatie'];
		attribute<String>                      SrcRefRestricties    : ['Verblijfsrecreatiegebied'];
		attribute<String>                      Subsector_ref        : ['Classifications/Actor/VerblijfsrecreatieK']; 
		attribute<String>                      ValUnit_ref          : ['Verblijfsobject'];
		attribute<String>                      ValUnitDens_ref      : ['vbo_ha'];
		attribute<String>                      ValUnit_ref2         : ['Woningen']; 
		attribute<String>                      StandVar_name        : ['Objecten_Verblijfsrecreatie'];
		attribute<String>                      StandVar_valueType   : ['float32'];
		
		attribute<Bool>                        HasClaims            : [TRUE];
		attribute<Bool>                        HasAlloc             : [TRUE];
		attribute<Bool>                        IsVastgoed           : [TRUE];
		attribute<Bool>                        UseForLeegstandCorr  : [FALSE];

		container CBSKlassen := for_each_ne(Grondgebruik/CBSKlasse/Aggr/name, 'WP1T('+string(id(Grondgebruik/CBSKlasse/Aggr))+'[Grondgebruik/CBSKlasse/Aggr], ..)');
		
		Template WP1T
		{
			//
			parameter<Grondgebruik/CBSKlasse/Aggr> id;
			unit<UInt8> WP1;
			//
			
			unit<UInt8> subset := select_with_org_rel(WP1/CBSKlasse_Aggr_rel == id)
			{
				attribute<String> name := WP1/name[org_rel];
			}
		}
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt8> WindK: NrOfRows = 1
	{
		attribute<String>                      name                            : ['Totaal'];
		attribute<String>                      Subsector_name                  := name;
		attribute<String>                      Label                           := name, DialogType = "LabelText";
		attribute<Bool>                        KanLokaalHogereDichtheidKrijgen : [TRUE];
		attribute<Sector>                      Sector_rel                      := const(Sector/V/Wind, .);
		attribute<String>                      Sector_name                     := Sector/name[Sector_rel];
		attribute<String>                      Sector_name_Thisname            := Sector_name+'/'+name;
		attribute<Sector/xSubsector>           SectorxSubSector_rel            := rjoin(lowercase(FullLabel), lowercase(Sector/xSubsector/Label), id(Actor/Sector/xSubsector));
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel              := const((0/0)[Grondgebruik/CBSKlasse/Aggr], .);
		attribute<String>                      FullLabel                       := Sector_name + '_' + name;
		attribute<UInt32>                      BrushColor                      : [rgb(0, 0, 0)], DialogType = "BrushColor";
		attribute<Jobs6>                       Jobs6_rel                       := const(null_b,.);
		attribute<String>                      ref                             : ['Wind'];
		attribute<String>                      SrcRefRestricties               : ['Wind'];
		attribute<String>                      Subsector_ref                   : ['Classifications/Actor/WindK']; 
		attribute<String>                      ValUnit_ref                     : ['MW'];
		attribute<String>                      ValUnitDens_ref                 : ['MW_ha'];
		attribute<String>                      ValUnit_ref2                    : ['Wind']; 
		attribute<String>                      StandVar_name                   : ['Vermogen_Wind'];
		attribute<String>                      StandVar_valueType              : ['float32'];
		attribute<String>                      StandVar_Jaar_name              : ['Jaartal_InGebruikname_Wind'];
		attribute<String>                      StandVar_Jaar_valueType         : ['UInt16'];
		attribute<String>                      StandVar_Jaar_unit              : ['Yr'];
		attribute<String>                      StandVar_Jaar_path              := Sector_name + '/Jaartal_InGebruikname';
		
		attribute<Bool>                        HasClaims                       : [TRUE];
		attribute<Bool>                        HasAlloc                        : [TRUE];
		attribute<Bool>                        IsVastgoed                      : [TRUE];
		attribute<Bool>                        UseForLeegstandCorr             : [FALSE];
	}
	
	unit<UInt8> ZonK: NrOfRows = 1
	{
		attribute<String>                      name                            : ['Totaal'];
		attribute<String>                      Subsector_name                  := name;
		attribute<String>                      Label                           := name, DialogType = "LabelText";
		attribute<Bool>                        KanLokaalHogereDichtheidKrijgen : [TRUE];
		attribute<Actor/Sector>                Sector_rel                      := const(Actor/Sector/V/Zon, .);
		attribute<String>                      Sector_name                     := Actor/Sector/name[Sector_rel];
		attribute<String>                      Sector_name_Thisname            := Sector_name+'/'+name;
		attribute<Actor/Sector/xSubsector>     SectorxSubSector_rel            := rjoin(lowercase(FullLabel), lowercase(Actor/Sector/xSubsector/Label), id(Actor/Sector/xSubsector));
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel              := const((0/0)[Grondgebruik/CBSKlasse/Aggr], .);
		attribute<String>                      FullLabel                       := Sector_name + '_' + name;
		attribute<UInt32>                      BrushColor                      : [rgb(255, 255, 102)], DialogType = "BrushColor";
		attribute<Jobs6>                       Jobs6_rel                       := const(null_b,.);
		attribute<String>                      ref                             : ['Zon'];
		attribute<String>                      SrcRefRestricties               : ['Zon'];
		attribute<String>                      Subsector_ref                   : ['Classifications/Actor/ZonK']; 
		attribute<String>                      ValUnit_ref                     : ['MW'];
		attribute<String>                      ValUnitDens_ref                 : ['MW_ha'];
		attribute<String>                      ValUnit_ref2                    : ['Zon']; 
		attribute<String>                      StandVar_name                   : ['Vermogen_Zon'];
		attribute<String>                      StandVar_valueType              : ['float32'];
		
		attribute<Bool>                        HasClaims                       : [TRUE];
		attribute<Bool>                        HasAlloc                        : [TRUE];
		attribute<Bool>                        IsVastgoed                      : [FALSE];
		attribute<Bool>                        UseForLeegstandCorr             : [FALSE];
	}
	
	unit<UInt8> Sector := cat_range(uint8, 0b, uint8(#VariantParameters/SectorAllocRegio/Uq_Sectors)) 
	{
		attribute<String> name               := ='union_data(., '+asList(quote(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname), ',')+')';
		attribute<String> Subsector_name     := ='union_data(., '+asList(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'K/Subsector_name', ',')+')';
		attribute<String> SrcRefGeschiktheid := ='union_data(., '+asList(quote(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'/Varianten/@V@/@SS@'), ',')+')';
		attribute<String> StandVar_name      := ='union_data(., '+asList(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'K/StandVar_name', ',')+')';
		attribute<String> StandVar_valueType := ='union_data(., '+asList(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'K/StandVar_valueType', ',')+')';
		attribute<String> Subsector_ref      := ='union_data(., '+asList(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'K/Subsector_ref', ',')+')';
		attribute<UInt32> BrushColor         := ='union_data(., '+asList(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'K/BrushColor', ',')+')';
		attribute<String> ValUnit_ref        := ='union_data(., '+asList(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'K/ValUnit_ref', ',')+')';
		attribute<String> ValUnitDens_ref    := ='union_data(., '+asList(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'K/ValUnitDens_ref', ',')+')';
		attribute<String> ValUnit_ref2       := ='union_data(., '+asList(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'K/ValUnit_ref2', ',')+')';
		attribute<String> ref                := ='union_data(., '+asList(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'K/ref', ',')+')';
		attribute<String> SrcRefRestricties  := ='union_data(., '+asList(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'K/SrcRefRestricties', ',')+')';
		attribute<String> Label              := name;
		
		attribute<Bool>   HasClaims            := ='union_data(., '+asList(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'K/HasClaims', ',')+')';
		attribute<Bool>   HasAlloc             := ='union_data(., '+asList(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'K/HasAlloc', ',')+')';
		attribute<Bool>   IsVastgoed           := ='union_data(., '+asList(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'K/IsVastgoed', ',')+')';
		attribute<Bool>   UseForLeegstandCorr  := ='union_data(., '+asList(/VariantParameters/SectorAllocRegio/Uq_Sectors/Sectorname+'K/UseForLeegstandCorr', ',')+')';
		
		unit<UInt8> wo_Landbouw := select_with_attr_by_cond(., lowercase(name) != lowercase('Landbouw'));
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		
		container xSubsectoren := for_each_ne(name, 'Templates/SectorxSubsector_T('+quote(name)+','+quote(Subsector_ref)+')');
		
		unit<UInt32> xSubsector := = 'union_unit('+asItemList('xSubsectoren/'+Sector/name+'/Subsector')+')'
		{
			attribute<Sector> Sector_rel           := rlookup(lowercase(Sector_name), lowercase(Sector/name));
			attribute<String> Sector_name          := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/Sector_name')+')';
			attribute<String> Subsector_name       := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/Subsector_name')+')';
			attribute<String> Subsector_ref        := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/Subsector_ref')+')';
			attribute<String> ValUnit_ref          := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/ValUnit_ref')+')';
			attribute<String> ValUnitDens_ref      := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/ValUnitDens_ref')+')';
			attribute<String> StandVar_name        := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/StandVar_name')+')';
			attribute<String> StandVar_path        := Sector_name + '/' +Subsector_name;
			attribute<String> StandVar_valueType   := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/StandVar_valueType')+')';
			attribute<String> name                 := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/name')+')';
			attribute<String> name_Totaal          := lowercase(Sector_name) == lowercase('Wonen') ? name+'/Totaal' : name;
			attribute<String> Label                := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/Label')+')';
			attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/CBSKlasse_Aggr_rel')+')';
			attribute<UInt32> BrushColor           := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/BrushColor')+')', DialogType = "BrushColor";
			attribute<String> SrcRefGeschiktheid   := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/SrcRefGeschiktheid')+')';
			attribute<String> SrcRefRestricties    := = 'union_data(.,'+asItemList('Sector/xSubsectoren/'+Sector/name+'/Subsector/SrcRefRestricties')+')';
			attribute<String> ClaimRegio           := rjoin(lowercase(Sector_name), lowercase(CaseClassifications/Actor/SectorAllocRegio/Sector_name), CaseClassifications/Actor/SectorAllocRegio/name);
			attribute<String> ClaimRegio_name      := rjoin(lowercase(Sector_name), lowercase(CaseClassifications/Actor/SectorAllocRegio/Sector_name), CaseClassifications/Actor/SectorAllocRegio/AllocRegio_name);
			attribute<Jobs6>  Jobs6_rel            := rlookup(lowercase(Subsector_name), lowercase(Jobs6/name));
			attribute<LandbouwKlasses>    LandbouwK_rel    := rlookup(lowercase(Subsector_name), lowercase(LandbouwKlasses/name));
			attribute<LU_ModelType> LU_ModelType_rel := MakeDefined(rlookup(Label, LU_ModelType/Label), rlookup(lowercase(Sector_name), lowercase(LU_ModelType/Sector_name)));
			
			attribute<Bool>   HasClaims            := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/HasClaims')+')';
			attribute<Bool>   HasAlloc             := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/HasAlloc')+')';
			attribute<Bool>   IsVastgoed           := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/IsVastgoed')+')';
			attribute<Bool>   UseForLeegstandCorr  := = 'union_data(.,'+asItemList('xSubsectoren/'+Sector/name+'/Subsector/UseForLeegstandCorr')+')';
			
			attribute<String> ExportName           := string(id(.)) +'_'+Label;
			
			container V := for_each_nedv(Label, string(id(.))+'[..]', void, .);
			unit<UInt32> wo_Landbouw := select_with_attr_by_cond(., lowercase(Sector_name) != lowercase('Landbouw'));
		}
		unit<UInt8> xSubsector_uint8 := range(uint8, 0b, uint8(#xSubsector))
		{
			attribute<UInt32> BrushColor := union_data(.,  xSubsector/BrushColor);
		}
		
		unit<UInt32> Wonen_x_Werken := ='union_unit('+Subsector_ref[V/Wonen]+','+Subsector_ref[V/Werken]+')'
		{
			attribute<String> Subsector_name := ='union_data(., '+Subsector_ref[V/Wonen]+'/name,'+Subsector_ref[V/Werken]+'/name)';
			attribute<String> Sector_name    := ='union_data(., const(''Wonen'','+Subsector_ref[V/Wonen]+'), const(''Werken'','+Subsector_ref[V/Werken]+'))';
		}
	}

 	// unit<UInt8> Sector_wLandbouw := union_unit_uint8(Sector, LandbouwKlasses)
	// {
		// attribute<String> name               := union_data(., Sector/name, LandbouwKlasses/name);
		
		// attribute<String> SrcRefGeschiktheid := union_data(., Sector/SrcRefGeschiktheid, LandbouwK/SrcRefGeschiktheid);
		// attribute<String> Subsector_ref      := union_data(., Sector/Subsector_ref, LandbouwK/Subsector_ref);
		// attribute<UInt32> BrushColor         := union_data(., Sector/BrushColor, LandbouwK/BrushColor);
		// attribute<String> ValUnit_ref        := union_data(., Sector/ValUnit_ref, LandbouwK/ValUnit_ref);
		// attribute<String> ValUnitDens_ref    := union_data(., Sector/ValUnitDens_ref, LandbouwK/ValUnitDens_ref);
		// attribute<String> ValUnit_ref2       := union_data(., Sector/ValUnit_ref2, LandbouwK/ValUnit_ref2);
		// attribute<String> ref                := union_data(., Sector/ref, LandbouwK/ref);
		// attribute<String> SrcRefRestricties  := union_data(., Sector/SrcRefRestricties, LandbouwK/SrcRefRestricties);
		// attribute<String> Label              := name;
	// }
 
	unit<UInt32> LU_ModelType := ='union_unit(Sector/wo_Landbouw, LandbouwKlasses, AdditioneleK)'
	{
		// attribute<Sector_wLandbouw>          Sector_wLandbouw_rel := rlookup(Sector_name, Sector_wLandbouw/name);
		attribute<String>                    Sector_name          := union_data(., Sector/wo_Landbouw/name, const('Landbouw', LandbouwKlasses), AdditioneleK/Sector_name);
		attribute<String>                    Subsector_name       := union_data(., Sector/wo_Landbouw/Subsector_name, LandbouwKlasses/Subsector_name, AdditioneleK/Subsector_name);
		attribute<UInt32>                    BrushColor           := union_data(., Sector/wo_Landbouw/BrushColor, LandbouwKlasses/BrushColor, AdditioneleK/BrushColor), DialogType = "BrushColor";
		attribute<String>                    Label                := Sector_name + '_' + Subsector_name;
		attribute<String>                    name                 := Label;
		attribute<LandbouwKlasses>           LandbouwK_rel        := rlookup(lowercase(Subsector_name), lowercase(LandbouwKlasses/name));
		attribute<Landbouw/VoederCategorie>  Voedergewas_rel      := LandbouwKlasses/Voedergewas_rel[LandbouwK_rel];
		attribute<String>                    nameShort            := IsLandbouw ? Subsector_name : Sector_name;
		attribute<Bool>                      IsLandbouw           := IsDefined(LandbouwK_rel);
		attribute<Bool>                      IsStedelijk          := lowercase(Sector_name) != lowercase('Landbouw') && lowercase(Sector_name) != lowercase('Natuur') && lowercase(Sector_name) != lowercase('Water') && lowercase(Sector_name) != lowercase('Overig');
		attribute<Bool>                      IsGgVeeteelt         := id(.) == V/Landbouw_GG_vee || id(.) == V/Landbouw_GG_vee_extensief || id(.) == V/Landbouw_GG_vee_intensief;
		attribute<Sector>                    Sector_rel           := rlookup(lowercase(Sector_name), lowercase(Sector/name));
		
		attribute<String>                    ExportName           := string(id(.)) +'_'+nameShort;
		
		container V := for_each_nedv(Label, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt8> LandbouwKlasses : NrOfRows = 10
	{	
		unit<Uint32> Elements:= range(uint32, 0, nrAttr*#.)
		{
			attribute<String> Text: [ 
			// Label                             , r   , g   , b,   landgebruik_rel                                   , 
			 'Rietteelt'                          ,'252','241','145','' //
			,'Akkerbouw'                          ,'230','208','175',''   //
			// ,'groenteteelt'                       ,'254',  '0','197',''
			,'Cranberry'                          ,'210','54', '85','' //
			,'Boomgaard'                          ,'0','204','102',''  //
			,'Moerasbomen'                        ,'204','204','0','' //
			,'Rijst'                              ,'250','204','204','' //
			,'Yacon'                              ,'218','126','129','' //

			,'GG_vee_extensief'                   ,'204','255', '204','VoederCategorie/V/extensive'//
			,'GG_vee'                             ,'178','255','102','VoederCategorie/V/standard' //
			,'GG_vee_intensief'                   ,'128','255',  '0','VoederCategorie/V/intensive' //
			];
		}
		attribute<String>                   Label               := Elements/Text[value(Uint32(id(.))* nrAttr +  0, Elements)];
		attribute<String>                   name                := AsItemName(Label);
		attribute<String>                   Subsector_name      := name;
		attribute<String>                   Subsector_ref       := const('LandbouwKlasses',.); 
		attribute<String>                   YR_Filename         := name;
		attribute<Bool>                     IsExotisch          := rjoin(LowerCase(YR_Filename), LowerCase(/Classifications/Landbouw/GewasSoortYR/LandbouwK), lowercase(/Classifications/Landbouw/GewasSoortYR/YR_bron)) == lowercase('Exotisch');
		attribute<UInt32>                   BrushColor          := rgb(R,G / 256,B / 256 / 256), DialogType = "BrushColor";
		unit<Uint32>                        ColorCoord;
		attribute<ColorCoord>               r                   := value(Elements/Text[value(Uint32(id(.))* nrAttr +  1, Elements)], ColorCoord);
		attribute<ColorCoord>               g                   := value(Elements/Text[value(Uint32(id(.))* nrAttr +  2, Elements)], ColorCoord)*256;
		attribute<ColorCoord>               b                   := value(Elements/Text[value(Uint32(id(.))* nrAttr +  3, Elements)], ColorCoord)*256*256;

		attribute<String>                   gg_Type_rel_str     := Elements/Text[value(Uint32(id(.))* nrAttr +  4, Elements)];
		attribute<String>                   Voedergewas_str     := lowercase(left(gg_Type_rel_str,3)) == lowercase('Voe') ? gg_Type_rel_str : '';
		attribute<Landbouw/VoederCategorie> Voedergewas_rel     := ='union_data(., '+asItemList(Voedergewas_str != '' ? 'Landbouw/'+Voedergewas_str : 'null_b')+')'; 

		attribute<Float32>                  Count_GewasSoortYR  := pcount(Landbouw/GewasSoortYR/LandbouwK_rel)[float32];
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		attribute<Actor/Sector>                Sector_rel              := const(Actor/Sector/V/Landbouw, .);
		// attribute<Bool>                        KanLokaalHogereDichtheidKrijgen : [FALSE];
		// attribute<Sector_wLandbouw>            Sector_wLandbouw_rel            := ='const(Sector_wLandbouw/V/Landbouw, .)';
		attribute<String>                      Sector_name                     := const('Landbouw', .);
		attribute<String>                      SrcRefGeschiktheid              := const('Landbouw', .);
		attribute<String>                      Sector_name_Thisname            := Sector_name+'/'+name;
		// attribute<Sector/xSubsector>           SectorxSubSector_rel            := rlookup(FullLabel, Sector/xSubsector/Label);
		attribute<LU_ModelType>                LU_ModelType_rel                := rlookup(lowercase(FullLabel), lowercase(LU_ModelType/Label));
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel              := const((0/0)[Grondgebruik/CBSKlasse/Aggr], .);
		attribute<String>                      FullLabel                       := Sector_name + '_' + name;
		attribute<Jobs6>                       Jobs6_rel                       := const(null_b,.);
		
		attribute<String>                      ValUnitDens_ref                 := const('ha',.);
		attribute<String>                      ValUnit_ref2                    := const('ha',.); 
		attribute<String>                      ref                             := const('Landbouw',.);
		attribute<String>                      SrcRefRestricties               := const('Landbouw',.);
		
		attribute<String>                      StandVar_name      := const('ha_@SS@',.);
		attribute<String>                      StandVar_valueType := const('float32',.);
		attribute<String>                      ValUnit_ref        := const('Ha',.);
		attribute<Bool>                        HasClaims                       := const(TRUE,.);
		attribute<Bool>                        HasAlloc                        := const(TRUE,.);
		attribute<Bool>                        IsVastgoed                      := const(FALSE,.);
		attribute<Bool>                        UseForLeegstandCorr             := const(FALSE,.);
		
		parameter<UInt32> nrAttr := 5;

	}
	
	unit<UInt8> NonLandbouwK : NrOfRows = 1
	{
		attribute<String>                   Label               : ['NonLandbouw'];
		attribute<String>                   name                := AsItemName(Label);
		attribute<UInt32>                   BrushColor          : [rgb(128,128,128)], DialogType = "BrushColor";
	}
	
	unit<UInt8> LandbouwK_alloc := union_unit_uint8(LandbouwKlasses, NonLandbouwK)
	{
		attribute<UInt32>                   BrushColor            := union_data(., LandbouwKlasses/BrushColor, NonLandbouwK/BrushColor), DialogType = "BrushColor";
		attribute<String>                   Label                 := union_data(., LandbouwKlasses/Label, NonLandbouwK/Label);
		attribute<String>                   name                  := AsItemName(Label);
		attribute<String>                   Sector_name           := const('Landbouw',.);
		attribute<String>                   Sector_name_Thisname  := Sector_name+'/'+name;
		attribute<LandbouwKlasses>          LandbouwK_rel         := union_data(., id(LandbouwKlasses), const(null_b, NonLandbouwK));
		attribute<Bool>                     IsExotisch            := union_data(., LandbouwKlasses/IsExotisch, const(FALSE, NonLandbouwK));
		
		unit<UInt8> wo_Exotisch := select_with_attr_by_cond(.,IsExotisch);
	}

	unit<UInt32> EigendomK: NrOfRows = 8
	{
		attribute<String> name: ['Commercieel','Corporatie','Gemeente','Waterschap','Provincie','Rijk','NatuurOrganisatie','Overigen'];
		attribute<Bool> IsOntwikkelendePartij := id(.) == V/Gemeente || id(.) == V/Corporatie || id(.) == V/Commercieel;
		attribute<Bool> IsMaatschappelijk := id(.) == V/Gemeente || id(.) == V/Corporatie || id(.) == V/Waterschap || id(.) == V/Provincie || id(.) == V/Rijk || id(.) == V/NatuurOrganisatie;
		attribute<Bool> IsOntwikkelendePartijEnMaatschappelijk := IsOntwikkelendePartij && IsMaatschappelijk;
		attribute<Bool> IsOntwikkelendePartijEnCommercieel := id(.) == V/Commercieel;
		attribute<String> Label := name, DialogType = "LabelText";
		attribute<UInt32> BrushColor: [rgb(254, 50,0), rgb(115,76,0), rgb(254,238,0), rgb(151,219,242),rgb(169,169,169), rgb(173,164,254), rgb(103,174,0), rgb(255,255,255)], DialogType = "BrushColor";

		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}

	unit<UInt32> SBI08
	:  StorageName = "%RSo_DataDir%/Vastgoed/SBI2008_2018_TIGRIS_sector.csv"
	,  StorageType = "gdal.vect"
	,  StorageReadOnly = "True" 
	{
		attribute<TXLJobs9> TXLJobs9_rel := Tigris_sector[TXLJobs9];
		attribute<TXLJobs7> TXLJobs7_rel := TXLJobs9/TXLJobs7_rel[TXLJobs9_rel];
		attribute<String> TXL7_name := TXLJobs7/name[TXLJobs7_rel];
	}
	
	unit<UInt8> TXLJobs11: NrOfRows = 11
	{
		attribute<String>   name         : 
											[
												  'industrie'
												, 'Nijverheid'
												, 'transport'
												, 'Ov_consumentendiensten'
												, 'dir_consumentendiensten'
												, 'Zak_dienstverlening'
												, 'Detailhandel'
												, 'Logistiek'
												, 'zorg'
												, 'overheid_onderwijs'
												, 'Landbouw'
											];
		attribute<Jobs6> Jobs6_rel       := union_data(., 
												  Jobs6/V/Nijverheid
												, Jobs6/V/Nijverheid
												, Jobs6/V/Logistiek
												, Jobs6/V/Ov_consumentendiensten
												, Jobs6/V/Ov_consumentendiensten
												, Jobs6/V/Zak_dienstverlening
												, Jobs6/V/Detailhandel
												, Jobs6/V/Logistiek
												, Jobs6/V/Overheid_kw_diensten
												, Jobs6/V/Overheid_kw_diensten
												, (0/0)[jobs6]
											);
		attribute<String>   Label        := name, DialogType = "LabelText";
		attribute<String>   TXLTbl_Ref   := name;
		
		attribute<Jobs6>    Aggregatie_rel := Jobs6_rel;
		attribute<String>   Aggregatie_Unit := const('Jobs6',.);
	}
	
	
	
	unit<UInt8> Jobs6: NrOfRows = 6
	{
		attribute<String> name: ['Nijverheid', 'Logistiek', 'Detailhandel', 'Ov_consumentendiensten', 'Zak_dienstverlening', 'Overheid_kw_diensten'];
		attribute<String> Label := name, DialogType = "LabelText";
		attribute<UInt32> BrushColor: [rgb(192,192,192), rgb(96,96,96), rgb(255,153,255),rgb(255, 204, 255),rgb(229, 204, 255),rgb(204, 153, 255)], DialogType = "BrushColor";
		attribute<String> vbo_gebruiksdoel_ref := union_data(., '@industrie# + @utiliteit_combi#','@Logistiek#', '@winkel#', '@bijeenkomst# + @sport#', '@Kantoor#', '@cel# + @Gezondheidszorg# + @onderwijs#'); // @Jip2021: hoe automatiseren we dit? Maw: hoe aggregeren over kolommen obv een relatie, zoals met de sum over rijen?		attribute<Bool> KanLokaalHogereDichtheidKrijgen: [FALSE, TRUE, TRUE, TRUE, TRUE];
		attribute<String> vbo_gebruiksdoel_ref_bagnieuwbouwsloop := union_data(., '@industrie# + @utiliteit_combi#','@Logistiek#', '@winkel#', '@bijeenkomst# - @sport#', '@Kantoor#', '@cel# - @Gezondheidszorg# - @onderwijs#'); // @Jip2021: hoe automatiseren we dit? Maw: hoe aggregeren over kolommen obv een relatie, zoals met de sum over rijen?		attribute<Bool> KanLokaalHogereDichtheidKrijgen: [FALSE, TRUE, TRUE, TRUE, TRUE];
		attribute<String> vbo_gebruiksdoel_plus_ref := union_data(., '@industrie# + @utiliteit_combi#','@Logistiek#', '@winkel#', '@bijeenkomst# + @sport# + @logies#', '@Kantoor#', '@cel# + @Gezondheidszorg# + @onderwijs#'); // @Jip2021: hoe automatiseren we dit? Maw: hoe aggregeren over kolommen obv een relatie, zoals met de sum over rijen?		attribute<Bool> KanLokaalHogereDichtheidKrijgen: [FALSE, TRUE, TRUE, TRUE, TRUE];
		attribute<Bool>   KanLokaalHogereDichtheidKrijgen: [TRUE, TRUE, TRUE, TRUE, TRUE, TRUE];
		attribute<Sector> Sector_rel := const(Sector/V/Werken, .);
		attribute<Sector/xSubsector> SectorxSubSector_rel := rjoin(lowercase(name), lowercase(Sector/xSubsector/Subsector_name), id(Sector/xSubsector));
		attribute<String> Sector_name := Sector/name[Sector_rel];
		attribute<String> Sector_name_Thisname := Sector_name+'/'+name;
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel := union_data(.,
			Grondgebruik/CBSKlasse/Aggr/V/bedrijfsterreinen,
			Grondgebruik/CBSKlasse/Aggr/V/bedrijfsterreinen,
			Grondgebruik/CBSKlasse/Aggr/V/Detailhandel_en_horeca,
			Grondgebruik/CBSKlasse/Aggr/V/Detailhandel_en_horeca,
			Grondgebruik/CBSKlasse/Aggr/V/bedrijfsterreinen,
			Grondgebruik/CBSKlasse/Aggr/V/Voorzieningen
		);
		attribute<.>                       Jobs6_rel := id(.);

		container CBSKlassen := for_each_ne(Grondgebruik/CBSKlasse/Aggr/name, 'Jobs6T('+string(id(Grondgebruik/CBSKlasse/Aggr))+'[Grondgebruik/CBSKlasse/Aggr], ..)');
		
		Template Jobs6T
		{
			//
			parameter<Grondgebruik/CBSKlasse/Aggr> id;
			unit<UInt8> Jobs6;
			//
			
			unit<UInt8> subset := select_with_org_rel(Jobs6/CBSKlasse_Aggr_rel == id)
			{
				attribute<String> name := Jobs6/name[org_rel];
			}
		}
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt8> TXLJobs9: NrOfRows = 9
	{
		attribute<String>   name         : ['Onbekend', 'Landbouw', 'Nijverheid', 'Logistiek', 'Zak_dienstverlening', 'Overheid_kw_diensten', 'Ov_consumentendiensten', 'Detailhandel', 'Zorg'];
		attribute<TXLJobs7> TXLJobs7_rel := union_data(., (0/0)[TXLJobs7], 0[TXLJobs7], 1[TXLJobs7], 2[TXLJobs7], 5[TXLJobs7], 6[TXLJobs7], 4[TXLJobs7], 3[TXLJobs7], 6[TXLJobs7]);
		attribute<String>   Label        := name, DialogType = "LabelText";
		attribute<String>   TXLTbl_Ref   := name;
	}
	
	unit<UInt8> TXLJobs7: NrOfRows = 7
	{
		attribute<String> name:
		[
			'Landbouw',
			'Nijverheid',
			'Logistiek',
			'Detailhandel',
			'Ov_consumentendiensten',
			'Zak_dienstverlening',
			'Overheid_kw_diensten'
		];
		
		// attribute<Actor/jobs5> jobs5_rel := union_data(.,
			// (0/0)[Actor/jobs5],
			// Actor/jobs5/V/NijverheidEnLogistiek,
			// Actor/jobs5/V/NijverheidEnLogistiek,
			// Actor/jobs5/V/Detailhandel,
			// Actor/jobs5/V/Ov_consumentendiensten,
			// Actor/jobs5/V/Zak_dienstverlening,
			// Actor/jobs5/V/Overheid_kw_diensten
		// );
		
		attribute<String> Label       := name, DialogType = "LabelText";
		attribute<String> TXLTbl_Ref  := name;
		attribute<UInt32> BrushColor  : [rgb(233,255,190),rgb(61, 61, 92),rgb(0, 45, 179),rgb(179, 0, 179),rgb(204, 163, 0)           ,rgb(255, 0, 255)      ,rgb(230, 115, 0)], DialogType = "BrushColor";
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt8> TXLJobs6 := select_with_org_rel(lowercase(TXLJobs7/name) != lowercase('Landbouw'))
	{
		attribute<String> name       := TXLJobs7/name[org_rel];
		attribute<UInt32> BrushColor := TXLJobs7/BrushColor[org_rel];
		attribute<String> Label      := name, DialogType = "LabelText";
		attribute<String> TXLTbl_Ref := name;
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt8> NoData: NrOfRows = 1
	{
		attribute<String> name: ['geen'];
		attribute<String> Label := name, DialogType = "LabelText";
		attribute<String> TXLTbl_Ref := name;
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt8> TXLJobs7_noData := union_unit_uint8(NoData, TXLJobs7)
	{
		attribute<String>   name         := union_data(., NoData/name, TXLJobs7/name);
		attribute<String>   Label        := union_data(., NoData/Label, TXLJobs7/Label), DialogType = "LabelText";
		attribute<TXLJobs7> TXLJobs7_rel := union_data(., (0/0)[TXLJobs7], 0[TXLJobs7], 1[TXLJobs7], 2[TXLJobs7], 3[TXLJobs7], 4[TXLJobs7], 5[TXLJobs7], 6[TXLJobs7]);
		attribute<String>   TXLTbl_Ref := name;
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt8> Restrictie_HardheidK: NrOfRows = 4
	{
		attribute<String> name:
		[
			'ZeerHard',
			'Hard',
			'Middel',
			'Zacht'
		];
		attribute<String> Label := name;
	}
	
	unit<UInt8> Stimuli_HardheidK: NrOfRows = 3
	{
		attribute<String> name:
		[
			'Hard',
			'Middel',
			'Zacht'
		];
		attribute<String> Label := name;
	}
	// unit<UInt32> Sector_x_ResHardheidK := combine(Sector,Restrictie_HardheidK)
	unit<UInt32> Sector_x_ResHardheidK := combine(Sector/wo_Landbouw,Restrictie_HardheidK)
	{
		attribute<String> Sector_name     := Sector/wo_Landbouw/name[first_rel];
		attribute<String> HardheidK_name  := Restrictie_HardheidK/name[second_rel];
		attribute<String> name            := Sector_name+'_'+HardheidK_name;
		attribute<String> Label           := Sector_name+'/'+HardheidK_name;
	}
	unit<UInt32> Sector_x_StimHardheidK := combine(Sector/wo_Landbouw,Stimuli_HardheidK)
	{
		attribute<String> Sector_name     := Sector/wo_Landbouw/name[first_rel];
		attribute<String> HardheidK_name  := Stimuli_HardheidK/name[second_rel];
		attribute<String> name            := Sector_name+'_'+HardheidK_name;
		attribute<String> Label           := Sector_name+'/'+HardheidK_name;
	}
}