container Actor
{
	unit<uint8> WonenK: NrOfRows = 1
	{
		attribute<string> sector_name        : ['Wonen'];
		attribute<string> subsector_name     : ['Totaal'];
		attribute<uint32> BrushColor         : [rgb(255,0,0)];
		attribute<string> ref                : ['Woongebied'];
		attribute<string> SrcRefRestricties  : ['Woongebied'];
		attribute<string> Subsector_ref      : ['Classifications/Vastgoed/WP2xVSSH']; 
		
		attribute<string> ValUnit_ref        : ['Woning'];
		attribute<string> ValUnitDens_ref    : ['Woning_ha'];
		attribute<string> ValUnit_ref2       : ['Woningen']; 
		
	}
	
	unit<uint8> WerkenK: NrOfRows = 1
	{
		attribute<string> sector_name        : ['Werken'];
		attribute<string> subsector_name     : ['Totaal'];
		attribute<uint32> BrushColor         : [rgb(192,192,192)];
		attribute<string> ref                : ['Bedrijventerrein'];
		attribute<string> SrcRefRestricties  : ['Bedrijventerrein'];
		attribute<string> Subsector_ref      : ['Classifications/Actor/Jobs6']; 
		
		attribute<string> ValUnit_ref        : ['Job'];
		attribute<string> ValUnitDens_ref    : ['Job_ha'];
		attribute<string> ValUnit_ref2       : ['Banen']; 
	}
	unit<uint8> AdditioneleK: NrOfRows = 4
	{
		attribute<string> sector_name    : ['Natuur','Infra','Water','Overig'];
		attribute<string> subsector_name := const('Totaal',.);
		attribute<uint32> BrushColor     : [rgb(103,174,0),rgb(115,76,0),rgb(151,219,242),rgb(255,255,255)];
	}
	
	unit<uint8> VerblijfsrecreatieK : NrOfRows = 1
	{
		attribute<string>                      name                 : ['Totaal'];
		attribute<string>                      SubSector_name       := name;
		attribute<string>                      label                := name, DialogType = "LabelText";
		attribute<bool>                        KanLokaalHogereDichtheidKrijgen: [true];
		attribute<Sector>                      Sector_rel           := const(Sector/V/Verblijfsrecreatie, .);
		attribute<string>                      Sector_name          := Sector/name[sector_rel];
		attribute<string>                      Sector_name_ThisName := Sector_name+'/'+name;
		attribute<Sector/xSubSector>           SectorxSubSector_rel := rjoin(name, Sector/xSubSector/SubSector_name, id(Sector/xSubSector));
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel   := union_data(., Grondgebruik/CBSKlasse/Aggr/V/verblijfsrecreatie);
		attribute<uint32>                      BrushColor           : [rgb(102, 0, 0)], DialogType = "BrushColor";
		attribute<Jobs6>                       Jobs6_rel            := const(null_b,.);
		attribute<string>                      ref                  : ['Verblijfsrecreatie'];
		attribute<string>                      SrcRefRestricties    : ['Verblijfsrecreatiegebied'];
		attribute<string>                      Subsector_ref        : ['Classifications/Actor/VerblijfsrecreatieK']; 
		attribute<string>                      ValUnit_ref          : ['Verblijfsobject'];
		attribute<string>                      ValUnitDens_ref      : ['vbo_ha'];
		attribute<string>                      ValUnit_ref2         : ['Woningen']; 
		container CBSKlassen := for_each_ne(Grondgebruik/CBSKlasse/Aggr/name, 'WP1T('+string(id(Grondgebruik/CBSKlasse/Aggr))+'[Grondgebruik/CBSKlasse/Aggr], ..)');
		
		Template WP1T
		{
			//
			parameter<Grondgebruik/CBSKlasse/Aggr> id;
			unit<uint8> WP1;
			//
			
			unit<uint8> Subset := select_with_org_rel(WP1/CBSKlasse_Aggr_rel == id)
			{
				attribute<string> name := WP1/name[org_rel];
			}
		}
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> WindK: NrOfRows = 1
	{
		attribute<string>                      name                            : ['Totaal'];
		attribute<string>                      SubSector_name                  := name;
		attribute<string>                      label                           := name, DialogType = "LabelText";
		attribute<bool>                        KanLokaalHogereDichtheidKrijgen : [true];
		attribute<Sector>                      Sector_rel                      := const(Sector/V/Wind, .);
		attribute<string>                      Sector_name                     := Sector/name[sector_rel];
		attribute<string>                      Sector_name_ThisName            := Sector_name+'/'+name;
		attribute<Sector/xSubSector>           SectorxSubSector_rel            := rjoin(FullLabel, Sector/xSubSector/Label, id(Actor/Sector/xSubSector));
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel              := const((0/0)[Grondgebruik/CBSKlasse/Aggr], .);
		attribute<string>                      FullLabel                       := Sector_name + '_' + name;
		attribute<uint32>                      BrushColor                      : [rgb(0, 0, 0)], DialogType = "BrushColor";
		attribute<Jobs6>                       Jobs6_rel                       := const(null_b,.);
		attribute<string>                      ref                             : ['Wind'];
		attribute<string>                      SrcRefRestricties               : ['Wind'];
		attribute<string>                      Subsector_ref                   : ['Classifications/Actor/WindK']; 
		attribute<string>                      ValUnit_ref                     : ['MW'];
		attribute<string>                      ValUnitDens_ref                 : ['MW_ha'];
		attribute<string>                      ValUnit_ref2                    : ['Wind']; 
	}
	
	unit<uint8> ZonK: NrOfRows = 1
	{
		attribute<string>                      name                            : ['Totaal'];
		attribute<string>                      SubSector_name                  := name;
		attribute<string>                      label                           := name, DialogType = "LabelText";
		attribute<bool>                        KanLokaalHogereDichtheidKrijgen : [true];
		attribute<Actor/Sector>                Sector_rel                      := const(Actor/Sector/V/Zon, .);
		attribute<string>                      Sector_name                     := Actor/Sector/name[sector_rel];
		attribute<string>                      Sector_name_ThisName            := Sector_name+'/'+name;
		attribute<Actor/Sector/xSubSector>     SectorxSubSector_rel            := rjoin(FullLabel, Actor/Sector/xSubSector/Label, id(Actor/Sector/xSubSector));
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel              := const((0/0)[Grondgebruik/CBSKlasse/Aggr], .);
		attribute<string>                      FullLabel                       := Sector_name + '_' + name;
		attribute<uint32>                      BrushColor                      : [rgb(255, 255, 102)], DialogType = "BrushColor";
		attribute<Jobs6>                       Jobs6_rel                       := const(null_b,.);
		attribute<string>                      ref                             : ['Zon'];
		attribute<string>                      SrcRefRestricties               : ['Zon'];
		attribute<string>                      Subsector_ref                   : ['Classifications/Actor/ZonK']; 
		attribute<string>                      ValUnit_ref                     : ['MW'];
		attribute<string>                      ValUnitDens_ref                 : ['MW_ha'];
		attribute<string>                      ValUnit_ref2                    : ['Zon']; 
	}
	
	unit<uint8> Sector := cat_range(uint8, 0b, uint8(#VariantParameters/SectorAllocRegio/Uq_Sectors)) 
	{
		attribute<string> name               := ='union_data(., '+AsList(quote(/VariantParameters/SectorAllocRegio/Uq_Sectors/SectorName), ',')+')';
		attribute<string> subsector_name     := ='union_data(., '+AsList(/VariantParameters/SectorAllocRegio/Uq_Sectors/SectorName+'K/subsector_name', ',')+')';
		attribute<string> SrcRefGeschiktheid := ='union_data(., '+AsList(quote(/VariantParameters/SectorAllocRegio/Uq_Sectors/SectorName+'/Varianten/@V@/@SS@'), ',')+')';
		attribute<string> Subsector_ref      := ='union_data(., '+AsList(/VariantParameters/SectorAllocRegio/Uq_Sectors/SectorName+'K/Subsector_ref', ',')+')';
		attribute<uint32> BrushColor         := ='union_data(., '+AsList(/VariantParameters/SectorAllocRegio/Uq_Sectors/SectorName+'K/BrushColor', ',')+')';
		attribute<string> ValUnit_ref        := ='union_data(., '+AsList(/VariantParameters/SectorAllocRegio/Uq_Sectors/SectorName+'K/ValUnit_ref', ',')+')';
		attribute<string> ValUnitDens_ref    := ='union_data(., '+AsList(/VariantParameters/SectorAllocRegio/Uq_Sectors/SectorName+'K/ValUnitDens_ref', ',')+')';
		attribute<string> ValUnit_ref2       := ='union_data(., '+AsList(/VariantParameters/SectorAllocRegio/Uq_Sectors/SectorName+'K/ValUnit_ref2', ',')+')';
		attribute<string> ref                := ='union_data(., '+AsList(/VariantParameters/SectorAllocRegio/Uq_Sectors/SectorName+'K/ref', ',')+')';
		attribute<string> SrcRefRestricties  := ='union_data(., '+AsList(/VariantParameters/SectorAllocRegio/Uq_Sectors/SectorName+'K/SrcRefRestricties', ',')+')';
		attribute<string> Label              := name;
		
		unit<uint8> wo_Landbouw := select_with_attr_by_cond(., name != 'Landbouw');
		
		container V := for_each_nedv(name, String(id(.))+'[..]', void, .);
		
		container XSubSectoren := for_each_ne(name, 'Templates/SectorXSubSector_T('+quote(name)+','+quote(Subsector_ref)+')');
		
		unit<uint32> XSubsector := = 'union_unit('+AsItemList('XSubSectoren/'+Sector/name+'/Subsector')+')'
		{
			attribute<Sector> Sector_rel           := rlookup(Sector_name, Sector/name);
			attribute<string> Sector_name          := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/Sector_name')+')';
			attribute<string> SubSector_name       := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/subsector_name')+')';
			attribute<string> Subsector_ref        := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/Subsector_ref')+')';
			attribute<string> ValUnit_ref          := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/ValUnit_ref')+')';
			attribute<string> ValUnitDens_ref      := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/ValUnitDens_ref')+')';
			attribute<string> name                 := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/name')+')';
			attribute<string> name_totaal          := sector_name == 'Wonen' ? name+'/totaal' : name;
			attribute<string> label                := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/label')+')';
			attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/CBSKlasse_Aggr_rel')+')';
			attribute<uint32> BrushColor           := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/BrushColor')+')', DialogType = "BrushColor";
			attribute<string> SrcRefGeschiktheid   := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/SrcRefGeschiktheid')+')';
			attribute<string> SrcRefRestricties    := = 'union_data(.,'+AsItemList('Sector/XSubSectoren/'+Sector/name+'/Subsector/SrcRefRestricties')+')';
			attribute<string> ClaimRegio           := rjoin(Sector_name, CaseClassifications/Actor/SectorAllocRegio/Sector_name, CaseClassifications/Actor/SectorAllocRegio/name);
			attribute<string> ClaimRegio_name      := rjoin(Sector_name, CaseClassifications/Actor/SectorAllocRegio/Sector_name, CaseClassifications/Actor/SectorAllocRegio/allocregio_name);
			attribute<Jobs6>  Jobs6_rel            := rlookup(SubSector_name, Jobs6/name);
			attribute<LandbouwK>    LandbouwK_rel    := rlookup(SubSector_name, LandbouwK/name);
			attribute<LU_ModelType> LU_ModelType_rel := MakeDefined(rlookup(label, LU_ModelType/label), rlookup(sector_name, LU_ModelType/sector_name));
			
			container V := for_each_nedv(label, string(id(.))+'[..]', void, .);
		}
		unit<uint8> XSubsector_uint8 := range(uint8, 0b, uint8(#XSubsector))
		{
			attribute<uint32> BrushColor := union_data(.,  XSubsector/BrushColor);
		}
		
		unit<uint32> Wonen_x_Werken := ='union_unit('+Subsector_ref[V/Wonen]+','+Subsector_ref[V/Werken]+')'
		{
			attribute<string> subsector_name := ='union_data(., '+Subsector_ref[V/Wonen]+'/name,'+Subsector_ref[V/Werken]+'/name)';
			attribute<string> sector_name    := ='union_data(., const(''Wonen'','+Subsector_ref[V/Wonen]+'), const(''Werken'','+Subsector_ref[V/Werken]+'))';
		}
	}

	unit<uint8> Sector_wLandbouw := union_unit_uint8(Sector, LandbouwK)
	{
		attribute<string> name               := union_data(., Sector/name, LandbouwK/name);
		// attribute<string> SrcRefGeschiktheid := union_data(., Sector/SrcRefGeschiktheid, LandbouwK/SrcRefGeschiktheid);
		// attribute<string> Subsector_ref      := union_data(., Sector/Subsector_ref, LandbouwK/Subsector_ref);
		// attribute<uint32> BrushColor         := union_data(., Sector/BrushColor, LandbouwK/BrushColor);
		// attribute<string> ValUnit_ref        := union_data(., Sector/ValUnit_ref, LandbouwK/ValUnit_ref);
		// attribute<string> ValUnitDens_ref    := union_data(., Sector/ValUnitDens_ref, LandbouwK/ValUnitDens_ref);
		// attribute<string> ValUnit_ref2       := union_data(., Sector/ValUnit_ref2, LandbouwK/ValUnit_ref2);
		// attribute<string> ref                := union_data(., Sector/ref, LandbouwK/ref);
		// attribute<string> SrcRefRestricties  := union_data(., Sector/SrcRefRestricties, LandbouwK/SrcRefRestricties);
		// attribute<string> Label              := name;
	}
	
	unit<uint32> LU_ModelType := ='union_unit(Sector, LandbouwK, AdditioneleK)'
	{
		attribute<Sector_wLandbouw>          Sector_wLandbouw_rel := rlookup(Sector_name, Sector_wLandbouw/name);
		attribute<string>                    Sector_name          := union_data(., Sector/name, LandbouwK/name, AdditioneleK/sector_name);
		attribute<string>                    SubSector_name       := union_data(., Sector/SubSector_name, LandbouwK/SubSector_name, AdditioneleK/SubSector_name);
		attribute<uint32>                    BrushColor           := union_data(., Sector/BrushColor, LandbouwK/BrushColor, AdditioneleK/BrushColor), DialogType = "BrushColor";
		attribute<string>                    Label                := Sector_name + '_' + SubSector_name;
		attribute<LandbouwK>                 LandbouwK_rel        := rlookup(SubSector_name, LandbouwK/name);
		attribute<Landbouw/VoederCategorie>  Voedergewas_rel      := LandbouwK/Voedergewas_rel[LandbouwK_rel];
		attribute<string>                    NameShort            := IsLandbouw ? SubSector_name : Sector_name;
		attribute<bool>                      IsLandbouw           := IsDefined(LandbouwK_rel);
		attribute<bool>                      IsStedelijk          := Sector_name != 'Landbouw' && Sector_name != 'Natuur' && Sector_name != 'Water' && Sector_name != 'Overig';
		
		container V := for_each_nedv(label, string(id(.))+'[..]', void, .);
	}
	
	unit<uint8> LandbouwK : NrOfRows = 10
	{	
		unit<UInt32> Elements:= range(uint32, 0, nrAttr*#.)
		{
			attribute<String> Text: [ 
			// Label                             , r   , g   , b,   landgebruik_rel                                   , 
			 'Rietteelt'                          ,'252','241','145','' //
			,'Akkerbouw'                          ,'230','208','175',''   //
			// ,'groenteteelt'                       ,'254',  '0','197',''
			,'Cranberry'                          ,'210','54', '85','' //
			,'Boomgaard'                          ,'0','204','102',''  //
			,'Moerasbomen'                        ,'204','204','0','' //
			,'Rijst'                              ,'250','204','204','' //
			,'Yacon'                              ,'218','126','129','' //

			,'GG_vee_extensief'                   ,'204','255', '204','VoederCategorie/V/extensive'//
			,'GG_vee'                             ,'178','255','102','VoederCategorie/V/standard' //
			,'GG_vee_intensief'                   ,'128','255',  '0','VoederCategorie/V/intensive' //
			];
		}
		attribute<String>                   Label               := Elements/Text[value(UInt32(ID(.))* nrAttr +  0, Elements)];
		attribute<string>                   Name                := AsItemName(label);
		attribute<string>                   SubSector_name      := name;
		attribute<string>                   YR_filename         := Name;
		attribute<uint32>                   BrushColor          := rgb(R,G / 256,B / 256 / 256), DialogType = "BrushColor";
		unit<UInt32>                        ColorCoord;
		attribute<ColorCoord>               r                   := value(Elements/Text[value(UInt32(ID(.))* nrAttr +  1, Elements)], ColorCoord);
		attribute<ColorCoord>               g                   := value(Elements/Text[value(UInt32(ID(.))* nrAttr +  2, Elements)], ColorCoord)*256;
		attribute<ColorCoord>               b                   := value(Elements/Text[value(UInt32(ID(.))* nrAttr +  3, Elements)], ColorCoord)*256*256;

		attribute<string>                   gg_type_rel_str     := Elements/Text[value(UInt32(ID(.))* nrAttr +  4, Elements)];
		attribute<string>                   Voedergewas_str     := left(gg_type_rel_str,3) == 'Voe' ? gg_type_rel_str : '';
		attribute<Landbouw/VoederCategorie> Voedergewas_rel     := ='union_data(., '+AsItemList(Voedergewas_str != '' ? 'Landbouw/'+Voedergewas_str : 'null_b')+')'; 

		attribute<float32>                  Count_GewasSoortYR  := pcount(Landbouw/GewasSoortYR/LandbouwK_rel)[float32];
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		parameter<uint32> nrAttr := 5;

		attribute<bool>                        KanLokaalHogereDichtheidKrijgen : [false];
		attribute<Sector_wLandbouw>            Sector_wLandbouw_rel            := ='const(Sector_wLandbouw/V/Landbouw, .)';
		attribute<string>                      Sector_name                     := Sector_wLandbouw/name[Sector_wLandbouw_rel];
		attribute<string>                      Sector_name_ThisName            := Sector_name+'/'+name;
		// attribute<Sector/xSubSector>           SectorxSubSector_rel            := rlookup(FullLabel, Sector/xSubSector/Label);
		attribute<LU_ModelType>                LU_ModelType_rel                := rlookup(FullLabel, LU_ModelType/Label);
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel              := const((0/0)[Grondgebruik/CBSKlasse/Aggr], .);
		attribute<string>                      FullLabel                       := Sector_name + '_' + name;
		attribute<Jobs6>                       Jobs6_rel                       := const(null_b,.);
	}
	
	unit<uint8> NonLandbouwK : NrOfRows = 1
	{
		attribute<String>                   Label               : ['NonLandbouw'];
		attribute<string>                   Name                := AsItemName(label);
		attribute<uint32>                   BrushColor          : [rgb(128,128,128)], DialogType = "BrushColor";
	}
	
	unit<uint8> LandbouwK_alloc := union_unit_uint8(LandbouwK, NonLandbouwK)
	{
		attribute<uint32>                   BrushColor            := union_data(., LandbouwK/BrushColor, NonLandbouwK/BrushColor), DialogType = "BrushColor";
		attribute<String>                   Label                 := union_data(., LandbouwK/label, NonLandbouwK/label);
		attribute<string>                   Name                  := AsItemName(label);
		attribute<string>                   Sector_name           := const('Landbouw',.);
		attribute<string>                   Sector_name_ThisName  := Sector_name+'/'+name;
		attribute<LandbouwK>                LandbouwK_rel         := union_data(., id(LandbouwK), const(null_b, NonLandbouwK));
	}

	unit<uint32> EigendomK: NrOfRows = 8
	{
		attribute<string> name: ['Commercieel','Corporatie','Gemeente','Waterschap','Provincie','Rijk','NatuurOrganisatie','Overigen'];
		attribute<bool> IsOntwikkelendePartij := id(.) == V/Gemeente || id(.) == V/Corporatie || id(.) == V/Commercieel;
		attribute<bool> IsMaatschappelijk := id(.) == V/Gemeente || id(.) == V/Corporatie || id(.) == V/Waterschap || id(.) == V/Provincie || id(.) == V/Rijk || id(.) == V/NatuurOrganisatie;
		attribute<bool> IsOntwikkelendePartijEnMaatschappelijk := IsOntwikkelendePartij && IsMaatschappelijk;
		attribute<bool> IsOntwikkelendePartijEnCommercieel := id(.) == V/Commercieel;
		attribute<string> Label := name, DialogType = "LabelText";
		attribute<uint32> BrushColor: [rgb(254, 50,0), rgb(115,76,0), rgb(254,238,0), rgb(151,219,242),rgb(169,169,169), rgb(173,164,254), rgb(103,174,0), rgb(255,255,255)], DialogType = "BrushColor";

		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}

	unit<uint32> SBI08
	:  StorageName = "%RSo_DataDir%/Vastgoed/SBI2008_2018_TIGRIS_sector.csv"
	,  StorageType = "gdal.vect"
	,  StorageReadOnly = "True" 
	{
		attribute<TXLJobs9> TXLJobs9_rel := Tigris_sector[TXLJobs9];
		attribute<TXLJobs7> TXLJobs7_rel := TXLJobs9/TXLJobs7_rel[TXLJobs9_rel];
		attribute<string> TXL7_name := TXLJobs7/name[TXLJobs7_rel];
	}
	
	unit<uint8> TXLJobs11: NrOfrows = 11
	{
		attribute<string>   name         : 
											[
												  'industrie'
												, 'nijverheid'
												, 'transport'
												, 'ov_consumentendiensten'
												, 'dir_consumentendiensten'
												, 'zak_dienstverlening'
												, 'detailhandel'
												, 'logistiek'
												, 'zorg'
												, 'overheid_onderwijs'
												, 'landbouw'
											];
		attribute<Jobs6> Jobs6_rel       := union_data(., 
												  Jobs6/V/nijverheid
												, Jobs6/V/nijverheid
												, Jobs6/V/logistiek
												, Jobs6/V/ov_consumentendiensten
												, Jobs6/V/ov_consumentendiensten
												, Jobs6/V/zak_dienstverlening
												, Jobs6/V/detailhandel
												, Jobs6/V/logistiek
												, Jobs6/V/Overheid_kw_diensten
												, Jobs6/V/Overheid_kw_diensten
												, (0/0)[jobs6]
											);
		attribute<string>   Label        := name, DialogType = "LabelText";
		attribute<string>   TXLTbl_Ref   := name;
		
		attribute<Jobs6>    Aggregatie_rel := Jobs6_rel;
		attribute<string>   Aggregatie_Unit := const('Jobs6',.);
	}
	
	
	
	unit<uint8> Jobs6: NrOfRows = 6
	{
		attribute<string> name: ['Nijverheid', 'Logistiek', 'Detailhandel', 'Ov_consumentendiensten', 'Zak_dienstverlening', 'Overheid_kw_diensten'];
		attribute<string> Label := name, DialogType = "LabelText";
		attribute<uint32> BrushColor: [rgb(192,192,192), rgb(96,96,96), rgb(255,153,255),rgb(255, 204, 255),rgb(229, 204, 255),rgb(204, 153, 255)], DialogType = "BrushColor";
		attribute<string> vbo_gebruiksdoel_ref := union_data(., '@industrie# + @utiliteit_combi#','@logistiek#', '@winkel#', '@bijeenkomst# + @sport#', '@kantoor#', '@cel# + @gezondheidszorg# + @onderwijs#'); // @Jip2021: hoe automatiseren we dit? Maw: hoe aggregeren over kolommen obv een relatie, zoals met de sum over rijen?		attribute<bool> KanLokaalHogereDichtheidKrijgen: [false, true, true, true, true];
		attribute<string> vbo_gebruiksdoel_ref_bagnieuwbouwsloop := union_data(., '@industrie# + @utiliteit_combi#','@logistiek#', '@winkel#', '@bijeenkomst# - @sport#', '@kantoor#', '@cel# - @gezondheidszorg# - @onderwijs#'); // @Jip2021: hoe automatiseren we dit? Maw: hoe aggregeren over kolommen obv een relatie, zoals met de sum over rijen?		attribute<bool> KanLokaalHogereDichtheidKrijgen: [false, true, true, true, true];
		attribute<string> vbo_gebruiksdoel_plus_ref := union_data(., '@industrie# + @utiliteit_combi#','@logistiek#', '@winkel#', '@bijeenkomst# + @sport# + @logies#', '@kantoor#', '@cel# + @gezondheidszorg# + @onderwijs#'); // @Jip2021: hoe automatiseren we dit? Maw: hoe aggregeren over kolommen obv een relatie, zoals met de sum over rijen?		attribute<bool> KanLokaalHogereDichtheidKrijgen: [false, true, true, true, true];
		attribute<bool>   KanLokaalHogereDichtheidKrijgen: [true, true, true, true, true, true];
		attribute<Sector> Sector_rel := const(Sector/V/Werken, .);
		attribute<Sector/xSubSector> SectorxSubSector_rel := rjoin(name, Sector/xSubSector/SubSector_name, id(Sector/xSubSector));
		attribute<string> Sector_name := Sector/name[sector_rel];
		attribute<string> Sector_name_ThisName := Sector_name+'/'+name;
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel := union_data(.,
			Grondgebruik/CBSKlasse/Aggr/V/bedrijfsterreinen,
			Grondgebruik/CBSKlasse/Aggr/V/bedrijfsterreinen,
			Grondgebruik/CBSKlasse/Aggr/V/detailhandel_en_horeca,
			Grondgebruik/CBSKlasse/Aggr/V/detailhandel_en_horeca,
			Grondgebruik/CBSKlasse/Aggr/V/bedrijfsterreinen,
			Grondgebruik/CBSKlasse/Aggr/V/Voorzieningen
		);
		attribute<.>                       Jobs6_rel := id(.);

		container CBSKlassen := for_each_ne(Grondgebruik/CBSKlasse/Aggr/name, 'Jobs6T('+string(id(Grondgebruik/CBSKlasse/Aggr))+'[Grondgebruik/CBSKlasse/Aggr], ..)');
		
		Template Jobs6T
		{
			//
			parameter<Grondgebruik/CBSKlasse/Aggr> id;
			unit<uint8> Jobs6;
			//
			
			unit<uint8> Subset := select_with_org_rel(Jobs6/CBSKlasse_Aggr_rel == id)
			{
				attribute<string> name := Jobs6/name[org_rel];
			}
		}
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> TXLJobs9: NrOfrows = 9
	{
		attribute<string>   name         : ['Onbekend', 'landbouw', 'nijverheid', 'logistiek', 'zak_dienstverlening', 'overheid_kw_diensten', 'ov_consumentendiensten', 'detailhandel', 'Zorg'];
		attribute<TXLJobs7> TXLJobs7_rel := union_data(., (0/0)[TXLJobs7], 0[TXLJobs7], 1[TXLJobs7], 2[TXLJobs7], 5[TXLJobs7], 6[TXLJobs7], 4[TXLJobs7], 3[TXLJobs7], 6[TXLJobs7]);
		attribute<string>   Label        := name, DialogType = "LabelText";
		attribute<string>   TXLTbl_Ref   := name;
	}
	
	unit<uint8> TXLJobs7: NrOfrows = 7
	{
		attribute<string> name:
		[
			'landbouw',
			'nijverheid',
			'logistiek',
			'detailhandel',
			'ov_consumentendiensten',
			'zak_dienstverlening',
			'overheid_kw_diensten'
		];
		
		// attribute<Actor/jobs5> jobs5_rel := union_data(.,
			// (0/0)[Actor/jobs5],
			// Actor/jobs5/V/NijverheidEnLogistiek,
			// Actor/jobs5/V/NijverheidEnLogistiek,
			// Actor/jobs5/V/Detailhandel,
			// Actor/jobs5/V/Ov_consumentendiensten,
			// Actor/jobs5/V/Zak_dienstverlening,
			// Actor/jobs5/V/Overheid_kw_diensten
		// );
		
		attribute<string> Label       := name, DialogType = "LabelText";
		attribute<string> TXLTbl_Ref  := name;
		attribute<uint32> BrushColor  : [rgb(233,255,190),rgb(61, 61, 92),rgb(0, 45, 179),rgb(179, 0, 179),rgb(204, 163, 0)           ,rgb(255, 0, 255)      ,rgb(230, 115, 0)], DialogType = "BrushColor";
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> TXLJobs6 := select_with_org_rel(TXLJobs7/name != 'landbouw')
	{
		attribute<string> name       := TXLJobs7/name[org_rel];
		attribute<uint32> BrushColor := TXLJobs7/BrushColor[org_rel];
		attribute<string> Label      := name, DialogType = "LabelText";
		attribute<string> TXLTbl_Ref := name;
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> NoData: NrOfrows = 1
	{
		attribute<string> name: ['geen'];
		attribute<string> Label := name, DialogType = "LabelText";
		attribute<string> TXLTbl_Ref := name;
	}
	
	unit<uint8> TXLJobs7_nodata := union_unit_uint8(NoData, TXLJobs7)
	{
		attribute<string>   name         := union_data(., NoData/name, TXLJobs7/name);
		attribute<string>   Label        := union_data(., NoData/Label, TXLJobs7/Label), DialogType = "LabelText";
		attribute<TXLJobs7> TXLJobs7_rel := union_data(., (0/0)[TXLJobs7], 0[TXLJobs7], 1[TXLJobs7], 2[TXLJobs7], 3[TXLJobs7], 4[TXLJobs7], 5[TXLJobs7], 6[TXLJobs7]);
		attribute<string>   TXLTbl_Ref := name;
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> Restrictie_HardheidK: NrOfRows = 4
	{
		attribute<string> name:
		[
			'ZeerHard',
			'Hard',
			'Middel',
			'Zacht'
		];
		attribute<string> label := name;
	}
	
	unit<uint8> Stimuli_HardheidK: NrOfRows = 3
	{
		attribute<string> name:
		[
			'Hard',
			'Middel',
			'Zacht'
		];
		attribute<string> label := name;
	}
	// unit<uint32> Sector_x_ResHardheidK := combine(Sector,Restrictie_HardheidK)
	unit<uint32> Sector_x_ResHardheidK := combine(Sector/wo_Landbouw,Restrictie_HardheidK)
	{
		attribute<string> Sector_name     := Sector/wo_Landbouw/name[first_rel];
		attribute<string> HardheidK_name  := Restrictie_HardheidK/name[second_rel];
		attribute<string> name            := Sector_name+'_'+HardheidK_name;
		attribute<string> label           := Sector_name+'/'+HardheidK_name;
	}
	unit<uint32> Sector_x_StimHardheidK := combine(Sector/wo_Landbouw,Stimuli_HardheidK)
	{
		attribute<string> Sector_name     := Sector/wo_Landbouw/name[first_rel];
		attribute<string> HardheidK_name  := Stimuli_HardheidK/name[second_rel];
		attribute<string> name            := Sector_name+'_'+HardheidK_name;
		attribute<string> label           := Sector_name+'/'+HardheidK_name;
	}
}