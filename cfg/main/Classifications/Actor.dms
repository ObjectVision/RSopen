container Actor
{
	unit<uint8> Sector : NrOfRows = 5
	{
		attribute<string> name               : ['Wonen', 'Werken', 'Verblijfsrecreatie', 'Wind', 'Zon'];
		attribute<string> ref                : ['Woongebied', 'Bedrijventerrein', 'Verblijfsrecreatie', 'Wind', 'Zon'];
		attribute<string> Label              := name;
		attribute<string> SrcRefRestricties  : ['Woongebied','Bedrijventerrein','Verblijfsrecreatiegebied','Wind','Zon'];
		attribute<string> SrcRefGeschiktheid : ['Wonen/Varianten/@V@/@SS@', 'Werken/Varianten/@V@/@SS@', 'Verblijfsrecreatie/Varianten/@V@/@SS@', 'Wind/Varianten/@V@/@SS@', 'Zon/Varianten/@V@/@SS@'];
		attribute<string> Subsector_ref      : ['Classifications/Vastgoed/WP2xVSSH','Classifications/Actor/Jobs6','Classifications/Vastgoed/VerblijfsrecreatieK','Classifications/Actor/WindK','Classifications/Actor/ZonK'];
		attribute<string> ValUnit_ref        : ['Woning','Job','Verblijfsobject','MW','MW'];
		attribute<string> ValUnitDens_ref    : ['Woning_ha','Job_ha','vbo_ha','MW_ha','MW_ha'];
		attribute<string> ValUnit_ref2       : ['Woningen', 'Banen', 'Woningen', 'Wind', 'Zon']; 
		attribute<uint32> BrushColor         : [rgb(255,60,60), rgb(255,149,255),rgb(255,150,150), rgb(127,127,127), rgb(255,255,0)];
		
		container V := for_each_nedv(name, String(id(.))+'[..]', void, .);
		
		container XSubSectoren := for_each_ne(name, 'Templates/SectorXSubSector('+quote(name)+','+quote(Subsector_ref)+')');
		
		unit<uint32> XSubsector := = 'union_unit('+AsItemList('XSubSectoren/'+Sector/name+'/Subsector')+')'
		{
			// attribute<uint8>  SubSector_nr         := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/second_rel[uint8]')+')';
			attribute<Sector> Sector_rel           := rlookup(Sector_name, Sector/name);
			attribute<string> Sector_name          := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/Sector_name')+')';
			attribute<string> SubSector_name       := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/subsector_name')+')';
			attribute<string> Subsector_ref        := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/Subsector_ref')+')';
			// attribute<string> SubSector_name_zWoon := SubSector_name == 'Totaal' ? '' : SubSector_name;
			attribute<string> ValUnit_ref          := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/ValUnit_ref')+')';
			attribute<string> ValUnitDens_ref      := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/ValUnitDens_ref')+')';
			attribute<string> name                 := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/name')+')';
			attribute<string> name_totaal          := sector_name == 'Wonen' ? name+'/totaal' : name;
			attribute<string> label                := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/label')+')';
			attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/CBSKlasse_Aggr_rel')+')';
			attribute<uint32> BrushColor           := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/BrushColor')+')', DialogType = "BrushColor";
			attribute<string> SrcRefGeschiktheid   := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/SrcRefGeschiktheid')+')';
			// attribute<string> Combi_name           := = 'union_data(.,'+AsItemList('XSubSectoren/'+Sector/name+'/Subsector/name')+')';
			attribute<string> SrcRefRestricties    := = 'union_data(.,'+AsItemList('Sector/XSubSectoren/'+Sector/name+'/Subsector/SrcRefRestricties')+')';
			attribute<string> ClaimRegio           := rjoin(Sector_name, CaseClassifications/Actor/SectorAllocRegio/Sector_name, CaseClassifications/Actor/SectorAllocRegio/name);
			attribute<string> ClaimRegio_name      := rjoin(Sector_name, CaseClassifications/Actor/SectorAllocRegio/Sector_name, CaseClassifications/Actor/SectorAllocRegio/allocregio_name);
			
			attribute<Jobs6>  Jobs6_rel            := rlookup(SubSector_name, Jobs6/name);
			
			
			container V := for_each_nedv(label, string(id(.))+'[..]', void, .);
		}
		unit<uint8> XSubsector_uint8 := range(uint8, 0b, uint8(#XSubsector))
		{
			attribute<uint32> BrushColor := union_data(.,  XSubsector/BrushColor);
		}
		
		unit<uint32> Wonen_x_Werken := ='union_unit('+Subsector_ref[V/Wonen]+','+Subsector_ref[V/Werken]+')'
		{
			attribute<string> subsector_name := ='union_data(., '+Subsector_ref[V/Wonen]+'/name,'+Subsector_ref[V/Werken]+'/name)';
			attribute<string> sector_name    := ='union_data(., const(''Wonen'','+Subsector_ref[V/Wonen]+'), const(''Werken'','+Subsector_ref[V/Werken]+'))';
		}
	}
	


	unit<uint8> WindK: NrOfRows = 1
	{
		attribute<string>                      name: ['Totaal'];
		attribute<string>                      label := name, DialogType = "LabelText";
		attribute<bool>                        KanLokaalHogereDichtheidKrijgen : [true];
		attribute<Actor/Sector>                Sector_rel := const(Actor/Sector/V/Wind, .);
		attribute<string>                      Sector_name := Actor/Sector/name[sector_rel];
		attribute<string>                      Sector_name_ThisName := Sector_name+'/'+name;
		attribute<Actor/Sector/xSubSector>     SectorxSubSector_rel := rjoin(FullLabel, Actor/Sector/xSubSector/Label, id(Actor/Sector/xSubSector));
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel := const((0/0)[Grondgebruik/CBSKlasse/Aggr], .);
		attribute<string>                      FullLabel := Sector_name + '_' + name;
		attribute<uint32>                      BrushColor : [rgb(0, 0, 0)], DialogType = "BrushColor";
	}
	
	unit<uint8> ZonK: NrOfRows = 1
	{
		attribute<string>                      name: ['Totaal'];
		attribute<string>                      label := name, DialogType = "LabelText";
		attribute<bool>                        KanLokaalHogereDichtheidKrijgen: [true];
		attribute<Actor/Sector>                Sector_rel := const(Actor/Sector/V/Zon, .);
		attribute<string>                      Sector_name := Actor/Sector/name[sector_rel];
		attribute<string>                      Sector_name_ThisName := Sector_name+'/'+name;
		attribute<Actor/Sector/xSubSector>     SectorxSubSector_rel := rjoin(FullLabel, Actor/Sector/xSubSector/Label, id(Actor/Sector/xSubSector));
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel := const((0/0)[Grondgebruik/CBSKlasse/Aggr], .);
		attribute<string>                      FullLabel := Sector_name + '_' + name;
		attribute<uint32>                      BrushColor: [rgb(255, 255, 102)], DialogType = "BrushColor";
	}

	unit<uint32> EigendomK: NrOfRows = 8
	{
		attribute<string> name: ['Commercieel','Corporatie','Gemeente','Waterschap','Provincie','Rijk','NatuurOrganisatie','Overigen'];
		attribute<bool> IsOntwikkelendePartij := id(.) == V/Gemeente || id(.) == V/Corporatie || id(.) == V/Commercieel;
		attribute<bool> IsMaatschappelijk := id(.) == V/Gemeente || id(.) == V/Corporatie || id(.) == V/Waterschap || id(.) == V/Provincie || id(.) == V/Rijk || id(.) == V/NatuurOrganisatie;
		attribute<bool> IsOntwikkelendePartijEnMaatschappelijk := IsOntwikkelendePartij && IsMaatschappelijk;
		attribute<bool> IsOntwikkelendePartijEnCommercieel := id(.) == V/Commercieel;
		attribute<string> Label := name, DialogType = "LabelText";
		attribute<uint32> BrushColor: [rgb(254, 50,0), rgb(115,76,0), rgb(254,238,0), rgb(151,219,242),rgb(169,169,169), rgb(173,164,254), rgb(103,174,0), rgb(255,255,255)], DialogType = "BrushColor";
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}

	// unit<uint32> SBI08
	// :  StorageName = "%RSLDataDir%/Grondgebruik/SBI2008_2018_TIGRIS_sector.csv"
	// ,  StorageType = "gdal.vect"
	// ,  StorageReadOnly = "True" 
	// {
		// attribute<TXLJobs9> TXLJobs9_rel := Tigris_sector[TXLJobs9];
		// attribute<TXLJobs7> TXLJobs7_rel := TXLJobs9/TXLJobs7_rel[TXLJobs9_rel];
		// attribute<string> TXL7_name := TXLJobs7/name[TXLJobs7_rel];
	// }
	
	unit<uint8> TXLJobs11: NrOfrows = 11
	{
		attribute<string>   name         : 
											[
												  'industrie'
												, 'nijverheid'
												, 'transport'
												, 'ov_consumentendiensten'
												, 'direct_consumentendiensten'
												, 'zak_dienstverlening'
												, 'detailhandel'
												, 'logistiek'
												, 'zorg_overheid_kw_diensten'
												, 'onderwijs_overheid_kw_diensten'
												, 'landbouw'
											];
		attribute<Jobs6> Jobs6_rel       := union_data(., 
												  Jobs6/V/nijverheid
												, Jobs6/V/nijverheid
												, Jobs6/V/logistiek
												, Jobs6/V/ov_consumentendiensten
												, Jobs6/V/ov_consumentendiensten
												, Jobs6/V/zak_dienstverlening
												, Jobs6/V/detailhandel
												, Jobs6/V/logistiek
												, Jobs6/V/Overheid_kw_diensten
												, Jobs6/V/Overheid_kw_diensten
												, (0/0)[jobs6]
											);
		attribute<string>   Label        := name, DialogType = "LabelText";
		attribute<string>   TXLTbl_Ref   := name;
		
		attribute<Jobs6>    Aggregatie_rel := Jobs6_rel;
		attribute<string>   Aggregatie_Unit := const('Jobs6',.);
	}
	
	unit<uint8> Jobs6: NrOfRows = 6
	{
		attribute<string> name: ['Nijverheid', 'Logistiek', 'Detailhandel', 'Ov_consumentendiensten', 'Zak_dienstverlening', 'Overheid_kw_diensten'];
		attribute<string> Label := name, DialogType = "LabelText";
		attribute<uint32> BrushColor: [rgb(192,192,192), rgb(96,96,96), rgb(255,153,255),rgb(255, 204, 255),rgb(229, 204, 255),rgb(204, 153, 255)], DialogType = "BrushColor";
		attribute<string> vbo_gebruiksdoel_ref := union_data(., '@industrie# + @utiliteit_combi#','@logistiek#', '@winkel#', '@bijeenkomst# + @sport#', '@kantoor#', '@cel# + @gezondheidszorg# + @onderwijs#'); // @Jip2021: hoe automatiseren we dit? Maw: hoe aggregeren over kolommen obv een relatie, zoals met de sum over rijen?		attribute<bool> KanLokaalHogereDichtheidKrijgen: [false, true, true, true, true];
		attribute<string> vbo_gebruiksdoel_ref_bagnieuwbouwsloop := union_data(., '@industrie# + @utiliteit_combi#','@logistiek#', '@winkel#', '@bijeenkomst# - @sport#', '@kantoor#', '@cel# - @gezondheidszorg# - @onderwijs#'); // @Jip2021: hoe automatiseren we dit? Maw: hoe aggregeren over kolommen obv een relatie, zoals met de sum over rijen?		attribute<bool> KanLokaalHogereDichtheidKrijgen: [false, true, true, true, true];
		attribute<string> vbo_gebruiksdoel_plus_ref := union_data(., '@industrie# + @utiliteit_combi#','@logistiek#', '@winkel#', '@bijeenkomst# + @sport# + @logies#', '@kantoor#', '@cel# + @gezondheidszorg# + @onderwijs#'); // @Jip2021: hoe automatiseren we dit? Maw: hoe aggregeren over kolommen obv een relatie, zoals met de sum over rijen?		attribute<bool> KanLokaalHogereDichtheidKrijgen: [false, true, true, true, true];
		attribute<bool>   KanLokaalHogereDichtheidKrijgen: [true, true, true, true, true, true];
		attribute<Sector> Sector_rel := const(Sector/V/Werken, .);
		attribute<Sector/xSubSector> SectorxSubSector_rel := rjoin(name, Sector/xSubSector/SubSector_name, id(Sector/xSubSector));
		attribute<string> Sector_name := Sector/name[sector_rel];
		attribute<string> Sector_name_ThisName := Sector_name+'/'+name;
		attribute<Grondgebruik/CBSKlasse/Aggr> CBSKlasse_Aggr_rel := union_data(.,
			Grondgebruik/CBSKlasse/Aggr/V/bedrijfsterreinen,
			Grondgebruik/CBSKlasse/Aggr/V/bedrijfsterreinen,
			Grondgebruik/CBSKlasse/Aggr/V/detailhandel_en_horeca,
			Grondgebruik/CBSKlasse/Aggr/V/detailhandel_en_horeca,
			Grondgebruik/CBSKlasse/Aggr/V/bedrijfsterreinen,
			Grondgebruik/CBSKlasse/Aggr/V/Voorzieningen
		);
		
		container CBSKlassen := for_each_ne(Grondgebruik/CBSKlasse/Aggr/name, 'Jobs6T('+string(id(Grondgebruik/CBSKlasse/Aggr))+'[Grondgebruik/CBSKlasse/Aggr], ..)');
		
		Template Jobs6T
		{
			//
			parameter<Grondgebruik/CBSKlasse/Aggr> id;
			unit<uint8> Jobs6;
			//
			
			unit<uint8> Subset := subset(Jobs6/CBSKlasse_Aggr_rel == id)
			{
				attribute<string> name := Jobs6/name[Nr_OrgEntity];
			}
		}
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	// TODO COMMENT: hier volgen attributen van domein Sector. Wonen en Werken hoeven geen zelfstandig domein te zijn; het zijn (subsets van) sectoren.
	// unit<uint8> S_Wonen: NrOfrows = 1 // TODO REMOVE
		// attribute<string> SrcRefGeschiktheid := name+'/'+'Varianten/@V@/@SS@';
		// attribute<string> Subsector_ref: [''];
		// attribute<string> ValUnit_ref: ['Woning'];
		// attribute<string> ValUnitDens_ref: ['Woning_ha'];
	
	// unit<uint8> S_Werken: NrOfrows = 1 // TODO REMOVE
	// {
		// attribute<string> SrcRefGeschiktheid := name+'/'+'Varianten/@V@/@SS@';
		// attribute<string> Subsector_ref: [''];
		// attribute<string> ValUnit_ref: ['Job'];
		// attribute<string> ValUnitDens_ref: ['Job_ha'];
		// attribute<string> Label := name, DialogType = "LabelText";
	// }
	
	// unit<uint8> S_Verblijfsrecreatie: NrOfrows = 1 // TODO REMOVE
	// {
		// attribute<string> SrcRefGeschiktheid := name+'/'+'Varianten/@V@/@SS@';
		// attribute<string> Subsector_ref: [''];
		// attribute<string> ValUnit_ref: ['Verblijfsobject'];
		// attribute<string> ValUnitDens_ref: ['vbo_ha'];
	// }
	
	// unit<uint8> S_Wind: NrOfrows = 1 // TODO REMOVE
		// attribute<string> SrcRefGeschiktheid := name+'/'+'Varianten/@V@/@SS@';
		// attribute<string> Subsector_ref: [''];
		// attribute<string> ValUnit_ref: ['MW'];
		// attribute<string> ValUnitDens_ref: ['MW_ha'];
		// attribute<string> Label := name, DialogType = "LabelText";
	
	// unit<uint8> S_Zon: NrOfrows = 1 // TODO REMOVE
		// attribute<string> SrcRefGeschiktheid := name+'/'+'Varianten/@V@/@SS@';
		// attribute<string> Subsector_ref: ['Classifications/Actor/ZonK'];
		// attribute<string> ValUnit_ref: ['MW'];
		// attribute<string> ValUnitDens_ref: ['MW_ha'];
	
	unit<uint8> TXLJobs7: NrOfrows = 7
	{
		attribute<string> name:
		[
			'landbouw',
			'nijverheid',
			'logistiek',
			'detailhandel',
			'ov_consumentendiensten',
			'zak_dienstverlening',
			'overheid_kw_diensten'
		];
		
		// attribute<Actor/jobs5> jobs5_rel := union_data(.,
			// (0/0)[Actor/jobs5],
			// Actor/jobs5/V/NijverheidEnLogistiek,
			// Actor/jobs5/V/NijverheidEnLogistiek,
			// Actor/jobs5/V/Detailhandel,
			// Actor/jobs5/V/Ov_consumentendiensten,
			// Actor/jobs5/V/Zak_dienstverlening,
			// Actor/jobs5/V/Overheid_kw_diensten
		// );
		
		attribute<string> Label       := name, DialogType = "LabelText";
		attribute<string> TXLTbl_Ref  := name;
		attribute<uint32> BrushColor  : [rgb(233,255,190),rgb(61, 61, 92),rgb(0, 45, 179),rgb(179, 0, 179),rgb(204, 163, 0)           ,rgb(255, 0, 255)      ,rgb(230, 115, 0)], DialogType = "BrushColor";
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> TXLJobs6 := subset(TXLJobs7/name != 'landbouw')
	{
		attribute<string> name       := TXLJobs7/name[nr_OrgEntity];
		attribute<uint32> BrushColor := TXLJobs7/BrushColor[nr_OrgEntity];
		attribute<string> Label      := name, DialogType = "LabelText";
		attribute<string> TXLTbl_Ref := name;
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> NoData: NrOfrows = 1
	{
		attribute<string> name: ['geen'];
		attribute<string> Label := name, DialogType = "LabelText";
		attribute<string> TXLTbl_Ref := name;
	}
	
	// unit<uint8> TXL6_Wonen := union_unit_uint8(NoData, S_Wonen, TXLJobs6)
	// {
		// attribute<string>   name         := union_data(., NoData/name, S_Wonen/name, TXLJobs6/name);
		// attribute<string>   Label        := union_data(., NoData/Label, S_Wonen/label, TXLJobs6/Label), DialogType = "LabelText";
		
		// container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	// }
	
	// unit<uint8> TXL6_Wonen_CBSLU := union_unit_uint8(S_Wonen, TXLJobs6, Grondgebruik/CBSKlasse)
	// {
		// attribute<string>   name         := union_data(., S_Wonen/name, TXLJobs6/name, Grondgebruik/CBSKlasse/name);
		// attribute<string>   Label        := union_data(., S_Wonen/Label, TXLJobs6/Label, Grondgebruik/CBSKlasse/Label), DialogType = "LabelText";
		// container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	// }
	
	// unit<uint8> TXLJobs6_nodata := union_unit_uint8(NoData, TXLJobs6)
	// {
		// attribute<string>   name         := union_data(., NoData/name, TXLJobs6/name);
		// attribute<string>   Label        := union_data(., NoData/Label, TXLJobs6/Label), DialogType = "LabelText";
		
		// container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	// }
	
	unit<uint8> TXLJobs7_nodata := union_unit_uint8(NoData, TXLJobs7)
	{
		attribute<string>   name         := union_data(., NoData/name, TXLJobs7/name);
		attribute<string>   Label        := union_data(., NoData/Label, TXLJobs7/Label), DialogType = "LabelText";
		attribute<TXLJobs7> TXLJobs7_rel := union_data(., (0/0)[TXLJobs7], 0[TXLJobs7], 1[TXLJobs7], 2[TXLJobs7], 3[TXLJobs7], 4[TXLJobs7], 5[TXLJobs7], 6[TXLJobs7]);
		attribute<string>   TXLTbl_Ref := name;
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	// unit<uint8> HHtype13opleiding := combine_uint8(./TXLhh13, ./Opleiding_Aggr)
	// {
		// attribute<string> name                := TXLhh13 + '_' + Opleiding_Aggr;
		// attribute<string> TXLhh13             := rjoin(Nr_1, id(../TXLhh13), ../TXLhh13/name);
		// attribute<string> Opleiding_Aggr      := rjoin(Nr_2, id(../Opleiding_Aggr), ../Opleiding_Aggr/name);
	// }

	// unit<uint8> Percentielen_10K: nrofrows = 10
	// {
		// attribute<string> name  := 'P' + string(id(.)) + '0_' + string(id(.) + 1b) + '0';
		// attribute<string> label := name, DialogType = "LabelText";
	// }

	// unit<uint8> Opleiding : nrofrows = 7
	// {
		// attribute<uint8>  EK   : [0,1,2,3,4,5,9];
		// attribute<string> name : ['NoData', 'lager_onderwijs', 'lbo', 'MAVO_MULO_VMBO', 'HAVO_VWO_MBO', 'HBO_Universiteit', 'Anders'];
		// attribute<string> label := name, DialogType = "LabelText";
	// }
	
	// unit<uint8> Opleiding_Aggr : nrofrows = 2
	// {
		// attribute<uint8>  EK   : [0,1];
		// attribute<string> name : ['Niet_hoogopgeleid', 'Een_of_beide_hoogopgeleid'];
		// attribute<string> label := name, DialogType = "LabelText";
	// }
	
	// unit<uint8> TXLhh13: nrofrows = 13
	// {
		// attribute<uint8> EK: Expr = "id(.) + 1[uint8]";
		// attribute<string> Name: [
			// 'SingleNoJob', 
			// 'Young1Job', 'Middle1Job', 
			// 'CoupleNoJob', 'YoungCouple1Job', 'MiddleCouple1Job',
			// 'Young2Jobs', 'Middle2Jobs',
			// 'KidsNoJobs', 'Kids1Job', 'Kids2Jobs',
			// 'SingleElderly', 'CoupleElderly'
		// ];
		
		// attribute<string> TXLTableRef := 'household_'+string(id(.)+1[.]);
		
		// attribute<TXLhh3> TXLhh3_rel := !IsMeerpersoons ? TXLhh3/V/Eenpersoons : !HeeftInwonendeKinderen ? TXLhh3/V/MeerpersoonsZonderKinderen : TXLhh3/V/MeerpersoonsMetKinderern;
		
		// attribute<String> Descr:
		// [
			 // '  1 person,   0 kids,    0 jobs, age  < 65'
			// ,'  1 person,   0 kids,  > 0 jobs, age  < 35'
			// ,'  1 person,   0 kids,  > 0 jobs, age 35-65'
			// ,'> 1 person,   0 kids,    0 jobs, age  < 65'
			// ,'> 1 person,   0 kids,    1  job, age  < 35'
			// ,'> 1 person,   0 kids,    1  job, age 35-65'
			// ,'> 1 person,   0 kids,    2 jobs, age  < 35'
			// ,'> 1 person,   0 kids,    2 jobs, age 35-65'
			// ,'> 1 person, > 0 kids,    0 jobs,   any age'
			// ,'> 1 person, > 0 kids,    1  job,   any age'
			// ,'> 1 person, > 0 kids,    2 jobs,   any age'
			// ,'  1 person,   0 kids, any #jobs, age >= 65'
			// ,'> 1 person,   0 kids, any #jobs, age >= 65'
		// ];
		
		// attribute<String> Label: DialogType = "LabelText", Expr = "Name";
		
		// parameter<.> SingleNoJob:      [ 0 ];
		// parameter<.> Young1Job:        [ 1 ];
		// parameter<.> Middle1Job:       [ 2 ];
		// parameter<.> CoupleNoJob:      [ 3 ];
		// parameter<.> YoungCouple1Job:  [ 4 ];
		// parameter<.> MiddleCouple1Job: [ 5 ];
		// parameter<.> Young2Jobs:       [ 6 ];
		// parameter<.> Middle2Jobs:      [ 7 ];
		// parameter<.> KidsNoJobs:       [ 8 ];
		// parameter<.> Kids1Job:         [ 9 ];
		// parameter<.> Kids2Job:         [10 ];
		// parameter<.> SingleElderly:    [11 ];
		// parameter<.> CoupleElderly:    [12 ];
		
		// attribute<Bool> IsMeerpersoons:          [ false, false, false,  true,  true,  true,  true,  true, true, true, true, false,  true];
		// attribute<Bool> HeeftInwonendeKinderen:  [ false, false, false, false, false, false, false, false, true, true, true, false, false];
		// attribute<Int8> AantalJobs:     [ 0, 1, 1, 0, 1, 1, 2, 2, 0, 1, 2, 0, 0], Descr = ">=2 -> 2; age >= 65 -> 0";
		// attribute<bool> AgeGroup1: [ true,  true,  false, true,  true,  false, true,  false, true, true, true, false, false], Descr = "age < 35";
		// attribute<bool> AgeGroup2: [ true,  false, true,  true,  false, true , false, true,  true, true, true, false, false], Descr = "35 <= age < 65";
		// attribute<bool> AgeGroup3: [ false, false, false, false, false, false, false, false, true, true, true, true,  true ], Descr = "65 <= age";
		
		// attribute<Float32> AgeGroup0Share: [ 0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 2.5, 2.5, 2.5, 0.0, 0.0], Descr = "age < 18";
		// attribute<Float32> AgeGroup1Share: [ 0.5, 1.0, 0.0, 1.0,  2.0, 0.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0], Descr = "age < 35";
		// attribute<Float32> AgeGroup2Share: [ 0.5, 0.0, 1.0, 1.0,  0.0, 2.0, 0.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0], Descr = "35 <= age < 65";
		// attribute<Float32> AgeGroup3Share: [ 0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0], Descr = "65 <= age";
		// attribute<Float32> HouseholdSize: Expr = "AgeGroup0Share + AgeGroup1Share + AgeGroup2Share + AgeGroup3Share";
		
		// attribute<float32> Income :
		// [
			// 20235,
			// 30620,
			// 42203,
			// 58597,
			// 46303,
			// 60323,
			// 63424,
			// 85521,
			// 41237,
			// 64856,
			// 85441,
			// 28432,
			// 48043
		// ];
		
		// attribute<bool> FitsInSmallApp : [true, true, true, true, true, true, true, true, false, false, false, true, true];
	// }
	
	// unit<uint8> TXLhh14: nrofrows = 14
	// {
		// attribute<uint8> EK: Expr = "id(.) + 1[uint8]";
		
		// attribute<string> Name: [
			// 'YoungSingleNoJob', 'MiddleSingleNoJob',
			// 'Young1Job', 'Middle1Job', 
			// 'CoupleNoJob', 'YoungCouple1Job', 'MiddleCouple1Job',
			// 'Young2Jobs', 'Middle2Jobs',
			// 'KidsNoJobs', 'Kids1Job', 'Kids2Jobs',
			// 'SingleElderly', 'CoupleElderly'
		// ];
		
		// attribute<string> TXLTableRef := 'household_'+string(id(.)+1[.]);
		
		// attribute<TXLhh3> TXLhh3_rel := !IsMeerpersoons ? TXLhh3/V/Eenpersoons : !HeeftInwonendeKinderen ? TXLhh3/V/MeerpersoonsZonderKinderen : TXLhh3/V/MeerpersoonsMetKinderern;
		
		// attribute<String> Descr:
		// [
			 // '  1 person,   0 kids,    0 jobs, age  < 35'
			 // '  1 person,   0 kids,    0 jobs, age 35-65'
			// ,'  1 person,   0 kids,  > 0 jobs, age  < 35'
			// ,'  1 person,   0 kids,  > 0 jobs, age 35-65'
			// ,'> 1 person,   0 kids,    0 jobs, age  < 65'
			// ,'> 1 person,   0 kids,    1  job, age  < 35'
			// ,'> 1 person,   0 kids,    1  job, age 35-65'
			// ,'> 1 person,   0 kids,    2 jobs, age  < 35'
			// ,'> 1 person,   0 kids,    2 jobs, age 35-65'
			// ,'> 1 person, > 0 kids,    0 jobs,   any age'
			// ,'> 1 person, > 0 kids,    1  job,   any age'
			// ,'> 1 person, > 0 kids,    2 jobs,   any age'
			// ,'  1 person,   0 kids, any #jobs, age >= 65'
			// ,'> 1 person,   0 kids, any #jobs, age >= 65'
		// ];
		
		// attribute<String> Label: DialogType = "LabelText", Expr = "Name";
		
		// attribute<Bool> IsMeerpersoons:          [ false, false, false, false,  true,  true,  true,  true,  true, true, true, true, false,  true];
		// attribute<Bool> HeeftInwonendeKinderen:  [ false, false, false, false, false, false, false, false, false, true, true, true, false, false];
		// attribute<Int8> AantalJobs:              [ 0    , 0    , 1    , 1    , 0    , 1    , 1    , 2    , 2    , 0   , 1   , 2   , 0    , 0    ], Descr = ">=2 -> 2; age >= 65 -> 0";
		
		// container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	// }
	
	// unit<uint8> TXLhh3: NrOfRows = 3
	// {
		// attribute<string> name: ['MeerpersoonsMetKinderern', 'MeerpersoonsZonderKinderen', 'Eenpersoons'];
		// attribute<string> label := name, DialogType = "LabelText";
		
		// container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	// }
}