container T
{
	Template ReadData
	{
		//
		parameter<C/GrondproductieModelVarianten> id;
		//
		
		parameter<String> StorageStr := '%RSo_DataDir%/Vastgoed/'+C/GrondproductieModelVarianten/name[id]+'SchattingDec19.csv';
		
		unit<UInt32> ModelVariant
		:  StorageName = "=StorageStr"
		,  StorageType = "gdal.vect"
		,  StorageReadOnly = "True"
		{
			attribute<C/GrondproductieVariabelen> GrondproductieVariabelen_rel := rlookup(lowercase(./Variabele), lowercase(C/GrondproductieVariabelen/name));
		}
	}
	
	Template CalculateCosts : using = "ReadData" 
	{
		//
		parameter<C/Combi> id;
		unit<UInt32> domain;
		attribute<String> Coefficients (domain);
		attribute<String> Stderror (domain);
		attribute<String> Pvalue (domain);
		parameter<String> CalcStr0;
		parameter<String> Onzekerheid2_name;
		//
		
		parameter<String> GenericStr := 'MakeDefined(float32(@C@), 0f)';
		parameter<String> CoefficientStr := replace(GenericStr, '@C@', 'Coefficients');
		parameter<String> StderrorStr    := replace(GenericStr, '@C@', 'Stderror');
		parameter<String> CalcStr := = CalcStr0;
		
		attribute<Bool> IsSignificant                   (domain) := float32(Pvalue) <= Significatie_threshold;
		attribute<Bool> IsControleVar                   (domain) := C/GrondproductieVariabelen/IsControleVar[domain/GrondproductieVariabelen_rel];
		attribute<Bool> IsOnzekereControleVar           (domain) := C/GrondproductieVariabelen/IsOnzekereControleVar[domain/GrondproductieVariabelen_rel];
		attribute<Bool> IsOnzekereControleVarEnNegatief (domain) := IsOnzekereControleVar && ParameterValueIsNegatief;
		attribute<Bool> IsOnzekereControleVarEnPositief (domain) := IsOnzekereControleVar && !ParameterValueIsNegatief;
		attribute<Bool> IsIntercept                     (domain) := domain/GrondproductieVariabelen_rel == C/GrondproductieVariabelen/V/Intercept;
		
		attribute<Float32> ParameterValue0    (domain) := = '('+CalcStr+')';
		attribute<Bool> ParameterValueIsNegatief (domain) := ParameterValue0 < 0f;
		attribute<Float32> ParameterValueSig  (domain) := = 'float32(IsSignificant) * ('+CalcStr+')';
		attribute<Float32> ParameterValue     (domain) := IsIntercept || IsControleVar ? parameterValue0: ParameterValueSig;
		
		attribute<String> VariableValue_ref (domain) :=
		//Onzekere controlevariabelen geven we een zo hoog mogelijke waarde in de High Variant en een zo laag mogelijke waarde in de Low Variant
			lowercase(Onzekerheid2_name) == lowercase('Low')  && IsOnzekereControleVarEnNegatief ? '1f' :
			lowercase(Onzekerheid2_name) == lowercase('Low')  && IsOnzekereControleVarEnPositief ? '0f' :
			lowercase(Onzekerheid2_name) == lowercase('High') && IsOnzekereControleVarEnNegatief ? '0f' :
			lowercase(Onzekerheid2_name) == lowercase('High') && IsOnzekereControleVarEnPositief ? '1f':
			C/GrondproductieVariabelen/DefaultWaarde[domain/GrondproductieVariabelen_rel];
		
		attribute<String> List (domain) := 'value('+VariableValue_ref+', float32) * '+string(ParameterValue);
		
		attribute<Eur_Ha> Kosten0 (AdminDomain) := = 'exp(add('+asItemList(List+'[float32]')+')) + const(0[Eur_ha], AdminDomain)';
		attribute<Eur_Ha> Kosten  (AdminDomain) := MakeDefined(Kosten0, max(Kosten0));
	}
	
	Template Statistics
	{
		//
		parameter<String> SrcStr;
		parameter<C/Onzekerheid> id;
		//
		
		attribute<Eur_Ha> Src (AdminDomain) := = 'Results/'+SrcStr+'/'+C/Onzekerheid/name[id];
		
		attribute<Bool> BBG (AdminDomain) := SourceData/Diversen/Per_AdminDomain/begrenzing_bebouwd_gebied;
		
		container Result := for_each_ne(C/Extent/name, 'BBGT('+C/Extent/CalcStr+')');
		
		Template BBGT
		{
			//
			attribute<Bool> IsExtent (AdminDomain);
			//
			
			attribute<Eur_ha> InExtent (AdminDomain) := Src / float32(IsExtent);
			
			parameter<Eur_ha> mean    := mean(InExtent);
			parameter<Eur_ha> sd      := sd(InExtent);
			
			parameter<Eur_ha> min     := min(InExtent);
			parameter<Eur_ha> rth_element_20 := rth_element(InExtent, 0.20f);
			parameter<Eur_ha> rth_element_50 := rth_element(InExtent, 0.50f);
			parameter<Eur_ha> rth_element_80 := rth_element(InExtent, 0.80f);
			parameter<Eur_ha> max     := max(InExtent);
		}
	}
	
	Template Export
	{
		//
		parameter<String> SrcStr;
		//
		
		container Results :=
			for_each_nedv(
				C/Onzekerheid/name,
				replace(
					'union_data(C/ExtentxIndicator,'+asItemList(replace(SrcStr, '@E@', C/ExtentxIndicator/Extent_name, '@I@', C/ExtentxIndicator/Indicator_name))+')',
					'@O@', C/Onzekerheid/name
				),
				C/ExtentxIndicator, Eur_Ha
			)
		{
			attribute<String> Extent_name    (C/ExtentxIndicator) := C/ExtentxIndicator/Extent_name;
			attribute<String> Indicator_name (C/ExtentxIndicator) := C/ExtentxIndicator/Indicator_name;
		}
	}
}