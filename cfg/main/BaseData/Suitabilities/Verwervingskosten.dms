container Verwervingskosten
: Descr = "Schatting van de verwervingskosten voor woningen en niet-woningen op basis van een set van modelvarianten."
{
	container BAG               := SourceData/Vastgoed/BAG/PerJaar;
	container BAG_ModelJaar     := = 'BAG/Y'+string(ModelParameters/Model_StartYear);
	container BAG_RecentsteJaar := = 'BAG/Y'+string(ModelParameters/Model_StartYear);
	
	unit<UInt32> vbo_startjaar  := BAG_RecentsteJaar/VBO/per_Gebruiksdoel/woon/Select;
	unit<UInt32> pand_startjaar := BAG_RecentsteJaar/pand;
	
	parameter<String> Generate := 'Ready', ExplicitSuppliers = "Woningen/Write;Niet_Woningen/Write";
	
	container Woningen
	{
		container PerWP4PerWoning := 
			for_each_nedv(
				Classifications/Vastgoed/WP4/name
				,'Woningwaarde_perWoningType/'+Classifications/Vastgoed/WP4/name+'/Basisjaar'
				,AdminDomain
				, Eur_Woning
		), Descr = "Haal de woningwaarde per woningtype op";
		
		attribute<Eur> PerVBO (vbo_startjaar) :=
			= 'max_elem(
					merge(
						vbo_startjaar/WP4_rel[UInt16],
						Eur_Woning ,'+
						asItemList('PerWP4PerWoning/'+Classifications/Vastgoed/WP4/name+'[vbo_startjaar/AdminDomain_rel]')+
					'),
					0[Eur_Woning]
				) * 1[Woning]', Descr = "Koppel de woningwaarde per woningtype aan de vbo's en zet om naar Eur per vbo";
		
		attribute<Eur> Calc   (AdminDomain) := sum(PerVBO, vbo_startjaar/AdminDomain_rel), Descr = "Bereken de totale woningwaarde per admin domain";
		attribute<Eur> Write  (AdminDomain) := Calc, StorageName = "='%LocalDataProjDir%/BaseData/Vastgoed/Verwervingskosten_Woningen_AdminDomain_'+/ModelParameters/StudyArea+'.tif'", IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))", StorageType = "gdalwrite.grid", Descr = "If this IntegrityCheck fails, go back and investigate why the calc is already failing. Do not continue without fixing this! All following results will be invalid!";
		attribute<Eur> Read_UNCHECKED   (AdminDomain) : StorageName = "='%LocalDataProjDir%/BaseData/Vastgoed/Verwervingskosten_Woningen_AdminDomain_'+/ModelParameters/StudyArea+'.tif'", StorageReadOnly = "True", Descr = "This tif file could potentially contain only zeros or undefined values. To check for this eventuality, the container following this one checks for this.", StorageType = "tif";
		attribute<Eur> Read             (AdminDomain) := Read_UNCHECKED, IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))", Descr = "If this IntegrityCheck fails, go back and investigate why the calc/write is already failing. Do not continue without fixing this! All following results will be invalid!";
		attribute<Eur> Totaal (AdminDomain) := = ModelParameters/BaseDataOntkoppeld ? 'Read' : 'Write';
	}
	
	container Niet_Woningen
	{
		parameter<Eur_m2>  prijs                             := ModelParameters/Wonen/Verwervingskosten/NietWoningen, Descr = "De prijs per m2 voor niet-woningen, in Eur per m2";
		attribute<eur>     WOZ_Totaal_2017     (AdminDomain) := SourceData/Vastgoed/WOZ/Y2017/Niet_Woningen/Per_AdminDomain, Descr = "De WOZ waarde voor niet-woningen per admin domain, in Eur";
		attribute<m2_pand> oppervlakte      (pand_startjaar) := pand_startjaar/Oppervlaktes/vbo_opp_niet_woon, Descr = "De oppervlakte van niet-woon vbo's per pand, in m2";
		attribute<UInt32>  per_rdc_10m             (rdc_10m) := poly2grid(pand_startjaar/geometry, rdc_10m), Descr = "Koppel elk pand aan de rdc_10m grid";
		attribute<Float32> count_10m_per_pand      (rdc_10m) := (pcount(per_rdc_10m)[per_rdc_10m])[float32], Descr = "Tel per pand hoeveel 10m cellen er in liggen, en koppel dat terug aan elke 10m cel";
		attribute<meter2>  opp_uitgesmeerd_op_grid (rdc_10m) := oppervlakte[per_rdc_10m] / count_10m_per_pand * 1[PandUnit], Descr = "Smeer de oppervlakte van het pand uit over de 10m cellen die erin liggen";
		attribute<meter2>  opp_per_grid        (AdminDomain) := sum(opp_uitgesmeerd_op_grid, rdc_10m/AdminDomain_rel)[meter2], Descr = "Sommeer de uitgesmeerde oppervlaktes per admin domain";
		attribute<Eur>     kental_Totaal       (AdminDomain) := opp_per_grid * prijs, Descr = "Bereken de kental waarde per admin domain, in Eur";
		attribute<Eur>     Per_AdminDomain     (AdminDomain) := max_elem(WOZ_Totaal_2017, kental_Totaal), Descr = "Neem de hoogste van de WOZ waarde of de kental waarde, per admin domain";
		
		attribute<Eur>     Calc             (AdminDomain) := Per_AdminDomain;
		attribute<Eur>     Write            (AdminDomain) := Calc, StorageName = "='%LocalDataProjDir%/BaseData/Vastgoed/Verwervingskosten_Niet_Woningen_AdminDomain_'+/ModelParameters/StudyArea+'.tif'", IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))", StorageType = "gdalwrite.grid", Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit.";
		attribute<Eur>     Read_UNCHECKED   (AdminDomain) : StorageName = "='%LocalDataProjDir%/BaseData/Vastgoed/Verwervingskosten_Niet_Woningen_AdminDomain_'+/ModelParameters/StudyArea+'.tif'", StorageReadOnly = "True", Descr = "This tif file could potentially contain only zeros or undefined values. To check for this eventuality, the container following this one checks for this.", StorageType = "tif";
		attribute<Eur>     Read             (AdminDomain) := Read_UNCHECKED, IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))";
		attribute<Eur>     Totaal           (AdminDomain) := = ModelParameters/BaseDataOntkoppeld ? 'Read' : 'Write';
	}
	
	attribute<Eur> Totaal (AdminDomain) := Woningen/Totaal + Niet_Woningen/Totaal, Descr = "De totale verwervingskosten, woningen plus niet-woningen";
}