container Werken : using = "SourceData/Actoren/Banen;Classifications/Grondgebruik;Classifications/Actor"
{
	container ProbabilityMap_perSector := for_each_ne(TXLJobs6/name, 'MakeProbabilityMapT('+quote(TXLJobs6/name)+')');
	
	container MaxElemKaart
	{
		attribute<TXLJobs6> ArgMax (AllocDomain) := ='ArgMax('+AsItemList('ProbabilityMap_perSector/'+TXLJobs6/name+'/exponentiated')+')[TXLJobs6]';
		attribute<TXLJobs6> SndBest(AllocDomain) := ='ArgMax('+AsItemList('ArgMax = TXLJobs6/V/'+TXLJobs6/name+'? -9999f: ProbabilityMap_perSector/'+TXLJobs6/name+'/exponentiated')+')[TXLJobs6]';
	}
	
	container ReadCoefficients := for_each_ne(TXLJobs6/name, 'ReadCoefficientsT('+quote(TXLJobs6/name)+',''20220401'','''')');

	Template MakeProbabilityMapT
	{
		parameter<string> Sectorname;
		
		attribute<float32> raw (AllocDomain):= = 'MakeDefined(
			ReadCoefficients/'+Sectorname+'/Result/Constant
			+ log(Diversen/Per_AllocDomain/DistTo_CargoAir / 1[km])                    * ReadCoefficients/'+Sectorname+'/Result/lndistto_cargoair_km 
			+ log(Diversen/Per_AllocDomain/DistTo_Highway_acces_exit_2018 / 1[km])     * ReadCoefficients/'+Sectorname+'/Result/lndist_highway_km_2018 
			+ log(Diversen/Per_AllocDomain/DistTo_Zeehavens_2019 / 1[km])              * ReadCoefficients/'+Sectorname+'/Result/lndist_seaport_km_2019 
			+ log(Diversen/Per_AllocDomain/DistTo_Trainstation_2019 / 1[km])           * ReadCoefficients/'+Sectorname+'/Result/lndist_train_km_2019 
			+ log(Diversen/Per_AllocDomain/tt_100kinhab_min_2017 / 1[min])             * ReadCoefficients/'+Sectorname+'/Result/ln_tt_100kinhab_min_2017 
			+ log(Diversen/Per_AllocDomain/Hedonic_landPrice_2007 / 1[Eur_m2])         * ReadCoefficients/'+Sectorname+'/Result/lnlandPrice 
			+ log(Diversen/Per_AllocDomain/DistTo_Urban_Contour_2000 / 1[km])          * ReadCoefficients/'+Sectorname+'/Result/lndist_urbancontour_km_2000 
			
			+ Diversen/Per_AllocDomain/UAI_2018                                        * ReadCoefficients/'+Sectorname+'/Result/UAI_2018 
			+ Diversen/Per_AllocDomain/lu_share_unavailable                            * ReadCoefficients/'+Sectorname+'/Result/lu_share_unavailable_2012
			+ Diversen/Per_AllocDomain/lu_share_construction                           * ReadCoefficients/'+Sectorname+'/Result/lu_share_construction_2012
			+ Diversen/Per_AllocDomain/lu_share_nature                                 * ReadCoefficients/'+Sectorname+'/Result/lu_share_nature_2012
			+ Diversen/Per_AllocDomain/lu_share_residential                            * ReadCoefficients/'+Sectorname+'/Result/lu_share_residential_2012
			+ Diversen/Per_AllocDomain/Avg_shr_LUType_neigh_1000r_otherbuiltup         * ReadCoefficients/'+Sectorname+'/Result/avgshr_LU12_ngh_1000r_otherbu
			,0f
		)';
		
		attribute<float32> noemer        (AllocDomain):= ='1f + '+AsList('exp(ProbabilityMap_perSector/'+TXLJobs6/name+'/raw)',' + ');
		attribute<float32> exponentiated (AllocDomain):= exp(raw) / noemer;
	}
	
	Template ReadCoefficientsT
	{
		parameter<string> Sectorname;
		parameter<string> Datum;
		parameter<string> Variantname;
		
		unit<uint32> domain
		:  StorageName = "='%RSo_DataDir%/Vastgoed/logitcoeff_mlogit_devType_'+Datum+'.csv'"
		,  StorageType = "gdal.vect"
		,  StorageReadOnly = "True" 
		{
			attribute<string> parm;
			attribute<bool>   IsFE := lowercase(substr(parm, strlen(parm) - 5, strlen(parm))) == lowercase('.prov');
			attribute<string> parm1 := IsFE ? 'p'+parm : parm;
			attribute<string> name := replace(parm1, 'construction', 'buildingsite', '_cons', 'Constant', 'buildingsite', 'construction', 'o.', '', ' ', '_','-','','.','');
		}
		
		unit<uint32> sector_subset := select_with_org_rel(LowerCase(domain/eq) == LowerCase(Sectorname))
		{
			attribute<string>  name     := domain/name[org_rel];
			attribute<float32> estimate := domain/estimate[org_rel][float32];
			attribute<float32> p        := domain/p[org_rel][float32];
		}
		
		container Result := 
			for_each_nedv(
				sector_subset/name
				,'rjoin(rlookup('+quote(lowercase(sector_subset/name))+', lowercase(sector_subset/name)), id(sector_subset), sector_subset/estimate)[float32]'
				, void
				, float32
			);
	}
}