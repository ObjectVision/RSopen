container Afleiding_Winkelcentra
: Descr = "Voor de identificatie van winkelcentra. Dit is nodig voor het bepalen van de dynamisch windmolen restricties onder het kopje kwetsbare gebouwen."
{
	unit<uint8> Type: NrOfRows = 4
	{
		attribute<string> Label       : ['geen','klein','middel','groot'], DialogType = "LabelText";
		attribute<int32>  ClassBreaks : [0,2000,10000,25000], DialogType = "Classification";
		attribute<uint32> BrushColor  : DialogType = "BrushColor", [rgb(225,225,225), rgb(0, 200,0),rgb(0,0,200),rgb(200,0,0)];
		attribute<uint32> PenColor    := BrushColor, DialogType = "PenColor";
	}
	
	// Voor het genereren van de winkelcentra
/* 	container Impl 
	{
		unit<uint32> BAG := ='SourceData/Vastgoed/BAG/PerJaar/'+Last(SourceData/Vastgoed/BAG/BAG_jaren/name)+'/Panden/pand/pand_met_vbo';
		
		unit<uint32> winkelpand := select_with_org_rel(BAG/Fractie_VBOOpp_per_vbo_functie/ArgMax == /Classifications/Vastgoed/vbo_gebruiksdoel_plus/V/winkel)
		{
			attribute<rdc_meter>       geometry (poly)    := BAG/geometry[org_rel];
			attribute<int32>           oppWinkel          := BAG/Sum_VboOpp_inPand_per_vbo_functie/winkel[org_rel][int32];
			attribute<uint32>          nrWinkel           := BAG/Count_VBOs_inPand_per_vbo_functie/winkel[org_rel];
			attribute<winkelbouwblok>  winkelbouwblok_rel := point_in_polygon(centroid_or_mid(geometry), winkelbouwblok/geometry_rd);
		}
		
		unit<uint32> winkelbouwblok := geos_split_union_polygon(winkelpand/geometry)
		{
			attribute<rdc_meter> geometry_simplify (poly) := geos_simplify_polygon(geometry, 2.0);
			attribute<int32>     oppWinkel                := sum(winkelpand/oppWinkel, winkelpand/winkelbouwblok_rel);
			attribute<uint32>    nrWinkel                 := sum(winkelpand/nrWinkel, winkelpand/winkelbouwblok_rel);
			
			unit<uint32>         segments                 := arc2segm(geometry_simplify);
			unit<uint32>         dynapoints               := dyna_point(segments/point, segments/nextpoint, 25[meter])
			{
				attribute<rdc_meter>       geometry           := point;
				attribute<winkelbouwblok> winkelbouwblok_rel := segments/SequenceNr[SequenceNr];
			}
		}
		
		container osm_winkelbouwblok_outline
		{
			attribute<rdc_meter> osm                    (arc, SourceData/Infrastructuur/osm/Read_Final_Network) := SourceData/Infrastructuur/osm/Read_Final_Network/geometry;
			attribute<rdc_meter> winkelbouwblok_outline (arc, winkelbouwblok)        := winkelbouwblok/geometry_rd ;
			attribute<rdc_meter> winkelbouwblok_node    (winkelbouwblok)             := first_node(winkelbouwblok_outline);
			
			unit<uint32> gekoppelde_winkelbouwblokken := connect(osm, winkelbouwblok_node)
			{
				// attribute<rdc_meter> UnionData (arc);
			}
			
			unit<uint32> alle := union_unit(gekoppelde_winkelbouwblokken, winkelbouwblok)
			{
				attribute<rdc_meter> geometry (arc) := union_data(., gekoppelde_winkelbouwblokken/UnionData, winkelbouwblok_outline);
				attribute<uint32>    Type           := union_data(., const(0,gekoppelde_winkelbouwblokken), const(1,winkelbouwblok)); // nodig voor de koppeling, de dynapoints moeten aan Wegen wordengekoppeld
				
				container Connectiveness
				{
					unit<uint32> src := ..;
					attribute<rdc_meter>               point (src)           := first_point(src/geometry);
					attribute<rdc_meter>               nextpoint (src)       := last_point(src/geometry);
					
					unit<uint32> pointset : = union_unit(src,src)
					{
						attribute<rdc_meter>             point       := union_data(., ../point, ../nextpoint);
						attribute<bool>                  isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
						attribute<src>                   ArcNr       := value(id(.) % #(src), src);
					}
					
					unit<uint32> NodeSet := unique(pointset/point)
					,	DialogData = "Values"
					,	DialogType = "Map"
					{
						attribute<rdc_meter> values;
					}
					
					attribute<NodeSet> F1 (src) := rlookup(point,     NodeSet/Values);
					attribute<NodeSet> F2 (src) := rlookup(nextpoint, NodeSet/Values);
					
					unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
					{
						attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), partnr);
						parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
						parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
					}
					
					unit<uint32> NodesNotConnected := select_with_org_rel(networks/partnr <> networks/main)
					{
						attribute<rdc_meter> point := NodeSet/Values[org_rel];
					}
					attribute<bool> isVerbonden (src) := all(pointset/isVerbonden, pointset/ArcNr);
				}
				
			}
		}
		
		container cluster_netwerk :=
			Netwerk_punten_wegen_T(
				  winkelbouwblok/dynapoints 
				, winkelbouwblok/dynapoints
				, osm_winkelbouwblok_outline/alle
				, winkelbouwblok/dynapoints/Point 
				, winkelbouwblok/dynapoints/Point
				, osm_winkelbouwblok_outline/alle/geometry
				// , 1.4[m_s]
			)
		{
			unit<uint32> OD_full :=
				dijkstra_m('bidirectional;startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);od:impedance,OrgZone_rel,DstZone_rel' 
					, cluster_netwerk/OrgToDest/linkset/Length
					, cluster_netwerk/OrgToDest/linkset/F1
					, cluster_netwerk/OrgToDest/linkset/F2
					, cluster_netwerk/OrgToDest/nr_orgNode
					, cluster_netwerk/OrgToDest/nr_destNode
					, 2500[meter]
				)
			{
				attribute<meter> impedance;
				attribute<meter> hemelsbreed := dist(winkelbouwblok/dynapoints/Point[OrgZone_rel], winkelbouwblok/dynapoints/Point[DstZone_rel])[meter];
			}
			unit<uint32> OD := select_with_org_rel(OD_full/impedance <= 100[meter] || OD_full/hemelsbreed <= 50[meter])
			{
				attribute<winkelbouwblok/dynapoints> OrgZone_rel := OD_full/OrgZone_rel[org_rel];
				attribute<winkelbouwblok/dynapoints> DstZone_rel := OD_full/DstZone_rel[org_rel];
			}
			unit<uint32> connected_winkelbouwblok_dp:= connected_parts(OD/OrgZone_rel, OD/DstZone_rel)
			{
				attribute<upoint> winkelbouwblok_rel_centrum_rel (winkelbouwblok/dynapoints ) := point(partnr, winkelbouwblok/dynapoints/winkelbouwblok_rel, upoint);
			}
			unit<uint32> winkelbouwblok_centrum := unique(connected_winkelbouwblok_dp/winkelbouwblok_rel_centrum_rel)
			{
				attribute<winkelbouwblok> winkelbouwblok_rel := PointCol(values);
				attribute<winkelcentrum>  winkelcentrum_rel  := PointRow(values);
				
				attribute<rdc_meter> geometry (polygon) := winkelbouwblok/geometry_rd[winkelbouwblok_rel];
			}
		}
		
		unit<uint32> winkelcentrum := unique(cluster_netwerk/connected_winkelbouwblok_dp/PartNr) 
		, StorageName = "%RSo_DataDir%/Vastgoed/WinkelCentra_afleiding.gpkg"
		, StorageType = "gdalwrite.vect"
		{
			attribute<rdc_meter>  geometry (poly) := geos_union_polygon(cluster_netwerk/winkelbouwblok_centrum/geometry,cluster_netwerk/winkelbouwblok_centrum/winkelcentrum_rel);
			attribute<int32>      oppWinkel       := sum(winkelbouwblok/oppWinkel[cluster_netwerk/winkelbouwblok_centrum/winkelbouwblok_rel], cluster_netwerk/winkelbouwblok_centrum/winkelcentrum_rel);
			attribute<uint32>     nrWinkel        := sum(winkelbouwblok/nrWinkel[cluster_netwerk/winkelbouwblok_centrum/winkelbouwblok_rel] , cluster_netwerk/winkelbouwblok_centrum/winkelcentrum_rel);
			attribute<Type>       Type_rel        := Classify(oppWinkel, Type/ClassBreaks);
			attribute<uint32>     values          : disablestorage = "TRUE";
		}
		
		Template Netwerk_punten_wegen_T
		{
			unit<uint32> orgDomain;
			unit<uint32> destDomain;
			unit<uint32> roadDomain;
			
			attribute<rdc_meter> orgLocations  (orgDomain);
			attribute<rdc_meter> destLocations (destDomain);
			attribute<rdc_meter> roads         (arc,roadDomain);
			// end case Parameters
			
			attribute<rdc_meter> NetwerkSpec (arc,OrgToDest/RoadsWithLocations):= OrgToDest/RoadsWithLocations/UnionData;
			
			container OrgToDest
			{ 
				unit<uint32> Locations := union_unit(orgDomain, destDomain)
				,	DialogData  = "Values"
				,	DialogType  = "Map"
				{
					attribute<rdc_meter> Values := union_data(.,orgLocations, destLocations), Label = "Unieke Locations origins en destinations";
				}
				
				unit<uint32> UniqueLocation := unique(Locations/values);
				
				unit<uint32> RoadsWithLocations := ='connect_eq(roads, roadDomain/Connectiveness/IsVerbonden[uint32], OrgToDest/UniqueLocation/values, const(1,OrgToDest/UniqueLocation))'
				,	DialogData = "UnionData"
				,	DialogType = "Map"
				{
					attribute<Classifications/OSM/wegType> wegType                  := ='MakeDefined(RoadDomain/Type[uint8][org_rel], value(69,Classifications/OSM/wegType))';
				}
				
				unit <uint32> LinkSet := arc2segm(RoadsWithLocations/UnionData)
				,	DialogData = "segments"
				,	DialogType = "Map"
				{
					attribute<Classifications/OSM/wegType>  wegType                      := RoadsWithLocations/wegType[SequenceNr];
					attribute<meter>                        Length                       := arc_length(segments, meter) == 0[meter] ? 0.01[meter] : arc_length(segments, meter);
					
					unit<uint32> pointset := Union_Unit(LinkSet, LinkSet)
					{
						attribute<rdc_meter>        point   := Union_Data(pointset, LinkSet/point, LinkSet/nextpoint);
						attribute<LinkSet>          Arcid   := value(id(pointset) % NrOfRows(LinkSet), LinkSet);
						attribute<uint32>           VolgNr  := id(pointset) / NrOfRows(LinkSet);
					}
					attribute<rdc_meter> segments(arc) := points2sequence(pointset/point, pointset/Arcid, pointset/VolgNr);
						
					attribute<NodeSet> F1(LinkSet):= rlookup(LinkSet/point,     NodeSet/Values);
					attribute<NodeSet> F2(LinkSet):= rlookup(LinkSet/nextpoint, NodeSet/Values);
				}
				
				unit<uint32> NodeSet  := unique(linkset/pointset/point)
				,	DialogData = "Values"
				,	DialogType = "Map"
				{
				}
				
				unit<uint64> NodeSet2 := combine_unit_uint64(NodeSet, NodeSet);
				
				attribute<NodeSet> nr_orgNode  (orgDomain)   := rlookup(orgLocations, NodeSet/Values);
				attribute<NodeSet> nr_destNode (destDomain)  := rlookup(destLocations, NodeSet/Values);
			}
		}
	}
 */	
	unit<uint32> WinkelCentra 
	: StorageName = "%RSo_DataDir%/Vastgoed/WinkelCentra_afleiding.gpkg"
	, StorageType = "gdal.vect"
	, StorageReadOnly = "TRUE"
	{
		attribute<rdc_meter> geometry (poly);
		attribute<int32>     oppWinkel;
		attribute<uint32>    nrWinkel;
		attribute<Type>      Type_rel;
		
		attribute<bool> IsWinkelComplex := nrWinkel > 5 && oppWinkel > 1000i;
		
		unit<uint32> WinkelComplexen := select_with_org_rel(IsWinkelComplex)
		{
			attribute<rdc_meter>  geometry (poly) := ../geometry[org_rel];
		}
	}
}