container Grondgebruik : using = "Classifications/Actor;Classifications/Grondgebruik"
{
	container Src := SourceData/Grondgebruik/BBG/dominant;
	
	container Per_AdminDomain
	{
		attribute<CBSKlasse> gg_CBS (AdminDomain) := ='Src/Per_AdminDomain/Y'+ModelParameters/BBG_Year
		, Descr = "CBS grondgebruik klasse in het basisjaar"
		{
			attribute<CBSKlasse/Aggr> Per_Aggr (AdminDomain) := CBSKlasse/Aggr_rel[.], Descr = "Aggregatie van CBS grondgebruik klassen naar de aggregatie klasse";
		}
		
		attribute<Bool> IsWerklocatie (AdminDomain) := CBSKlasse/IsWerklocatie[gg_CBS], Descr = "Is het een werklocatie volgens CBS definitie?";
		attribute<Bool> IsWoonlocatie (AdminDomain) := CBSKlasse/IsWoonlocatie[gg_CBS], Descr = "Is het een woonlocatie volgens CBS definitie?";
		attribute<Bool> IsZeehaven    (AdminDomain) := SourceData/Grondgebruik/IBIS/IsZeehaven_AdminDomain, Descr = "Is het een zeehaven volgens IBIS definitie?";
		attribute<Bool> IsGrootWater  (AdminDomain) := CBSKlasse/IsGrootWater[gg_CBS], Descr = "Is het groot water volgens CBS definitie?";
		attribute<Bool> IsGroen       (AdminDomain) := CBSKlasse/IsGroen[gg_CBS], Descr = "Is het groen volgens CBS definitie?";
		attribute<Bool> IsBouwterrein (AdminDomain) := gg_CBS == CBSKlasse/V/bouwterrein, Descr = "Is het bouwterrein volgens CBS definitie?";
		
		attribute<LU_ModelType> gg_Landbouw_Voedergewas (AdminDomain) := invert(LU_ModelType/Voedergewas_rel)[SourceData/Landbouw/Voedergewas_Categorie_2014], Descr = "Landbouw klasse op basis van voedergewassen";
		attribute<LU_ModelType> gg_Landbouw_LGN         (AdminDomain) := LGNKlasse/LU_ModelType_rel[SourceData/Grondgebruik/LGN/m25], Descr = "Landbouw klasse op basis van LGN";
		attribute<LU_ModelType> gg_Landbouw             (AdminDomain) := MakeDefined(gg_Landbouw_Voedergewas, gg_Landbouw_LGN), Descr = "Landbouw klasse, eerst op basis van voedergewassen, anders op basis van LGN";
		
		attribute<LU_ModelType>      gg_CBS_MT                     (AdminDomain) := CBSKlasse/LU_ModelType_rel[gg_CBS], Descr = "Landgebruik ModelType klasse op basis van CBS grondgebruik";
		attribute<LU_ModelType>      gg_basis0                     (AdminDomain) := MakeDefined(gg_CBS_MT, gg_Landbouw), Descr = "Landgebruik ModelType klasse, eerst op basis van CBS, anders op basis van landbouw";
		attribute<LU_ModelType>      gg_basis1                     (AdminDomain) := IsNull(gg_basis0) && gg_CBS == CBSKlasse/v/overige_agrarisch_gebruik ? LU_ModelType/v/Landbouw_gg_vee : gg_basis0, Descr = "Is gg_basis0 undefined en als het een overige agrarisch gebruik is volgens CBS, dan grondgebonden vee. Anders gg_basis0";
		attribute<LU_ModelType>      gg_basis                      (AdminDomain) := MakeDefined(gg_basis1, LU_ModelType/v/overig_Totaal), Descr = "Als gg_basis1 undefined is, dan overig. Anders gg_basis1";
	}
	
	container Per_AllocDomain
	{
		attribute<CBSKlasse> Basisjaar (AllocDomain) := ='Src/Per_AllocDomain/Y'+ModelParameters/BBG_Year, Descr = "CBS grondgebruik klasse in het basisjaar";

		attribute<Bool> IsWerklocatie (AllocDomain) := CBSKlasse/IsWerklocatie[Basisjaar], Descr = "Is het een werklocatie volgens CBS definitie?";
		attribute<Bool> IsWoonlocatie (AllocDomain) := CBSKlasse/IsWoonlocatie[Basisjaar], Descr = "Is het een woonlocatie volgens CBS definitie?";
		attribute<Bool> IsZeehaven    (AllocDomain) := SourceData/Grondgebruik/IBIS/IsZeehaven_AllocDomain, Descr = "Is het een zeehaven volgens IBIS definitie?";
		attribute<Bool> IsGrootWater  (AllocDomain) := CBSKlasse/IsGrootWater[Basisjaar], Descr = "Is het groot water volgens CBS definitie?";
		attribute<Bool> IsGroen       (AllocDomain) := CBSKlasse/IsGroen[Basisjaar], Descr = "Is het groen volgens CBS definitie?";
		attribute<Bool> IsBouwterrein (AllocDomain) := Basisjaar == CBSKlasse/V/bouwterrein, Descr = "Is het bouwterrein volgens CBS definitie?";
	}
	
	container NabijGrootWaterInBBG
	{
		attribute<Bool>    IsGrootWater    (AllocDomain) := Per_AllocDomain/IsGrootWater, Descr = "Is het groot water volgens CBS definitie?";
		attribute<Float32> Smoothed_srcsrc (AllocDomain) := potential(IsGrootWater[float32], Distmatrices/Impl_100m/pot500m/PotRange/rev_dist_scaled ), Descr = "Smoothing van groot water met een bereik van 500m";
		attribute<Float32> Smoothed0       (AllocDomain) := Smoothed_srcsrc * BaseData/Omgeving/OV_Reistijd/TotRailHalte/Smoothed, Descr = "Vermenigvuldigen met nabijheid treinstation om gebieden te benadrukken die zowel nabij groot water als nabij een treinstation liggen";
		attribute<Float32> Smoothed        (AllocDomain) := Smoothed0  / max(Smoothed0), Descr = "Normaliseren op de maximale waarde";
	}
}