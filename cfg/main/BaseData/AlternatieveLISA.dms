container AlternatieveLISA
: Descr = "De LISA dataset is niet publiek beschikbaar, echter RS heeft een ruimtelijk specifieke banen set nodig. Hiertoe worden publiekelijk beschikbare banen per gemeente gedesaggreerd op basis van informatie uit de BAG."
{
	parameter<String> LISA_jaar_str := 'Y'+string(ModelParameters/LISA_StartYear);
	unit<UInt32> Gemeente           := ='SourceData/RegioIndelingen/CBS/'+string(LISA_jaar_str)+'/Gemeente';
	unit<UInt32> Provincie          := ='SourceData/RegioIndelingen/CBS/'+string(LISA_jaar_str)+'/Provincie';
	unit<UInt32> LISA               := ='SourceData/Actoren/Banen/Year';
	
	container Prepare_LISA_Data_AdminDomain := Prepare_LISA_Data_T('AdminDomain');
	container Prepare_LISA_Data_AllocDomain := Prepare_LISA_Data_T('AllocDomain');
	
	Template Prepare_LISA_Data_T
	{
		//
		parameter<String> domain_str;
		//
		
		unit<IPoint> domain := =domain_str;
		
		container LISA_gem :=
			for_each_nedv(
				Actor/TXLJobs7/name
				, 'LISA/per_TXLJobs7/'+Actor/TXLJobs7/name
				, Gemeente
				, Job
			), Descr = "Lees de LISA data per gemeente uit de SourceData";
			
		// container LISA_per_prov :=
			// for_each_nedv(
				// Actor/TXLJobs7/name
				// , 'sum(LISA_gem/'+Actor/TXLJobs7/name+', Gemeente/Provincie_rel)'
				// , Provincie
				// , Job
			// ), Descr = "";
		
		container VBO_opp := 
			for_each_nedv(
				Actor/Jobs6/name
				,'BaseData/StartState/PandFootprint/PerYear_AdminDomain/'+LISA_jaar_str+'/pand_met_vbo/vboopp_perJobs6_'+domain_str+'/'+Actor/Jobs6/name
				, domain
				, meter2
			), Descr = "Lees de relevante vbo-opp attributen per subsector uit het relevante bag jaar.";
		
		container Desaggregatie_per_Jobs6_vboopp :=
			for_each_nedv(
				Actor/Jobs6/name
				,	'scalesum(
						VBO_opp/'+Actor/Jobs6/name+'
						,Gemeente/per_'+domain_str+'
						,LISA_gem/'+Actor/Jobs6/name+'
					)'
				, domain
				, Job
			), Descr = "per Jobs6 wordt het aantal banen per gemeente uitgesmeerd over gridcellen op basis van de hoeveelheid vbo oppervlak van desbetreffende jobs6-sector in een cel.";
	}
	
	container Impl
	{
		unit<UInt8> domains : NrOfRows = 2
		{
			attribute<String> name    : ['AdminDomain', 'AllocDomain'];
		}
		unit<UInt8> potentials : NrOfRows = 6
		{
			attribute<UInt32> range: [0,25,50,100,200,500];
			attribute<String> name := 'Pot'+string(range)+'m';
		}
	}
	
	unit<UInt8> Variants := combine_uint8(Actor/Jobs6, Impl/domains, Impl/potentials)
	, Descr = "Hier worden combinaties van uit te zoeken varianten gegenereerd."
	{
		attribute<String> job_name        := Actor/Jobs6/name[first_rel]; 
		attribute<String> domain_name     := Impl/domains/name[second_rel]; 
		attribute<String> potential_name  := Impl/potentials/name[third_rel]; 
		attribute<UInt32> potential_value := Impl/potentials/range[third_rel]; 
		
		attribute<String> name := job_name +'_'+ domain_name +'_'+ potential_name;
		attribute<String> Label := name;
	}
	
	container PerVariant := 
		for_each_ne(
			Variants/name
			, 'PerVariant_T('+quote(Variants/job_name)+', '+quote(Variants/domain_name)+', '+string(Variants/potential_value)+'[uint32])'
		), Descr = "Er zijn verschillende varianten te gedefinieerd om zo dicht mogelijk de 'echte' banenset te benaderen. Verschillelnde celgrootte, maar verschillende potentiaal groottes.";
	
	Template PerVariant_T
	{
		//
		parameter<String> Sector_name;
		parameter<String> domain_str;
		parameter<UInt32> potential_value;
		//
		
		parameter<String> Domain_ref_short := = domain_str+'_ref_short';
		parameter<String> j := Sector_name;
		
		unit<IPoint> domain := = domain_str;
		
		attribute<job> Estimate_potential (domain) := ='potential(
			Prepare_LISA_Data_'+domain_str+'/Desaggregatie_per_Jobs6_vboopp/'+Sector_name+'
			, Geography/Distmatrices_'+Domain_ref_short+'/pot'+string(potential_value)+'m/Flat2
		)', Descr = "Hier wordt de scalesum desaggregatie middels een potentiaal functie uitgesmeerd ('gesmooth') om 'missers' minder heftig te maken. Deze exercitie is er sowieso enkel om een echte banenset te benaderen.";
	}
}