container NoRegret
{
	container OnbenutBebouwd
	: Descr = "overkappingen parkeerterreinen en andere locaties, oude vuilstortplaatsen, bluswatervijvers, gietwaterbassins, verweesde (bedrijven)terreinen"
	{
		unit<uint32> UitBRT_stortplaatsen := select_with_org_rel(/SourceData/Grondgebruik/BRT/Compleet/top10nl_terrein_vlak/visualisatiecode_rel == Classifications/Grondgebruik/BRT/visualisatiecodes/V/terrein_vlakken_stortplaats)
		{
			attribute<rdc_meter>    geometry (poly) := SourceData/Grondgebruik/BRT/Compleet/top10nl_terrein_vlak/geometry_simpl[org_rel];
			parameter<LadderTreden> Laddertrede_rel := LadderTreden/V/vuilstortplaatsen[LadderTreden];
			parameter<float32>      fractie :=LadderTreden/fractie[float32][LadderTreden/V/vuilstortplaatsen];
			attribute<meter2>       Nrmeter2_met_interne_overlap := area(geometry, meter2);
			parameter<meter2>       SUM_Nrmeter2_met_interne_overlap := sum(Nrmeter2_met_interne_overlap);
			container Union := Templates/Zonneladder_Union_T(., geometry, Laddertrede_rel);
			attribute<meter2>       Nrmeter2_max (union/unioned_domain) := area(Union/unioned_geometry, meter2);
			parameter<meter2>       SUM_Nrmeter2_max := sum(Nrmeter2_max);
			attribute<meter2>       Nrmeter2 (union/unioned_domain) := Nrmeter2_max * fractie;
			parameter<float32>      interne_overlap_aandeel := 1f - (SUM_Nrmeter2_max / SUM_Nrmeter2_met_interne_overlap);
		}
		
		//http://imgeo.geostandaarden.nl/def/imgeo-object/overigbouwwerk/overkapping
		//Er is geen dubbeltelling met technisch potentieel dak (de 66GW), het gaat ruimtelijk gezien om andere objecten zie metadata /BGT/Classes/V/overigbouwwerk_bassin
		//let op niet alle gemeenten lijken gevuld.
		unit<uint32> UitBGT_overkapping := select_with_org_rel(SourceData/Grondgebruik/BGT/IsDefinedAndNotNoData/visualisatiecode_rel == /Classifications/Grondgebruik/BGT/Classes/V/overigbouwwerk_overkapping), url="%ProjDir%/metadata/montfoort_BGT_overkapping_vs_BAG_panden.jpg"
		{
			parameter<LadderTreden> Laddertrede_rel := LadderTreden/V/overkappingen[LadderTreden];
			parameter<float32> fractie := LadderTreden/fractie[float32][LadderTreden/V/overkappingen];
			attribute<rdc_meter> geometry (poly) := SourceData/Grondgebruik/BGT/IsDefinedAndNotNoData/geometry_simpl[org_rel];
			attribute<meter2> Nrmeter2_met_interne_overlap := area(geometry, meter2);
			parameter<meter2> SUM_Nrmeter2_met_interne_overlap := sum(Nrmeter2_met_interne_overlap);
			container Union := Templates/Zonneladder_Union_T(., geometry, Laddertrede_rel);
			attribute<meter2> Nrmeter2_max (union/unioned_domain) := area(Union/unioned_geometry, meter2);
			parameter<meter2> SUM_Nrmeter2_max := sum(Nrmeter2_max);
			attribute<meter2> Nrmeter2 (union/unioned_domain) := Nrmeter2_max * fractie;
			parameter<float32> interne_overlap_aandeel := 1f - (SUM_Nrmeter2_max / SUM_Nrmeter2_met_interne_overlap);
		}
		
		unit<uint32> UitBGT_parkeervlak := select_with_org_rel(SourceData/Grondgebruik/BGT/IsDefinedAndNotNoData/visualisatiecode_rel == /Classifications/Grondgebruik/BGT/Classes/V/wegdeel_parkeervlak),	DialogType = "Map",	DialogData = "convex_hull"
		{
			attribute<rdc_meter> geometry (poly) := SourceData/Grondgebruik/BGT/IsDefinedAndNotNoData/geometry_simpl[org_rel];
			attribute<meter2> Nrmeter2 := area(convex_hull, meter2);
			attribute<meter> arc_length := arc_length(convex_hull, meter);
			
			//cirkel=1
			container            IQ                   := Templates/Zonneladder_Isoperimetrisch_quotient_T(Nrmeter2, arc_length, .);
			attribute<rdc_meter> convex_hull   (poly) := Simplify/MakeFinal/Convex_hull;
			attribute<bool>      HasTooLowIQ          := IsDefined(invert(Valt_af_door_lage_IQ/org_rel));
			attribute<bool>      HasNegativeIQ        := IsDefined(invert(Negatieve_IQ/org_rel));
			unit<uint32>         Valt_af_door_lage_IQ := select_with_org_rel(IQ/Isoperimetrisch_quotient <= minimale_IQ)
			{
				attribute<rdc_meter> geometry (poly) := ../geometry[org_rel];
			}
			unit<uint32> Negatieve_IQ := select_with_org_rel(IQ/Isoperimetrisch_quotient < 0.0f)
			{
				attribute<rdc_meter> geometry (poly) := ../geometry[org_rel];
			}
			
			unit<uint32> Result := select_with_org_rel(!HasTooLowIQ && !HasNegativeIQ && Nrmeter2 >= minimale_opp_parkeervlak)
			{
				parameter<LadderTreden> Laddertrede_rel := LadderTreden/V/parkeerterreinen[LadderTreden];
				parameter<float32> fractie := LadderTreden/fractie[float32][LadderTreden/V/parkeerterreinen];
				
				attribute<rdc_meter> geometry (poly) := ../geometry[org_rel];
				attribute<meter2> Nrmeter2_met_interne_overlap := area(geometry, meter2);
				
				parameter<meter2> SUM_Nrmeter2_met_interne_overlap := sum(Nrmeter2_met_interne_overlap);
				
				container Union := Templates/Zonneladder_Union_T(., geometry, Laddertrede_rel);
				
				attribute<meter2> Nrmeter2_max (union/unioned_domain) := area(Union/unioned_geometry, meter2);
				
				parameter<meter2> SUM_Nrmeter2_max := sum(Nrmeter2_max);
				
				attribute<meter2> Nrmeter2 (union/unioned_domain) := Nrmeter2_max * fractie;
				
				parameter<float32> interne_overlap_aandeel := 1f - (SUM_Nrmeter2_max / SUM_Nrmeter2_met_interne_overlap);
			}
			
			container Simplify := Templates/SimplifyT(., 3);
		}
		
		container Bassins
		{
			unit<uint32> UitBGT_bassin := select_with_org_rel(SourceData/Grondgebruik/BGT/IsDefinedAndNotNoData/visualisatiecode_rel == /Classifications/Grondgebruik/BGT/Classes/V/overigbouwwerk_bassin )
			{
				attribute<rdc_meter> geometry (poly) := SourceData/Grondgebruik/BGT/IsDefinedAndNotNoData/geometry_simpl[org_rel];
			}
			
			//TODOBAS bassin alleen in glastuinbouwgebieden selecteren (havendoks,, zwembaden, drinkwaterbassins dienen af te vallen). domein-probleem
			unit<uint32> UitBRT_Glastuinbouw := select_with_org_rel(SourceData/Grondgebruik/BRT/Compleet/top10nl_terrein_vlak/visualisatiecode_rel == Classifications/Grondgebruik/BRT/visualisatiecodes/V/Terrein_vlakken_kassengebied )
			{
				attribute<rdc_meter> geometry (poly) := SourceData/Grondgebruik/BRT/Compleet/top10nl_terrein_vlak/geometry_simpl[org_rel];
			}
			
			unit<uint32> Bassin_op_Glastuinbouw := geos_overlay_polygon(UitBGT_bassin/geometry, UitBRT_Glastuinbouw/geometry)
			{
				parameter<LadderTreden> Laddertrede_rel := LadderTreden/V/bassinsGltb[LadderTreden];
				parameter<float32> fractie := LadderTreden/fractie[float32][LadderTreden/V/bassinsGltb];
				
				attribute<meter2> Nrmeter2_met_interne_overlap := area(geometry, meter2);
				parameter<meter2> SUM_Nrmeter2_met_interne_overlap := sum(Nrmeter2_met_interne_overlap);
				container Union := Templates/Zonneladder_Union_T(., geometry, Laddertrede_rel);
				attribute<meter2> Nrmeter2_max (union/unioned_domain) := area(Union/unioned_geometry, meter2);
				parameter<meter2> SUM_Nrmeter2_max := sum(Nrmeter2_max);
				attribute<meter2> Nrmeter2 (union/unioned_domain) := Nrmeter2_max * fractie;
				parameter<float32> interne_overlap_aandeel := 1f - (SUM_Nrmeter2_max / SUM_Nrmeter2_met_interne_overlap);
			}
		}
		
	
		parameter<meter2> UitBRT_stortplaatsen_opp := sum(UitBRT_stortplaatsen/Nrmeter2);
		parameter<meter2> UitBGT_overkapping_opp := sum(UitBGT_overkapping/Nrmeter2);
		parameter<meter2> UitBGT_parkeervlak_opp := sum(UitBGT_parkeervlak/Result/Nrmeter2);
		parameter<meter2> UitBGT_bassin_opp := sum(Bassins/Bassin_op_Glastuinbouw/Nrmeter2);
		parameter<meter2> Totaal_opp := UitBRT_stortplaatsen_opp + UitBGT_overkapping_opp + UitBGT_parkeervlak_opp + UitBGT_bassin_opp;
		parameter<GW> Potentieel_gegenereerd_vermogen_laag := (Totaal_opp / 10000[meter2 / ha]) * Vermogen_ha_laag / 1000[MW / GW];
		parameter<GW> Potentieel_gegenereerd_vermogen_hoog := (Totaal_opp / 10000[meter2 / ha]) * Vermogen_ha_hoog / 1000[MW / GW];
	}
	
	container OpInfraWerken
	: Descr = "geluidsschermen, vliegvelden"
	{
		container RondVliegvelden
		{
			parameter<LadderTreden> Laddertrede_rel := LadderTreden/V/vliegvelden[LadderTreden];
			parameter<float32> fractie := LadderTreden/fractie[float32][LadderTreden/V/vliegvelden];
			
			unit<uint32> UitBGT_graslandoverig := select_with_org_rel(SourceData/Grondgebruik/BGT/IsDefinedAndNotNoData/visualisatiecode_rel  == /Classifications/Grondgebruik/BGT/Classes/V/begroeidterreindeel_grasland_overig)
			{
				attribute<rdc_meter> geometry    (poly) := SourceData/Grondgebruik/BGT/IsDefinedAndNotNoData/geometry_simpl[org_rel];
				attribute<meter2>    area               := area(geometry, meter2);
				attribute<rdc_meter> centroid           := centroid_or_mid(geometry);
				attribute<uint32>    bebouwde_kom_rel   := point_in_polygon(centroid, SourceData/RegioIndelingen/Bevolkingskern_2011/Geometry);
				
				unit<uint32> buitenbebouwdekom := select_with_org_rel(!IsDefined(bebouwde_kom_rel) && area >= minimale_opp_gras)
				{
					attribute<rdc_meter> geometry (poly) := ../geometry[org_rel];
				}
				
				container per_tile := for_each_ne(
					  geography/TileDomain/name
					,'Templates/Zonneladder_ProcessTilesT('+quote(geography/TileDomain/name)+', UitBGT_graslandoverig/buitenbebouwdekom, minimale_opp_gras)'
				);
				
				unit<uint32> union_domain := ='union_unit('+AsItemList('per_tile/'+geography/TileDomain/name+'/Tile_selection/target_geom_in_tile/Multi_to_singlepart_polygons')+')'
				{
					attribute<rdc_meter> geometry (poly) := ='union_data(.,'+AsItemList('per_tile/'+geography/TileDomain/name+'/Tile_selection/target_geom_in_tile/Multi_to_singlepart_polygons/geometry_checked')+')';
					attribute<meter2> Nrmeter2 := area(geometry, meter2);
				}
			}
			
			unit<uint32> UitBGT_groenvoorziening := select_with_org_rel(SourceData/Grondgebruik/BGT/IsDefinedAndNotNoData/visualisatiecode_rel  == /Classifications/Grondgebruik/BGT/Classes/V/begroeidterreindeel_groenvoorziening)
			{
				attribute<rdc_meter> geometry (poly) := SourceData/Grondgebruik/BGT/IsDefinedAndNotNoData/geometry_simpl[org_rel];
				attribute<meter2>    area               := area(geometry, meter2);
				attribute<rdc_meter> centroid           := centroid_or_mid(geometry);
				attribute<uint32>    bebouwde_kom_rel   := point_in_polygon(centroid, SourceData/RegioIndelingen/Bevolkingskern_2011/Geometry);
				
				unit<uint32> buitenbebouwdekom := select_with_org_rel(!IsDefined(bebouwde_kom_rel) && area >= minimale_opp_groen)
				{
					attribute<rdc_meter> geometry (poly) := ../geometry[org_rel];
				}
				
				container per_tile := for_each_ne(
					  geography/TileDomain/name
					,'Templates/Zonneladder_ProcessTilesT('+quote(geography/TileDomain/name)+', UitBGT_groenvoorziening/buitenbebouwdekom, minimale_opp_groen)'
				);
				
				unit<uint32> union_domain := ='union_unit('+AsItemList('per_tile/'+geography/TileDomain/name+'/Tile_selection/target_geom_in_tile/Multi_to_singlepart_polygons')+')'
				{
					attribute<rdc_meter> geometry (poly) := ='union_data(.,'+AsItemList('per_tile/'+geography/TileDomain/name+'/Tile_selection/target_geom_in_tile/Multi_to_singlepart_polygons/geometry_checked')+')';
					attribute<meter2>    Nrmeter2        := area(geometry, meter2);
				}
			}
			
			unit<uint32> UitBGT_vliegbanen := select_with_org_rel(SourceData/Grondgebruik/BGT/IsDefinedAndNotNoData/visualisatiecode_rel  == /Classifications/Grondgebruik/BGT/Classes/V/wegdeel_baan_voor_vliegverkeer)
			{
				attribute<rdc_meter> geometry     (poly) := SourceData/Grondgebruik/BGT/IsDefinedAndNotNoData/geometry_simpl[org_rel];
				attribute<meter2>    Nrmeter2            := area(geometry, meter2);
				attribute<rdc_meter> inflate_5m   (poly) := geos_buffer_multi_polygon(geometry, 5d, 16b);
				attribute<rdc_meter> inflate_50m  (poly) := geos_buffer_multi_polygon(geometry, 50d, 16b);
				
				parameter<rdc_meter> inflate_50m_union (poly) := geos_union_polygon(inflate_50m);
			}
			
			container Groen_rond_Vliegvelden
			{
				unit<uint32> intersect := geos_overlay_polygon(UitBGT_vliegbanen/inflate_5m, UitBGT_groenvoorziening/union_domain/geometry)
				{
					attribute<rdc_meter> geometry (poly);
					attribute<uint32>    first_rel;
					attribute<uint32>    second_rel;
				}
				
				attribute<uint32> target_rel (UitBGT_groenvoorziening/union_domain) := rlookup(id(UitBGT_groenvoorziening/union_domain), intersect/second_rel);
				
				unit<uint32> Result := select_with_org_rel(IsDefined(target_rel))// 150m vanaf hartlijn vliegbaan moeten er nog uit
				{
					attribute<rdc_meter> geometry     (poly) := UitBGT_groenvoorziening/union_domain/geometry[org_rel];
					container            Union               := Templates/Zonneladder_Union_T(., geometry, Laddertrede_rel);
					attribute<rdc_meter>    without_buff (union/unioned_domain, poly) := geos_difference(union/unioned_geometry, UitBGT_vliegbanen/inflate_50m_union);
					
					unit<uint32> unioned_domain := geos_split_union_polygon(without_buff);
					attribute<rdc_meter>    unioned_geometry (unioned_domain, poly) := unioned_domain/geometry[rdc_meter];
					
					attribute<meter2>  Nrmeter2_max (unioned_domain) := area(unioned_geometry, meter2);
					attribute<meter2>  Nrmeter2     (unioned_domain) := Nrmeter2_max * fractie;
				}
			}
			
			container Gras_rond_Vliegvelden
			{
				unit<uint32> intersect :=   geos_overlay_polygon(UitBGT_vliegbanen/inflate_5m, UitBGT_graslandoverig/union_domain/geometry)
				{
					attribute<rdc_meter> geometry (poly);
					attribute<uint32>    first_rel;
					attribute<uint32>    second_rel;
				}
				
				attribute<uint32> target_rel (UitBGT_graslandoverig/union_domain) := rlookup(id(UitBGT_graslandoverig/union_domain), intersect/second_rel);
				
				unit<uint32> Result := select_with_org_rel(IsDefined(target_rel))
				{
					attribute<rdc_meter>  geometry     (poly) := UitBGT_graslandoverig/union_domain/geometry[org_rel];
					container             Union               := Templates/Zonneladder_Union_T(., geometry, Laddertrede_rel);
					attribute<rdc_meter>     without_buff (union/unioned_domain, poly) := geos_difference(union/unioned_geometry, UitBGT_vliegbanen/inflate_50m_union);
					
					unit<uint32> unioned_domain := geos_split_union_polygon(without_buff);
					attribute<rdc_meter> unioned_geometry (unioned_domain, poly) := unioned_domain/geometry;
					
					attribute<meter2> Nrmeter2_max (unioned_domain) := area(unioned_geometry, meter2);
					attribute<meter2> Nrmeter2     (unioned_domain) := Nrmeter2_max * fractie;
				}
			}
			
			unit<uint32> Combine_all_layers := union_unit(Groen_rond_Vliegvelden/result/unioned_domain, Gras_rond_Vliegvelden/result/unioned_domain)
			{
				attribute<rdc_meter> geometry (poly) := union_data(.
					, Groen_rond_Vliegvelden/result/unioned_geometry 
					, Gras_rond_Vliegvelden/result/unioned_geometry 
				);
				
				container Union := Templates/Zonneladder_Union_T(., geometry, Laddertrede_rel);
				
				attribute<meter2> Nrmeter2_max (union/unioned_domain) := area(Union/unioned_geometry, meter2);
				attribute<meter2> Nrmeter2     (union/unioned_domain) := Nrmeter2_max * fractie;
			}
			
			parameter<meter2> Groen_rond_Vliegvelden_opp := sum(Groen_rond_Vliegvelden/result/Nrmeter2);
			parameter<meter2> Gras_rond_Vliegvelden_opp  := sum(Gras_rond_Vliegvelden/result/Nrmeter2);
			parameter<meter2> Totaal_opp                 := Groen_rond_Vliegvelden_opp + Gras_rond_Vliegvelden_opp;
			parameter<meter2> Totaal_unioned_opp         := sum(Combine_all_layers/Nrmeter2);
		}
		
		container Geluidsschermen
		{
			parameter<LadderTreden> Laddertrede_rel := LadderTreden/V/geluidsschermen[LadderTreden];
			parameter<float32>      fractie         := LadderTreden/fractie[float32][LadderTreden/V/geluidsschermen];
			
			unit<uint32> UitGWV_wal := select_with_org_rel(SourceData/Diversen/Impl/GWV/selection/TYPE =='Wal')
			{
				attribute<rdc_meter> geometry (poly) := SourceData/Diversen/Impl/GWV/selection/geometry[org_rel];
				container Union := Templates/Zonneladder_Union_T(., geometry, Laddertrede_rel);
				attribute<meter2> Nrmeter2_max (union/unioned_domain) := area(Union/unioned_geometry, meter2);
				attribute<meter2> Nrmeter2 (union/unioned_domain) := Nrmeter2_max * fractie;
			}
			
			unit<uint32> UitGWV_scherm := select_with_org_rel(SourceData/Diversen/Impl/GWV/selection/TYPE <>'Wal')//Scherm;Combinatie
			{
				attribute<rdc_meter> geometry (poly) := SourceData/Diversen/Impl/GWV/selection/geometry[org_rel];
				container Union := Templates/Zonneladder_Union_T(., geometry, Laddertrede_rel);
				attribute<meter2> Nrmeter2_max (union/unioned_domain) := area(Union/unioned_geometry, meter2);
				attribute<meter2> Nrmeter2 (union/unioned_domain) := Nrmeter2_max * fractie;
			}
			
			unit<uint32> Combine_all_layers := union_unit(UitGWV_wal/union/unioned_domain, UitGWV_scherm/union/unioned_domain)
			{
				attribute<rdc_meter> geometry (poly) := union_data(.
					, UitGWV_wal/union/unioned_geometry 
					, UitGWV_scherm/union/unioned_geometry 
				);
				
				container Union := Templates/Zonneladder_Union_T(., geometry, Laddertrede_rel);
				
				attribute<meter2> Nrmeter2_max (union/unioned_domain) := area(Union/unioned_geometry, meter2);
				attribute<meter2> Nrmeter2 (union/unioned_domain) := Nrmeter2_max * fractie;
			}
			
			parameter<meter2> UitGWV_wal_opp     := sum(UitGWV_wal/Nrmeter2);
			parameter<meter2> UitGWV_scherm_opp  := sum(UitGWV_scherm/Nrmeter2);
			parameter<meter2> Totaal_opp         := UitGWV_wal_opp + UitGWV_scherm_opp;
			parameter<meter2> Totaal_unioned_opp := sum(Combine_all_layers/Nrmeter2);
		}
		
		parameter<meter2> RondVliegvelden_opp := sum(RondVliegvelden/Totaal_unioned_opp);
		parameter<meter2> Geluidsschermen_opp := sum(Geluidsschermen/Totaal_unioned_opp);
		parameter<meter2> Totaal_opp          := RondVliegvelden_opp + Geluidsschermen_opp;
		
		//nog geen aanroep van Totaal_unioned_opp, aanname geen overlap tussen wal en scherm
		parameter<GW> Potentieel_gegenereerd_vermogen_laag := (Totaal_opp / 10000[meter2 / ha]) * Vermogen_ha_laag / 1000[MW / GW];
		parameter<GW> Potentieel_gegenereerd_vermogen_hoog := (Totaal_opp / 10000[meter2 / ha]) * Vermogen_ha_hoog / 1000[MW / GW];
	}
	
	parameter<GW> Potentieel_gegenereerd_vermogen_laag := OnbenutBebouwd/Potentieel_gegenereerd_vermogen_laag + OpInfraWerken/Potentieel_gegenereerd_vermogen_laag;
	parameter<GW> Potentieel_gegenereerd_vermogen_hoog := OnbenutBebouwd/Potentieel_gegenereerd_vermogen_hoog + OpInfraWerken/Potentieel_gegenereerd_vermogen_hoog;
}