Template PerRegioUnit_T
{
	//
	parameter<string> RegioUnit_str;
	//
	
	unit<uint32> RegioUnit := =RegioUnit_str == 'Corop' || RegioUnit_str == 'Provincie' 
									? 'SourceData/RegioIndelingen/CBS/Last/'+RegioUnit_str
									: 'SourceData/RegioIndelingen/'+RegioUnit_str;
	
	container DataPrep
	{
		container ReadData_BAG := for_each_ne(SourceData/Vastgoed/BAG/BAG_jaren/name, 'ReadData_BAG_T('+string(SourceData/Vastgoed/BAG/BAG_jaren/jaar)+', RegioUnit)');
		container ReadData_BBG := for_each_ne(Classifications/Grondgebruik/ReeksJaren/naam, 'ReadData_BBG_T('+string(Classifications/Grondgebruik/ReeksJaren/jaar)+', RegioUnit)');
		container PreBAG := for_each_ne(jaren96_11/name,'PreBAG_PerJaar_T('+string(jaren96_11/value)+', RegioUnit)');
	}
	
	container Data
	{
		container perRegio_Objecten := 
			for_each_nedv(
				Jaren/name
				, Jaren/value < 2012f ? 'DataPrep/PreBAG/'+Jaren/name+'/preBAG_VBO_inCBS/totale_count_per_functie_perRegio/logies[float32]' : 'DataPrep/ReadData_BAG/'+Jaren/name+'/PerRegio/objecten[float32]'
				, RegioUnit
				, float32
			);
		
		container perRegio_BrutoOpp := 
			for_each_nedv(
				Classifications/Grondgebruik/ReeksJaren/naam
				, 'DataPrep/ReadData_BBG/'+Classifications/Grondgebruik/ReeksJaren/naam+'/BrutoOpp_perRegio / 1[ha]'
				, RegioUnit
				, float32
			);
	}
	
	container Claims
	{
		parameter<float32> ClaimGroeiFactorTovTrendObjecten := = 'VariantParameters/VariantK/ClaimGroeiFactorTovTrendObjecten[VariantParameters/VariantK/V/'+Variant_name+']';
		parameter<float32> ClaimGroeiFactorTovTrendHa := = 'VariantParameters/VariantK/ClaimGroeiFactorTovTrendHa[VariantParameters/VariantK/V/'+Variant_name+']';
		
		container PerRegio_Objecten := for_each_ne(/Classifications/Time/Zichtjaar/name, 'Project_Objecten_T('+quote(string(Classifications/Time/Zichtjaar/yearrange_rel))+')');
		container PerRegio_BrutoOpp := for_each_ne(/Classifications/Time/Zichtjaar/name, 'Project_BrutoOpp_T('+quote(string(Classifications/Time/Zichtjaar/yearrange_rel))+')');
		
		Template Project_Objecten_T
		{
			parameter<string> year;
			
			container β :=
				for_each_neidv(
					RegioUnit/name
					, 'max_elem(0f, OLS/Calc_OLS_Objecten_Regio/'+RegioUnit/name+'/β)'
					, 'IsDefined(this) && This >= 0f && this < 300f' //aanname is groei, dus groter dan 0. En om de bandbreedte iets te controleren tussen 0 en 250.
					, void
					, float32
				);
			
			container Objecten_obv_β_yBasis :=
				for_each_nedv(
					RegioUnit/name
					, 'DataPrep/ReadData_BAG/'+BAG_RecentYear+'/PerRegio/objecten['+string(id(RegioUnit))+'[RegioUnit]] + (β/'+RegioUnit/name+' * ('+year+'f-'+string(BAG_RecentYear_value)+'[float32])) * ClaimGroeiFactorTovTrendObjecten'
					, void
					, float32
				);
			
			attribute<float32> objects (RegioUnit) := ='union_data(RegioUnit, '+AsItemList('Objecten_obv_β_yBasis/'+RegioUnit/name)+')';
		}
		
		Template Project_BrutoOpp_T
		{
			parameter<string> year;
			
			container β :=
				for_each_neidv(
					RegioUnit/name
					, 'max_elem(0f, OLS/Calc_OLS_BrutoOpp_Regio/'+RegioUnit/name+'/β)'
					, 'IsDefined(this) && This >= 0f && this < 50f' //Als de BBG ReeksJaren onvolledig zijn, kan deze Null worden. En om de bandbreedte iets te controleren tussen 0 en 50.
					, void
					, float32
				);
				
			container obv_β_y15 :=
				for_each_nedv(
					RegioUnit/name
					, 'DataPrep/ReadData_BBG/Y'+BBG_Year+'/BrutoOpp_perRegio['+string(id(RegioUnit))+'[RegioUnit]] + (β/'+RegioUnit/name+' * ('+year+'f-'+BBG_Year+'f)) * ClaimGroeiFactorTovTrendHa'
					, void
					, float32
				);
			
			attribute<float32> BrutoOpp (RegioUnit) := ='union_data(RegioUnit, '+AsItemList('obv_β_y15/'+RegioUnit/name)+')';
		}
		
		container OLS
		{
			unit<uint8> k_set := range(uint8, 0b, 2b)
			{
				attribute<string> name : [ 'const', 'opp'];
			}
			
			container Calc_OLS_Objecten_Regio := for_each_ne(RegioUnit/name, 'OLS_Regio_T('+string(id(RegioUnit))+', Data/perRegio_Objecten, Jaren)');
			container Calc_OLS_BrutoOpp_Regio := for_each_ne(RegioUnit/name, 'OLS_Regio_T('+string(id(RegioUnit))+', Data/perRegio_BrutoOpp, Classifications/Grondgebruik/ReeksJaren)');
			
			container Betas_regio
			{
				container Objecten := for_each_nedv(RegioUnit/name, 'OLS/Calc_OLS_Objecten_Regio/'+RegioUnit/name+'/β', void, float32);
				container BrutoOpp := for_each_nedv(RegioUnit/name, 'OLS/Calc_OLS_BrutoOpp_Regio/'+RegioUnit/name+'/β', void, float32);
			}
			
			Template OLS_Regio_T
			{
				parameter<uint32> regio_id;
				
				container y_src;
				
				unit<uint8> Periods;
				
				attribute<float32> x (Periods) := Periods/value[float32];
				attribute<float32> y (Periods) := ='union_data(Periods, '+AsItemList('y_src/'+Periods/name+'['+string(regio_id)+'[RegioUnit]]')+')';
				
				parameter<float32> σ_xy := cov(x, y);
				parameter<float32> σ_x  := var(x);
				parameter<float32> σ_y  := var(y);
				
				parameter<float32> β := σ_xy / σ_x;
				parameter<float32> α := ȳ - β * x_bar; 
				
				attribute<float32> ŷ (Periods) := α + β*x; //predicted value of y (dependent var in regression)
				
				parameter<float32> x_bar := mean(x); //sample mean
				parameter<float32> ȳ     := mean(y); //sample mean
				
				parameter<float32> SSR := sum((y - ŷ)^2f); // Sum of Squared Residuals
				parameter<float32> SSE := sum((ŷ - ȳ)^2f); // Sum of Squared Explained
				parameter<float32> SST := sum((y - ȳ)^2f); // Sum of Squares Total
				parameter<float32> R2  := 1f - (SSR / SST);
			}
		}
	}
	
	container Zichtjaren := for_each_ne(/Classifications/Time/Zichtjaar/name, 'ZichtjaarT('+quote(/Classifications/Time/Zichtjaar/name)+','+quote(RegioUnit_str)+')');
}