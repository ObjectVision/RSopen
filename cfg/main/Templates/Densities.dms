container Densities
{
	#include<DichtheidZichtjaar_T.dms>
	#include<MaxWoningDichtheid_T.dms>

	Template Werken_T
	{
		//
		unit<uint8> Jobs6;
		parameter<Jobs6> id;
		container Basisjaar;
		unit<ipoint> domain;
		//
		
		parameter<string> domain_str := domain/name;
		parameter<string> domain_size := string(domain/gridsize);
		parameter<string> name := Jobs6/name[id];
		
		parameter<bool> KanLokaalHogereDichtheidKrijgen := Jobs6/KanLokaalHogereDichtheidKrijgen[id];
		
		parameter<float32> DichtheidFActorOV              := CaseClassifications/VariantK/DichtheidFActorOV_NietWonen[0b];
		parameter<float32> DichtheidFActorWater           := CaseClassifications/VariantK/DichtheidFActorWater_NietWonen[0b];
		parameter<float32> DichtheidFActorBevKern100kPlus := = 'CaseClassifications/VariantK/DichtheidFActorBevKern100kPlus_NietWonen'+/Scenario_name+'[0b]';
		parameter<float32> DichtheidFActorBevKern20kPlus  := = 'CaseClassifications/VariantK/DichtheidFActorBevKern20kPlus_NietWonen'+/Scenario_name+'[0b]';
		parameter<float32> DichtheidFActorBevKern20kMin   := = 'CaseClassifications/VariantK/DichtheidFActorBevKern20kMin_NietWonen'+/Scenario_name+'[0b]';
		
		unit<uint32> RegioUnit1 := SourceData/RegioIndelingen/CBS/Last/Gemeente
		{
			attribute<.> per_domain (domain) := = 'per_'+domain_str;
		}
		
		unit<uint32> RegioUnit2 := SourceData/RegioIndelingen/NVM
		{
			attribute<.> per_domain (domain) := = 'per_'+domain_str;
		}
		
		unit<uint32> RegioUnit3 := SourceData/RegioIndelingen/CBS/Last/Provincie
		{
			attribute<.> per_domain (domain) := = 'per_'+domain_str;
		}
		
		unit<uint8> Tellersubset := = 'Jobs6/CBSKlassen/'+Grondgebruik/CBSKlasse/Aggr/name[Jobs6/CBSKlasse_Aggr_rel[id]]+'/subset';
		
		parameter<string> DichtheidFActorStr := 'mul(
				add(
					float32(BaseData/Omgeving/OV_Reistijd/TotRailHalte/Smoothed)          * (DichtheidFActorOV - 1f),
					float32(BaseData/StartState/Grondgebruik/NabijGrootWaterInBBG/Smoothed) * (DichtheidFActorWater - 1f),
					Max_Elem(
						float32(BaseData/Omgeving/RondBevolkingskern/Is100kPlus) * (DichtheidFActorBevKern100kPlus - 1f),
						float32(BaseData/Omgeving/RondBevolkingskern/Is20kPlus)  * (DichtheidFActorBevKern20kPlus - 1f),
						float32(BaseData/Omgeving/RondBevolkingskern/Is20kMin)   * (DichtheidFActorBevKern20kMin - 1f)
					)
					// (DichtheidFActorGeneriek - 1f),
				),
				float32(KanLokaalHogereDichtheidKrijgen)
		) + 1f';
		
		attribute<float32> DichtheidFActor (domain) := = '('+DichtheidFActorStr+')[domain/AllocDomain_rel]';

		attribute<m2PandFootprint> TellerBasisjaar0 (domain) := = 'add('+AsItemList('Basisjaar/PerYear_AdminDomain/y'+string(ModelParameters/LISA_StartYear)+'/pand_met_vbo/Footprint_perJobs6_'+domain_str+'/'+Tellersubset/name)+')';
		attribute<m2PandFootprint> TellerBasisjaar  (domain) := TellerBasisjaar0 / float32(NoemerBasisjaar > 0[ha]);
		
		attribute<ha> NoemerBasisjaar (domain) := ='(Grondgebruik/CBSKlasse/Aggr_rel[BaseData/StartState/Grondgebruik/per_'+domain_str+'/Basisjaar] == Jobs6/CBSKlasse_Aggr_rel[id])[float32] * domain/NrHaPerCell';

		attribute<m2PandFootprint_ha> PerRegioUnit1 (domain) := (sum(TellerBasisjaar, RegioUnit1/per_domain) / sum(NoemerBasisjaar, RegioUnit1/per_domain))[RegioUnit1/per_domain];
		attribute<m2PandFootprint_ha> PerRegioUnit2 (domain) := (sum(TellerBasisjaar, RegioUnit2/per_domain) / sum(NoemerBasisjaar, RegioUnit2/per_domain))[RegioUnit2/per_domain];
		attribute<m2PandFootprint_ha> PerRegioUnit3 (domain) := (sum(TellerBasisjaar, RegioUnit3/per_domain) / sum(NoemerBasisjaar, RegioUnit3/per_domain))[RegioUnit3/per_domain];
		attribute<m2PandFootprint_ha> ResultOud     (domain) := max_elem(PerRegioUnit1, PerRegioUnit2, PerRegioUnit3) * DichtheidFActor;
		
		//
		attribute<m2PandFootprint_ha> per_domain  (domain) := TellerBasisjaar / NoemerBasisjaar;
		attribute<m2PandFootprint_ha> Buurt       (domain) := = 'mean(per_domain, RegioIndelingen/CBS/Last/Buurt/per_'+domain_str+')[RegioIndelingen/CBS/Last/Buurt/per_'+domain_str+']';
		attribute<m2PandFootprint_ha> Wijk        (domain) := = 'mean(per_domain, RegioIndelingen/CBS/Last/Wijk/per_'+domain_str+')[RegioIndelingen/CBS/Last/Wijk/per_'+domain_str+']';
		attribute<m2PandFootprint_ha> Gemeente    (domain) := = 'mean(per_domain, RegioIndelingen/CBS/Last/Gemeente/per_'+domain_str+')[RegioIndelingen/CBS/Last/Gemeente/per_'+domain_str+']';
		attribute<m2PandFootprint_ha> NVM         (domain) := = 'mean(per_domain, RegioIndelingen/NVM/per_'+domain_str+')[RegioIndelingen/NVM/per_'+domain_str+']';
		attribute<m2PandFootprint_ha> COROP       (domain) := = 'mean(per_domain, RegioIndelingen/CBS/Last/COROP/per_'+domain_str+')[RegioIndelingen/CBS/Last/COROP/per_'+domain_str+']';
		attribute<m2PandFootprint_ha> Provincie   (domain) := = 'mean(per_domain, RegioIndelingen/CBS/Last/Provincie/per_'+domain_str+')[RegioIndelingen/CBS/Last/Provincie/per_'+domain_str+']';
		
		attribute<m2PandFootprint_ha> Max                  (domain) := max_elem(per_domain, Buurt, Wijk, Gemeente, NVM, COROP, Provincie);
		attribute<m2PandFootprint_ha> MaalFActor           (domain) := Max * DichtheidFActor;
		attribute<m2PandFootprint_ha> ResultMaalFActor     (domain) := value(potential(MaalFActor, Geography/Distmatrices_100m/pot2000m/rev_dist_scaled / sum(Geography/Distmatrices_100m/pot2000m/rev_dist_scaled)), m2PandFootprint_ha);
		attribute<m2PandFootprint_ha> ResultNietMaalFActor (domain) := value(potential(Max, Geography/Distmatrices_100m/pot2000m/rev_dist_scaled / sum(Geography/Distmatrices_100m/pot2000m/rev_dist_scaled)), m2PandFootprint_ha);
		attribute<m2PandFootprint_ha> Result               (domain) := ResultMaalFActor;
	}	
	
	Template SectorxSubsector_T
	{
		parameter<Sector/xSubsector> id;
		unit<ipoint> domain;
		//
		
		parameter<string> name           := Sector/xSubsector/name[id];
		parameter<string> Subsector_name := Sector/xSubsector/Subsector_name[id];
		parameter<string> Sector_name    := Sector/xSubsector/Sector_name[id];
		parameter<string> ValUnit_ref    := Sector/xSubsector/ValUnitDens_ref[id];
		
		unit<float32> ValUnit := = ValUnit_ref;
		
		attribute<ValUnit> Zichtjaar (domain) :=
			= lowercase(Sector_name) == lowercase('Verblijfsrecreatie')
				? 'MakeDefined(VariantData/Claims/'+Zichtjaar_name+'/AllocRegios/'+VariantParameters/Recreatie_AllocRegio_name+'/Verblijfsrecreatie/Object_perHa[RegioIndelingen/CBS/Last/'+VariantParameters/Recreatie_AllocRegio_name+'/Per_AllocDomain],0f)'
				: lowercase(Sector_name) == lowercase('Wonen') || lowercase(Sector_name) == lowercase('Wind' )
					? 'const((0/0)[ValUnit], domain)'
					: lowercase(Sector_name) == lowercase('Landbouw')
						? 'const(domain/NrHaPerCell / 1[Ha], domain)'
						: 'Src/'+Sector_name+'/Subsectoren/'+Subsector_name;
	}
}