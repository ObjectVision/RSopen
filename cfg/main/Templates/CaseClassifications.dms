template CaseClassificationsT : using = "classifications/modellering"
{
	//
	parameter<string> scenario_name;
	parameter<string> variant_name;
	//
	
	// BEGIN casus specific, overrule in vergelijk.dms; don't use in prepare.dms
	#include<Actor.dms>
	
	unit<uint32> AllCases := combine(AllScenarios, VariantParameters/VariantK)
	{
		attribute<string> Scenario_name := AllScenarios/name[first_rel];
		attribute<string> Variant_name := VariantParameters/VariantK/name[second_rel];
		attribute<string> name := Scenario_name+'/'+Variant_name;
		attribute<string> label := Scenario_name+'_'+Variant_name, DialogType = "LabelText";
	}
	
	unit<uint32> ZichtjaarxTXLClaims := combine(Time/Zichtjaar, TigrisXL/Claims)
	{
		attribute<string> Zichtjaar_name := Time/Zichtjaar/name[first_rel];
		attribute<string> TXLClaims_name := TigrisXL/Claims/name[second_rel];
		attribute<string> TXLClaims_ref  := TigrisXL/Claims/TigrisXL_Table_ref[second_rel];
		attribute<string> Label          := Zichtjaar_name+'_'+TXLClaims_name, DialogType = "LabelText";
		attribute<string> name           := Zichtjaar_name+'/'+TXLClaims_name;
	}
	
	unit<uint32> ZichtjaarxTXLClaimsxCase := combine(ZichtjaarxTXLClaims, AllCases)
	{
		attribute<string> Zichtjaar_name   := ZichtjaarxTXLClaims/Zichtjaar_name[first_rel];
		attribute<string> TXLClaims_name   := ZichtjaarxTXLClaims/TXLClaims_name[first_rel];
		attribute<string> Attr_ref         := TigrisXL/Claims/Attr_ref[ZichtjaarxTXLClaims/second_rel[first_rel]];
		attribute<string> Sector_name      := TXLClaims_name == 'banen' ? 'Werken' : 'Wonen';
		attribute<string> TargetValUnitRef := TigrisXL/Claims/TargetValUnitRef[ZichtjaarxTXLClaims/second_rel[first_rel]];
		attribute<string> TXLClaims_ref    := ZichtjaarxTXLClaims/TXLClaims_ref[first_rel];
		attribute<string> Scenario_name    := AllCases/Scenario_name[second_rel];
		attribute<string> Variant_name     := AllCases/Variant_name[second_rel];
		attribute<string> name             := Zichtjaar_name+'/'+TXLClaims_name+'/'+Scenario_name+'/'+Variant_name;
		attribute<string> label            := Zichtjaar_name+'_'+TXLClaims_name+'_'+Scenario_name+'_'+Variant_name, DialogType = "LabelText";
	}
	
	unit<uint32> StandVar_rels := range(uint32, 0, 2)
	{
		attribute<string> name       : ['Subsector_rel','OP_rel'];
		attribute<string> path       : ['Subsector_rel','OP_rel'];
		attribute<string> unit_name  : ['Subsector','OP'];
		attribute<string> value_type : ['uint32','uint8'];
	}
	unit<uint32> StandVar_Prep  := Classifications/Modellering/StandVar_Prep;
	unit<uint32> DeltaVar_Prep  := /Classifications/Modellering/DeltaVar_Prep;
	
	unit<uint32> StandVar := union_unit(StandVar_rels, StandVar_Prep)
	{
		attribute<string> name       := union_data(., StandVar_rels/name, StandVar_Prep/name);
		attribute<string> path       := union_data(., StandVar_rels/path, StandVar_Prep/path);
		attribute<string> sector_name:= union_data(., const('',StandVar_rels), StandVar_Prep/sector_name);
		attribute<string> unit_name  := union_data(., StandVar_rels/unit_name, StandVar_Prep/unit_name);
		attribute<string> value_type := union_data(., StandVar_rels/value_type, StandVar_Prep/value_type);
		
		attribute<bool> is_quantity := (unit_name != 'Subsector' || unit_name != 'Yr');
		
											// rel  ,rel  ,won ,won ,won ,won ,werk ,werk ,werk ,werk ,werk ,werk ,verb ,wind ,wind ,zon  ,foot ,foot ,foot ,foot ,foot ,foot 
		attribute<bool> HasClaims           : [FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,FALSE,TRUE ,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE];
		attribute<bool> HasAlloc            : [FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,FALSE,TRUE ,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE];
		attribute<bool> IsVastgoed          : [FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE ,TRUE ,FALSE,FALSE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ];
		attribute<bool> UseForLeegstandCorr : [FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE];
		
									           // rel  ,rel  ,won ,won ,won ,won ,werk ,werk ,werk ,werk ,werk ,werk ,verb ,wind ,wind ,zon  ,foot ,foot ,foot ,foot ,foot ,foot ,landb,landb,landb,landb,landb,landb,landb,landb,landb
		// attribute<bool> HasClaims           : [FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,FALSE,TRUE ,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ];
		// attribute<bool> HasAlloc            : [FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,FALSE,TRUE ,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ];
		// attribute<bool> IsVastgoed          : [FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE ,TRUE ,FALSE,FALSE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE];
		// attribute<bool> UseForLeegstandCorr : [FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE];
		
		//							           rel  ,rel  ,won ,won ,won ,won ,werk ,werk ,werk ,werk ,werk ,werk ,verb ,foot ,foot ,foot ,foot ,foot ,foot ,landb,landb,landb,landb,landb,landb,landb,landb,landb
		attribute<bool> HasClaims           : [FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ];
		attribute<bool> HasAlloc            : [FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ];
		attribute<bool> IsVastgoed          : [FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE];
		attribute<bool> UseForLeegstandCorr : [FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,TRUE ,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE];
		
		
		unit<uint8>  OP        := CaseClassifications/Vastgoed/OP;
		unit<uint32> Subsector := Classifications/Actor/Sector/XSubSector;
		unit<uint8>  Sector    := Classifications/Actor/Sector;
		
		unit<float32> Woning    := units/Woning;
		unit<float32> Job       := units/Job;
		unit<float32> m2        := units/meter2;
		
		unit<uint32> Claims_sub := select_with_attr_by_cond(., HasClaims)
		{
			// attribute<string> name        := ../name[org_rel];
			// attribute<string> path        := ../path[org_rel];
			// attribute<string> unit_name   := ../unit_name[org_rel];
			attribute<bool>   IsLandbouw := sector_name == 'Landbouw';
			
			attribute<string> subsector_name : [
				'Eengezins_VrijeSector'
			,	'Eengezins_SocialeHuur'
			,	'Meergezins_VrijeSector'
			,	'Meergezins_SocialeHuur'
			
			,	'Nijverheid'
			,	'Logistiek'
			,	'Detailhandel' 
			,	'Ov_consumentendiensten'
			,	'Zak_dienstverlening' 
			,	'Overheid_kw_diensten'
			
			,	'Verblijfsrecreatie'
			
			// ,	'Wind'
			// ,	'Zon'
			
			,	'rietteelt'
			,	'akkerbouw'
			,	'cranberry'
			,	'boomgaard'
			,	'moerasbomen'
			,	'rijst'
			,	'yacon'
			,	'gg_vee_extensief'
			,	'gg_vee'
			,	'gg_vee_intensief'
			];
		}
		
		unit<uint32> Alloc_sub := select_with_attr_by_cond(.,HasAlloc)
		{
			// attribute<string> name      := ../name[org_rel];
			// attribute<string> path      := ../path[org_rel];
			// attribute<string> unit_name := ../unit_name[org_rel];
		}
		
		unit<uint32> LeegstandCorr_sub := select_with_attr_by_cond(.,UseForLeegstandCorr)
		{
			// attribute<string> name        := ../name[org_rel];
			// attribute<string> path        := ../path[org_rel];
			// attribute<string> sector_name := ../sector_name[org_rel];
			// attribute<string> unit_name   := ../unit_name[org_rel];
		}
		
		unit<uint32> NietLeegstandCorr_sub := select_with_attr_by_cond(.,!UseForLeegstandCorr)
		{
			// attribute<string> name        := ../name[org_rel];
			// attribute<string> path        := ../path[org_rel];
			// attribute<string> sector_name := ../sector_name[org_rel];
			// attribute<string> unit_name   := ../unit_name[org_rel];
		}
		
		unit<uint32> Vastgoed_sub := select_with_attr_by_cond(.,IsVastgoed)
		{
			// attribute<string> name      := ../name[org_rel];
			// attribute<string> path      := ../path[org_rel];
			// attribute<string> unit_name := ../unit_name[org_rel];
		}
	}
	
	unit<uint32> StandVarUint := select_with_attr_by_cond(.,StandVar/value_type='uint8' || StandVar/value_type='uint32')
	{
		// attribute<string> name      :=StandVar/name[org_rel];
		// attribute<string> path      :=StandVar/path[org_rel];
		// attribute<string> unit_name :=StandVar/unit_name[org_rel];
		
		unit<uint8>  OP        := CaseClassifications/Vastgoed/OP;
		unit<uint8>  Subsector := Classifications/Actor/Sector/XSubsector_uint8;
	}
	
	unit<uint32> StandVarFloat32 := select_with_attr_by_cond(.,StandVar/value_type='float32')
	{
		// attribute<string> name      :=StandVar/name[org_rel];
		// attribute<string> path      :=StandVar/path[org_rel];
		// attribute<string> unit_name :=StandVar/unit_name[org_rel];
		
		unit<float32> Woning    := units/Woning;
		unit<float32> Job       := units/Job;
		unit<float32> m2        := units/meter2;
	}
	
	container Vastgoed
	{
		unit<uint8> OP := = 'VariantParameters/Ontwikkelpakketten/'+VariantParameters/VariantK/OntwikkelPakketVariant[variant_rel];
	}
	
	unit<uint8> Scenario := select(AllScenarios/name == Scenario_name)
	{
		attribute<string> name      := collect_by_cond(., AllScenarios/name);
		attribute<string> TableRef  := collect_by_cond(., AllScenarios/TableRef);
		attribute<bool> IsVoorExport:= collect_by_cond(., AllScenarios/IsVoorExport);
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		
		unit<uint8> Export := select_with_org_rel(IsVoorExport)
		{
			attribute<string> name := Scenario/name[org_rel];
		}
		
		unit<uint32> xVariantXSectorXSubsector := combine(., Actor/VariantXSectorXSubsector)
		{
			attribute<string> Scenario_name := Scenario/name[first_rel];
			attribute<string> VariantXSectorXSubsector_name := Actor/VariantXSectorXSubsector/name[second_rel];
			attribute<string> name := Scenario_name+'/'+VariantXSectorXSubsector_name;
			attribute<string> label := replace(name, '/', '_');
			attribute<string> Sector_name := Actor/VariantXSectorXSubsector/Sector_name[second_rel];
			attribute<string> SubSector_name := Actor/VariantXSectorXSubsector/SubSector_name[second_rel];
			attribute<string> Combi_name := Actor/VariantXSectorXSubsector/Combi_name[second_rel];
			attribute<string> Combi_label := replace(Combi_name, '/', '_');
			attribute<string> SrcRefGeschiktheid := Actor/VariantXSectorXSubsector/SrcRefGeschiktheid[second_rel];
		}
	}
	
	unit<uint32> AllocatieK := Scenario/xVariantXSectorXSubsector;
	
	unit<uint8> VariantK := select_with_attr_by_cond(VariantParameters/VariantK, UpperCase(VariantParameters/VariantK/name) == UpperCase(Variant_name));
	
	unit<uint32> ScenarioXAllocRegios := combine(Scenario, AllocRegiosK)
	{
		attribute<string> Scenario_name := Scenario/name[first_rel];
		attribute<string> AllocRegios_name := AllocRegiosK/name[second_rel];
		attribute<string> AllocRegioRef := AllocRegiosK/Ref[second_rel];
		attribute<string> label := Scenario_name+'_'+AllocRegiosK/label[second_rel];
		attribute<string> name := Scenario_name+'/'+AllocRegios_name;
		
		unit<uint32> xVariantXSectorXSubsector := combine(., Actor/VariantXSectorXSubsector)
		{
			attribute<string> ScenarioXAllocRegios_name := ../name[first_rel];
			attribute<string> ScenarioXAllocRegios_label := ../label[first_rel];
			attribute<string> VariantXSectorXSubsector_name := Actor/VariantXSectorXSubsector/name[second_rel];
			attribute<string> name := ScenarioXAllocRegios_name+'/'+VariantXSectorXSubsector_name;
			attribute<string> Scenario_name := ../Scenario_name[first_rel];
			attribute<string> AllocRegios_name := ../AllocRegios_name[first_rel];
			attribute<string> AllocRegioRef := ../AllocRegioRef[first_rel];
			attribute<string> Combi_name := Actor/VariantXSectorXSubsector/Combi_name[second_rel];
			attribute<string> Sector_name := Actor/VariantXSectorXSubsector/Sector_name[second_rel];
		}
	}
	
	container WindTurbineType
	{
		parameter<string>                              name              := = 'VariantParameters/VariantK/TurbineType[VariantParameters/VariantK/V/'+Variant_name+']';
		parameter<ModelParameters/Wind/MaxWerpAfstand> id                := = 'ModelParameters/Wind/MaxWerpAfstand/V/'+name;
		parameter<meter>                               Ashoogte          := ModelParameters/Wind/MaxWerpAfstand/Ashoogte[id];
		parameter<meter>                               RotorDiameter     := Ashoogte; //TO DO: RotorDiameter en Ashoogte zijn ongeveer gelijk, maar niet per se. Als de MaxWerpAfstandNom maar resultaat geeft, naar de lookup in de MaxWerpAfstand tabel.
		parameter<MW>                                  MW_per_turbine    := (ModelParameters/Wind/MaxWerpAfstand/Vermogen[id])[MW];
		parameter<meter>                               MaxWerpAfstandNom := ModelParameters/Wind/MaxWerpAfstand/MaxWerpAfstandNom[id];
	}
}