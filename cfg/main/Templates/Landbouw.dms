container Landbouw : using = "Classifications/Landbouw;Classifications/Actor"
{
	Template Suitability_T
	{
		parameter<YearRange> StartYear;
		parameter<YearRange> EndYear;
		parameter<Classifications/Landbouw/DrainageK> Scenario;
		// 

		parameter<Jaar>      PeriodDuration := (EndYear - StartYear)[jaar];
		
		parameter<int16>     StYrPhoenix     := StartYear - StartYear[int16];
		parameter<string>    StYrPhoenixStr  := StYrPhoenix == 0[int16] ? 'J000_' : 'J0'+string(StYrPhoenix)+'_';
		parameter<int16>     EndYrPhoenix    := EndYear - StartYear[int16];
		parameter<string>    EndYrPhoenixStr := EndYrPhoenix == 0[int16] ? 'J000_' : 'J0'+string(EndYrPhoenix)+'_';
		
		attribute<LandbouwK>           gg_LandbouwK  (rdc_100m) := BaseData/StartState/Grondgebruik/per_AllocDomain/gg_Landbouw;
		attribute<HELPbodems>          BodemType     (rdc_100m) := SourceData/Landbouw/HELPbodemsNL;
		// attribute<LandbouwBodemKlasse> LandbouwBodem (rdc_100m) := SourceData/Bodem/LandbouwBodem;
		
		unit<uint8>           ModelType        := LandbouwK;

		container factoren 
		{
			parameter<Bool>    TotalFeedExo := true;
			parameter<EUR_ton> MilkPrice    := 345[EUR_ton];

			container Transitiekosten // herkomst in kolommen, bestemming in rijen
			{                         // TO DO: de 0-waarden in de niet-diagionalen specificeren (waar gelijk parameters aanroepen).
				unit<uint8> Kost_ModelType := ModelType
				{                                          //  gg_vee_extensief,    gg_vee,     gg_vee_intensief, natuur_gras
					attribute <EUR_ha> gg_vee_extensief: [                   0,        750,                  750,        5399];
					attribute <EUR_ha> gg_vee:           [                2697,          0,                  750,        8095];
					attribute <EUR_ha> gg_vee_intensief: [                5534,       2837,                    0,       10932];
					attribute <EUR_ha> natuur_gras:      [                 750,        750,                  750,           0];
				}

				container PerModelType := 
					for_each_nedv(
						Kost_ModelType/name
						, 'Kost_ModelType/'+ Kost_ModelType/name
						, ModelType
						, EUR_ha
					);
			}
			
			container fysiek
			{
				container YieldReduction : Descr = "yield reduction"
				{
					unit<uint8> PeilK: NrOfRows = 2
					{
						attribute<string> name  : ['GHG','GLG'];
						attribute<string> label : ['Gemiddeld Hoogste Grondwaterstand','Gemiddeld Laagste Grondwaterstand'], DialogType = "LabelText";
					}

					container Average :=
						for_each_nedv(
							 ModelType/name
							,'add(
								  StartYr/YieldReduction/'+ModelType/name+'
								, EndYr/YieldReduction/'+ModelType/name+'
								) / 2[float32]'
							, rdc_100m
							, float32
						);

					container StartYr: = Year_T(StYrPhoenixStr);
					container EndYr:   = Year_T(EndYrPhoenixStr);
					
					Template Year_T
					{
						//
						parameter<string> Year;
						//
					
						container Peil := 
							for_each_ne(
								PeilK/name
								, 'Peil_T('+string(id(PeilK))+'[PeilK])'
							);
							
						container YieldReduction := 
							for_each_ndva(
								ModelType/YRsub/name
								, rdc_100m
								, float32
								, '%RVF_DataDir%/Geschiktheid_opbrengstderving_BAU/'+ModelType/YRsub/YR_filename+'/dmgtot-Wh-2036-2065.tif'
							)
						{
							
						
						}

						container YieldReduction_ForRotations
						{
							container Gras_zonder_herinzaai := YieldReduction_T(GewasSoortYR/V/Gras_zonder_herinzaai);
							container Gras_met_herinzaai    := YieldReduction_T(GewasSoortYR/V/Gras_met_herinzaai);
							container Snijmais              := YieldReduction_T(GewasSoortYR/V/Snijmais);
						}
					
						Template Peil_T
						{
							parameter<PeilK> id;
							
							
							parameter<string> PeilName                    := PeilK/name[id];  
							attribute<uint32> ResultDDOption   (rdc_100m) := ='SourceData/Landbouw/HELP/'+PeilName+'_merged_'+Classifications/Landbouw/DrainageK/Drainage_nameDDOption[Scenario]+'/'+Year;
							attribute<uint32> ResultNoDDOption (rdc_100m) := ='SourceData/Landbouw/HELP/'+PeilName+'_merged_'+Classifications/Landbouw/DrainageK/Drainage_nameNoDDOption[Scenario]+'/'+Year;
							attribute<bool>   DDPossible       (rdc_100m) := SourceData/Landbouw/DD30_uit_droogleggingzomer_00;
							attribute<uint32> Result           (rdc_100m) := DDPossible ? ResultDDOption: ResultNoDDOption;
						}
							
						Template YieldReduction_T
						{
							parameter<GewasSoortYR> id;
							
							
							attribute<string> code (rdc_100m) :=
								GewasSoortYR/code[id] + '_' +
								Classifications/Landbouw/HELPbodems/code[BodemType] + '_'+
								Classifications/Landbouw/GLGHelpKlasse/code[Peil/GLG/Result] + '-' +
								Classifications/Landbouw/GHGHelpKlasse/code[Peil/GHG/Result];

							attribute<Float32> result (rdc_100m) :=
									rjoin(
										  code
										, /Classifications/Landbouw/OpbrengstDerving/code
										, /Classifications/Landbouw/OpbrengstDerving/TS
									);
						}
					}
				}
			}
		}

		container ModelTypes
		{
	//                                                 Modeltype,             FCE,          MaxYieldGrass,           %FeedDryMatter, MilkPricePremium (cent/liter)
			container gg_vee_extensief  := Dairy_T('gg_vee_extensief', 1.00[ratio],  6.419[ton_ha_jaarlijks], 0.73[ratio],    30.0[EUR_ton]); // 2 a 4 : uitkomen op 0 net toeg waarde 
			container gg_vee            := Dairy_T('gg_vee'          , 1.10[ratio],  9.816[ton_ha_jaarlijks], 0.70[ratio],    00.0[EUR_ton]);
			container gg_vee_intensief  := Dairy_T('gg_vee_intensief', 1.20[ratio], 11.164[ton_ha_jaarlijks], 0.68[ratio],    00.0[EUR_ton]);
			#include<natuur_gras.dms>
		}
	}

	Template Dairy_T
	: using = "Classifications/Landbouw"
	{
		parameter<string>           name;
		parameter<ratio>            FCE;
		parameter<ton_ha_jaarlijks> MaxYieldGrass;
		parameter<ratio>            FeedDryMatter;
		parameter<EUR_ton>          MilkPricePremium;
		//
		
		parameter<ton_ha_jaarlijks> DDGrassYieldSrc:= Classifications/Landbouw/DrainageK/DDGrassYield[Scenario];
		attribute<float32> DDPossible (rdc_100m):= float32(SourceData/Landbouw/DD30_uit_droogleggingzomer_00); 
		attribute<ton_ha_jaarlijks> DDGrassYield (rdc_100m): = value(DDGrassYieldSrc * DDPossible, ton_ha_jaarlijks);
		
		attribute<Eur_Ha_jaarlijks> Conversion_costs_ha_year (rdc_100m): =
			StartYear[YearRange] == EndYear[YearRange] ?
			const(0[Eur_Ha_jaarlijks], rdc_100m, Eur_Ha_jaarlijks):
			-value(economic_performance/conversion_costs[Eur_Ha] / value(float32(PeriodDuration), jaar), Eur_Ha_jaarlijks);

		attribute<Eur_Ha_jaarlijks> NetRevConCosts_ha_year   (rdc_100m): = add(Conversion_costs_ha_year, economic_performance/net_revenues_ha);
		attribute<Eur_Ha_jaarlijks> Totaal_ha_year           (rdc_100m): = add(Conversion_costs_ha_year, economic_performance/net_revenues_ha);
		attribute<Eur_M2>           totaal_NonAugmented      (rdc_100m):= economic_performance/net_revenues * kapitalisatie/factor - economic_performance/conversion_costs;
		attribute<Eur_M2>           totaal                   (rdc_100m): = totaal_NonAugmented;
		attribute<Bool>             DairySuitabilityDefined  (rdc_100m):= IsDefined(totaal), Descr = "// geeft aan welke cellen defined suitabilities hebben. Vormt mede de begrenzing van de studyarea en, dus, wat endogeen wordt in basemap landuse (ggmodel). Needs check bas: welke bron maakt precies dat er uindefined vals in de suit maps zitten? Is deze bron voor alle dairy gesch kaarten hetzelfde? ";
		
		container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ name +')';

		container Gras_zonder_herinzaai
		{
			parameter<GewasSoortYR> Gewas: expr = "GewasSoortYR/V/Gras_zonder_herinzaai";

			attribute<ratio> rotation(rdc_100m):
				Expr = "switch("
					   "case(SourceData/Landbouw/Bodem_HELP >= value (1, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value (5, BodemKlasse14k),"
							"value ( 1.0, ratio))," //0.801
					   "case(SourceData/Landbouw/Bodem_HELP >= value (6, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value (14, BodemKlasse14k),"
							"value ( 1.0, ratio))," //0.630
					   "value ( 0.0, ratio)) ";

			attribute<Eur_Ha_jaarlijks> production_costs(rdc_100m): Expr = "value (774.0, Eur_Ha_jaarlijks) * rotation";   // updaten of speciferen per intensiteitsklasse? // wat zijn dit precies (paper vasco)?
			attribute<float32> yr (rdc_100m): expr = "='factoren/fysiek/YR/Average/'+GewasSoortYR/name[gewas]";
			attribute<ton_ha_jaarlijks> DM_yield (rdc_100m): Expr = "value (MaxYieldGrass + DDGrassYield, ton_ha_jaarlijks) * (1.0[float32] - yr) * rotation";
			parameter<EUR_ton> feeding_costs: Expr = " value (16.0, EUR_ton)"; // updaten of speciferen per intensiteitsklasse?    // wat zijn dit precies (paper vasco)?
		}	

		container Gras_met_herinzaai
		{
			parameter<GewasSoortYR> Gewas: expr = "GewasSoortYR/V/Gras_met_herinzaai";
			attribute<ratio> rotation(rdc_100m):
				Expr = "switch("
					   "case(SourceData/Landbouw/Bodem_HELP >= value (1, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value (5, BodemKlasse14k),"
							"value ( 0.0, ratio))," // 0.089
					   "case(SourceData/Landbouw/Bodem_HELP >= value (6, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value (14, BodemKlasse14k),"
							"value ( 0.0, ratio))," //0.07
					   "value ( 0.0, ratio)) ";

			attribute<Eur_Ha_jaarlijks> production_costs(rdc_100m):		Expr = "value (774.0, Eur_Ha_jaarlijks) * rotation";
			attribute<float32> yr (rdc_100m): expr = "='factoren/fysiek/YR/Average/'+GewasSoortYR/name[gewas]";
			attribute<ton_ha_jaarlijks> DM_yield (rdc_100m):	Expr = "value (MaxYieldGrass + DDGrassYield, ton_ha_jaarlijks) * (1.0[float32] - yr)"	 "* rotation";
			parameter<EUR_ton> feeding_costs:		Expr = " value (16.0, EUR_ton)";
		}

		container mais
		{
			parameter<GewasSoortYR> Gewas: expr = "GewasSoortYR/V/snijmais";
			attribute<ratio> rotation(rdc_100m):
				Expr = "switch("
					   "case( SourceData/Landbouw/Bodem_HELP >= value (1, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value (5, BodemKlasse14k),"
							"value ( 0.0, ratio))," //0.11
					   "case( SourceData/Landbouw/Bodem_HELP >= value (6, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value (14, BodemKlasse14k),"
							"value ( 0.0, ratio))," // 0.30
					   "value ( 0.0, ratio))";

			attribute<Eur_Ha_jaarlijks> production_costs(rdc_100m): // wat zijn dit precies (paper vasco)? Updaten of speciferen per intensiteitsklasse?
				Expr = "switch("
					   "case( SourceData/Landbouw/Bodem_HELP >= value (1, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value (5, BodemKlasse14k),"
							"value (1491.3, Eur_Ha_jaarlijks)),"
					   "case( SourceData/Landbouw/Bodem_HELP >= value (6, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value (14, BodemKlasse14k)," 
							"value (1504.1, Eur_Ha_jaarlijks))," 
					   "value (0.0, Eur_Ha_jaarlijks)) * rotation";
			
			parameter<ratio> DM_content:Expr = "value (0.35, ratio)"; // dry matter content	 // uitgangspunten normen bedrijfsbegroting melkveehouderij, 5 - 06 - 2014
			parameter<EUR_ton> price_fresh_ton:Expr = "value (60, EUR_ton)"; // Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse? // uitgangspunten normen bedrijfsbegroting melkveehouderij, 5 - 06 - 2014
			parameter<EUR_ton> price_DM_ton:Expr = "price_fresh_ton / DM_content";
			attribute<float32> yr (rdc_100m): expr = "='factoren/fysiek/YR/Average/'+GewasSoortYR/name[gewas]";
			attribute<ton_ha_jaarlijks> DM_yield (rdc_100m):
				Expr = "switch("
					   " case( SourceData/Landbouw/Bodem_HELP >= value (1, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value (5, BodemKlasse14k),"
								"value (15.3, ton_ha_jaarlijks) * (value (1.0, ratio) - yr)),"
					   " case( SourceData/Landbouw/Bodem_HELP >= value (6, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value (14, BodemKlasse14k),"
								"value (13.0, ton_ha_jaarlijks) * (value (1.0, ratio) - yr)),"
					   "value (0.0, ton_ha_jaarlijks)) * rotation";

			attribute<Eur_Ha_jaarlijks> CAP_subsidy(rdc_100m):		Expr = "rotation * value (0.0, Eur_Ha_jaarlijks)"; // Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse?
			parameter<EUR_ton> feeding_costs:		Expr = " value (50.0, EUR_ton)"; // wat zijn dit precies (paper vasco)? Updaten of speciferen per intensiteitsklasse? Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse?
		}
		container feed_concentrates // Zie bovenstaande opmerkingen
		{
			parameter<ratio> DM_content:Expr = "value (0.89, ratio)";
			parameter<EUR_ton> price_fresh_ton: Expr = "value (215.0, EUR_ton)"; // uitgangspunten normen bedrijfsbegroting melkveehouderij, 5 - 06 - 2014. Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse?
			parameter<EUR_ton> price_DM_ton:	Expr = "price_fresh_ton / DM_content";
			parameter<EUR_ton> feeding_costs:		Expr = " value (20.0, EUR_ton)"; // wat zijn dit precies (paper vasco)? Updaten of speciferen per intensiteitsklasse? Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse?
		}
		
		container Economic_performance
		{
			container feed_composition 
			{
				parameter<ratio> grass:  = 0.75[ratio] * FeedDryMatter; //0.6, kan weg
				parameter<ratio> mais:   = 0.25[ratio] * FeedDryMatter; //0.2, kan weg
			}
			
			parameter<EUR_ton> MilkPrice: = Factoren/MilkPrice + MilkPricePremium; // uitgangspunten en normen bedrijfsbegroting melkveehouderij, 5 - 06 - 2014. Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse?
			parameter<EUR_ton> manure_revenue:  = value (  0.0, EUR_ton);
			parameter<EUR_ton> holding_costs:   = value (157.1, EUR_ton); // wat zijn dit precies (paper vasco)? Updaten of speciferen per intensiteitsklasse? Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse?
			
			container TotalFeed
			{
				attribute<ton_ha_jaarlijks>     exo (rdc_100m):  = const(MaxYieldGrass[ton_ha_jaarlijks] / FeedDryMatter, rdc_100m, ton_ha_jaarlijks);   // per intensiteitsklasse te speciferen door LEI, obv pg 22 achtergronddoc (feed_c)
				attribute<ton_ha_jaarlijks>    endo (rdc_100m):  = (Gras_zonder_herinzaai/DM_yield + Gras_met_herinzaai/DM_yield) / feed_composition/grass; // Kan vervangen door onderstaande. Afhankerlijk van yr. Is grass yield als feed comp grass is 100%. Als feed comp grass lager is, bijv 50%, dan is het 2 maal grass yield. Dit is vreemd. Waarom niet total feed vastzetten? P{roductiecapaciteit staat toch ook vast (koeien etc.)? Nu varieert voedsel met yield reduction gras, ZELFS ALS FEED COMP GRASS LAAG IS!
				attribute<ton_ha_jaarlijks> instant (rdc_100m):  = =factoren/TotalFeedExo ? 'exo' : 'endo' ;
			}
			
			container Gras_zonder_herinzaai_feed
			{
				attribute<Eur_Ha_jaarlijks> costs (rdc_100m):  = Gras_zonder_herinzaai/production_costs + (Gras_zonder_herinzaai/DM_yield * Gras_zonder_herinzaai/feeding_costs);
			}
			
			container Gras_met_herinzaai_feed
			{
				attribute<Eur_Ha_jaarlijks> costs (rdc_100m):  = Gras_met_herinzaai/production_costs + (Gras_met_herinzaai/DM_yield * Gras_met_herinzaai/feeding_costs);
			}
			
			container mais_feed
			{
				attribute<ton_ha_jaarlijks> requirement     (rdc_100m):  = TotalFeed/Instant - concentrates_feed/requirement - (Gras_zonder_herinzaai/DM_yield + Gras_met_herinzaai/DM_yield);
				
				attribute<Eur_Ha_jaarlijks> surplus_deficit (rdc_100m):  = (mais/DM_yield - requirement) * mais/price_DM_ton;  // Dit kan ook blijven staan.
				attribute<Eur_Ha_jaarlijks>           costs (rdc_100m):  = mais/production_costs - mais/CAP_subsidy - surplus_deficit + (requirement * mais/feeding_costs);
			}

			container concentrates_feed
			{
				attribute<ton_ha_jaarlijks> requirement(rdc_100m):  = TotalFeed/Instant * (1[ratio] - FeedDryMatter); // Dit kan ook blijven staan.
				
				attribute<Eur_Ha_jaarlijks> costs(rdc_100m):  = requirement * (feed_concentrates/price_DM_ton + feed_concentrates/feeding_costs);
			}
			
			attribute<Eur_Ha_jaarlijks> DD_costs (rdc_100m):   = value(DrainageK/DD_costs[Scenario] * DDPossible, Eur_Ha_jaarlijks);
			
			attribute<Eur_Ha_jaarlijks> total_costs(rdc_100m):  = Gras_zonder_herinzaai_feed/costs + Gras_met_herinzaai_feed/costs + mais_feed/costs + concentrates_feed/costs + DD_costs;
			
			attribute<ton_ha_jaarlijks> milk_production(rdc_100m):  = TotalFeed/Instant * FCE[Ratio];
				
			attribute<EUR_ton> total_costs_milk(rdc_100m):  = total_costs / milk_production;
			
			attribute<Eur_Ha_jaarlijks>   gross_revenues(rdc_100m):  = milk_production * (MilkPrice + manure_revenue - holding_costs);
			attribute<Eur_Ha_jaarlijks> net_revenues_ha (rdc_100m):  = gross_revenues - total_costs;
					
			//onderstaande kan in template
			attribute<EUR_M2_jaarlijks> net_revenues     (rdc_100m) := net_revenues_ha[EUR_M2_jaarlijks];
			attribute<EUR_M2>           conversion_costs (rdc_100m) := = 'value(makedefined(factoren/transitiekosten/PerModelType/'+ name + '[gg_LandbouwK],0[EUR_ha]),EUR_M2)';
		}
	}
	
	Template Kapitalisatie_T
	{
		parameter<ModelType> ModelTypenr;
		//

		container CaseData
		{
			parameter<jaarlijks> rentevoet:              = 0.055[jaarlijks];
			parameter<jaar>      afschrijvingsperiode:   = 20[jaar];
			parameter<jaarlijks> disconteringssnelheid:  = log(float32(1) + rentevoet * 1[jaar])[jaarlijks];

			unit<uint32> periode:  = range(uint32,0,uint32(afschrijvingsperiode))
			{
				attribute<jaar>    jr:           = id(periode)[jaar] + 1[jaar];
				attribute<float32> logCWfactor:  = -disconteringssnelheid * jr;
				attribute<float32> CWfactor:     = exp(logCWfactor);
			}
		}
		parameter<jaar>      factor:            = Sum(CaseData/periode/CWfactor)[jaar];
		parameter<jaarlijks> annuiteitsfactor:  = 1f / factor;
	}
}