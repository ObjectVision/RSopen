container Landbouw : using = "Classifications/Landbouw;Classifications/Actor"
{
	Template Suitability_T
	{
		parameter<YearRange> StartYear;
		parameter<YearRange> EndYear;
		parameter<Classifications/Landbouw/DrainageK> Scenario;
		// 

		parameter<Jaar>      PeriodDuration := (EndYear - StartYear)[jaar];
		parameter<int16>     StYrPhoenix     := StartYear - StartYear[int16];
		parameter<string>    StYrPhoenixStr  := StYrPhoenix == 0[int16] ? 'J000_' : 'J0'+string(StYrPhoenix)+'_';
		parameter<int16>     EndYrPhoenix    := EndYear - StartYear[int16];
		parameter<string>    EndYrPhoenixStr := EndYrPhoenix == 0[int16] ? 'J000_' : 'J0'+string(EndYrPhoenix)+'_';
		attribute<LandbouwK>           gg_LandbouwK  (rdc_100m) := BaseData/StartState/Grondgebruik/per_AllocDomain/gg_Landbouw;
		attribute<HELPbodems>          BodemType     (rdc_100m) := SourceData/Landbouw/HELPbodemsNL;
		unit<uint8>           ModelType        := LandbouwK;

		container Factoren 
		{
			container Transitiekosten := 
				for_each_nedv(
					ModelType/name
					, 'ModelParameters/Landbouw/Transitiekosten/'+ ModelType/name
					, ModelType
					, EUR_ha
				);
			
			container YieldReduction : Descr = "yield reduction"
			{
				unit<uint8> PeilK: NrOfRows = 2
				{
					attribute<string> name  : ['GHG','GLG'];
					attribute<string> label : ['Gemiddeld Hoogste Grondwaterstand','Gemiddeld Laagste Grondwaterstand'], DialogType = "LabelText";
				}

				// container AverageModelType :=
					// for_each_nedv(
						 // ModelType/name
						// , 'AveragePeriod/'+ModelType/name
						// ,rdc_100m
						// ,float32
					// )
				// {
					// attribute<float32> gras_zonder_herinzaai (rdc_100m) := AveragePeriod/gras_zonder_herinzaai;
					// attribute<float32> gras_met_herinzaai    (rdc_100m) := AveragePeriod/gras_met_herinzaai;
					// attribute<float32> snijmais              (rdc_100m) := AveragePeriod/snijmais;
				// }
					
					
				container AveragePeriod :=
					for_each_nedv(
						 GewasSoortYR/name
						,'MakeDefined(add(
							  StartYr/YieldReduction/'+GewasSoortYR/name+'/Result
							, EndYr/YieldReduction/'+GewasSoortYR/name+'/Result
							) / 2[float32],0f)'
						, rdc_100m
						, float32
					)
				{
					attribute<float32> rietteelt        (rdc_100m) := ='add('+AsItemList(GewasSoortYR/rietteelt/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/rietteelt]';
					attribute<float32> akkerbouw        (rdc_100m) := ='add('+AsItemList(GewasSoortYR/akkerbouw/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/akkerbouw]';
					attribute<float32> groenteteelt     (rdc_100m) := ='add('+AsItemList(GewasSoortYR/groenteteelt/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/groenteteelt]';
					attribute<float32> fruitteelt       (rdc_100m) := ='add('+AsItemList(GewasSoortYR/fruitteelt/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/fruitteelt]';
					attribute<float32> boomgaard        (rdc_100m) := ='add('+AsItemList(GewasSoortYR/boomgaard/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/boomgaard]';
					attribute<float32> gg_vee           (rdc_100m) := ='add('+AsItemList(GewasSoortYR/gg_vee/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/gg_vee]';
					attribute<float32> gg_vee_extensief (rdc_100m) := ='add('+AsItemList(GewasSoortYR/gg_vee/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/gg_vee]';
					attribute<float32> gg_vee_intensief (rdc_100m) := ='add('+AsItemList(GewasSoortYR/gg_vee/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/gg_vee]';
				}

				container StartYr:= Year_T(StYrPhoenixStr);
				container EndYr:   = Year_T(EndYrPhoenixStr);
				
				Template Year_T
				{
					//
					parameter<string> Year;
					//
				
					container Peil := 
						for_each_ne(
							PeilK/name
							, 'Peil_T('+string(id(PeilK))+'[PeilK])'
						);
						
					container YieldReduction_FromJanneke := 
						for_each_ndva(
							GewasSoortYR/DeltaresYR/name
							, rdc_100m
							, float32
							, '%RVF_DataDir%/Geschiktheid_opbrengstderving_BAU/'+GewasSoortYR/DeltaresYR/name+'/dmgtot-Wh-2036-2065.tif'
						);
						
					container YieldReduction := 
						for_each_ne(
							GewasSoortYR/name
							, 'YieldReduction_T(GewasSoortYR/V/'+GewasSoortYR/name+')'
						);
				
					Template Peil_T
					{
						parameter<PeilK> id;
						
						
						parameter<string> PeilName                    := PeilK/name[id];  
						attribute<uint32> ResultDDOption   (rdc_100m) := ='SourceData/Landbouw/HELP/'+PeilName+'_merged_'+Classifications/Landbouw/DrainageK/Drainage_nameDDOption[Scenario]+'/'+Year;
						attribute<uint32> ResultNoDDOption (rdc_100m) := ='SourceData/Landbouw/HELP/'+PeilName+'_merged_'+Classifications/Landbouw/DrainageK/Drainage_nameNoDDOption[Scenario]+'/'+Year;
						attribute<bool>   DDPossible       (rdc_100m) := SourceData/Landbouw/DD30_uit_droogleggingzomer_00;
						attribute<uint32> Result           (rdc_100m) := DDPossible ? ResultDDOption: ResultNoDDOption;
					}
						
					Template YieldReduction_T
					{
						parameter<GewasSoortYR> id;
						
						
						attribute<string> code (rdc_100m) :=
							GewasSoortYR/code[id] + '_' +
							Classifications/Landbouw/HELPbodems/code[BodemType] + '_'+
							Classifications/Landbouw/GLGHelpKlasse/code[Peil/GLG/Result] + '-' +
							Classifications/Landbouw/GHGHelpKlasse/code[Peil/GHG/Result];

						attribute<Float32> result (rdc_100m) :=
								rjoin(
									  code
									, /Classifications/Landbouw/OpbrengstDerving/code
									, /Classifications/Landbouw/OpbrengstDerving/TS
								);
					}
				}
			}
		}

		container per_ModelType : using = "ModelParameters/Landbouw"
			// := 
			// for_each_ne(
				// landbouwK/Other/name
				// , 'Other_T('+quote(landbouwK/Other/name)+')'
			// )
		{
			container gg_vee_extensief  := Dairy_T('gg_vee_extensief', FCE/gg_vee_extensief, MaxYieldGrass/gg_vee_extensief, Perc_FeedDryMatter/gg_vee_extensief, MilkPricePremium/gg_vee_extensief); // 2 a 4 : uitkomen op 0 net toeg waarde 
			container gg_vee            := Dairy_T('gg_vee'          , FCE/gg_vee          , MaxYieldGrass/gg_vee          , Perc_FeedDryMatter/gg_vee          , MilkPricePremium/gg_vee);
			container gg_vee_intensief  := Dairy_T('gg_vee_intensief', FCE/gg_vee_intensief, MaxYieldGrass/gg_vee_intensief, Perc_FeedDryMatter/gg_vee_intensief, MilkPricePremium/gg_vee_intensief);
		
			// ,'Grove_zomergroenten'  ,'FALSE' ,'groenteteelt'
			// ,'Wintergroenten'       ,'FALSE' ,'groenteteelt'
			// ,'Bladgroenten'         ,'FALSE' ,'groenteteelt'
			// ,'Groot_fruit'          ,'FALSE' ,'fruitteelt'
			// ,'Klein_fruit'          ,'FALSE' ,'fruitteelt'
			// ,'appelbomen'           ,'TRUE'  ,'fruitteelt'
			// ,'boomteelt'            ,'FALSE' ,'boomgaard'
			// ,'Overig_boomteelt'     ,'FALSE' ,'boomgaard'
		
			containter Fruitteelt;
			containter Boomgaard;
			containter Groenteteelt;
			
		
			container Rietteelt // huisige waarden zijn dummies. Nog te specificeren obv biofuels paper vasco!
			{
				parameter<string>           name                        := 'Rietteelt';
				parameter<GewasSoortYR>     Gewas                       := ='GewasSoortYR/V/'+name;
				attribute<Eur_M2>           totaal           (rdc_100m) := Economic_performance/Net_revenues * Kapitalisatie/Factor - Economic_performance/Conversion_costs;
				parameter<Eur_Ha_jaarlijks> production_costs            := 28597.9[Eur_Ha_jaarlijks];
				parameter<Eur_Ha_jaarlijks> max_revenues                := 49440.1[Eur_Ha_jaarlijks];
				parameter<ratio>            holding_costs_ratio         := 0.205[ratio];
				
				attribute<float32>          YieldReduction   (rdc_100m) := ='factoren/YieldReduction/AveragePeriod/'+GewasSoortYR/name[Gewas];
				container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ name +')';
				parameter<ratio>            rotation                    := 1[ratio];
				attribute<Eur_Ha_jaarlijks> gross_revenues   (rdc_100m) := max_revenues * (1[ratio] - YieldReduction);
				attribute<Eur_Ha_jaarlijks> holding_costs    (rdc_100m) := gross_revenues * holding_costs_ratio;
				attribute<Eur_Ha_jaarlijks> net_revenues_ha  (rdc_100m) := rotation * (gross_revenues - production_costs - holding_costs);
				
				// container Tree_nursery
				// {
					// parameter<ratio>            rotation                    := 1[ratio];
					// attribute<Eur_Ha_jaarlijks> gross_revenues   (rdc_100m) := max_revenues * (1[ratio] - YieldReduction);
					// attribute<Eur_Ha_jaarlijks> holding_costs    (rdc_100m) := gross_revenues * holding_costs_ratio;
					// attribute<Eur_Ha_jaarlijks> net_revenues     (rdc_100m) := rotation * (gross_revenues - production_costs - holding_costs);
				// }
				// container Tree_nursery_other
				// {
					// parameter<ratio>            rotation                    := 1[ratio];
					// attribute<Eur_Ha_jaarlijks> gross_revenues   (rdc_100m) := max_revenues * (1[ratio] - YieldReduction);
					// attribute<Eur_Ha_jaarlijks> holding_costs    (rdc_100m) := gross_revenues * holding_costs_ratio;
					// attribute<Eur_Ha_jaarlijks> net_revenues     (rdc_100m) := rotation * (gross_revenues - production_costs - holding_costs);
				// }
				
				container Economic_performance
				{
					attribute<EUR_M2_jaarlijks> net_revenues     (rdc_100m) := net_revenues_ha[EUR_M2_jaarlijks];
					attribute<EUR_M2>           Conversion_costs (rdc_100m) := ='value(makedefined(Factoren/transitiekosten/'+ name + '[gg_LandbouwK],0[EUR_ha]),EUR_M2)';
				}
			}
			
			#include<akkerbouw.dms>
		}
	}
	
	
	
	Template Other_T
	: using = "Classifications/Landbouw"
	{
		parameter<string>           name;
		//
		parameter<GewasSoortYR>     Gewas                       := GewasSoortYR/V/Consumptieaardappelen;
		parameter<Eur_Ha_jaarlijks> CAP_subsidy                 := 0[Eur_Ha_jaarlijks];
		
		attribute<ratio>            rotation         (rdc_100m) := switch(
																	 case(SourceData/Landbouw/Bodem_HELP >= value(1, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(5, BodemKlasse14k), 0.177[ratio])
																	,case(SourceData/Landbouw/Bodem_HELP >= value(6, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(14, BodemKlasse14k), 0.154[ratio])
																	,0[ratio]);
		attribute<Eur_Ha_jaarlijks> production_costs (rdc_100m) := switch(
																	 case(SourceData/Landbouw/Bodem_HELP >= value(1, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(5, BodemKlasse14k), 3342.3[Eur_Ha_jaarlijks])
																	,case(SourceData/Landbouw/Bodem_HELP >= value(6, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(14, BodemKlasse14k), 3616.9[Eur_Ha_jaarlijks])
																	,0[Eur_Ha_jaarlijks]);
		attribute<float32>          YieldReduction   (rdc_100m) := ='factoren/YieldReduction/AveragePeriod/'+GewasSoortYR/name[Gewas];
		attribute<Eur_Ha_jaarlijks> Gross_revenues   (rdc_100m) := switch(
																	 case(SourceData/Landbouw/Bodem_HELP >= value(1, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(5, BodemKlasse14k), 5331.7[Eur_Ha_jaarlijks] * 1[ratio] - YieldReduction)
																	,case(SourceData/Landbouw/Bodem_HELP >= value(6, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(14, BodemKlasse14k), 6195.8[Eur_Ha_jaarlijks] * 1[ratio] - YieldReduction)
																	,0[Eur_Ha_jaarlijks]);
		attribute<Eur_Ha_jaarlijks> Net_revenues     (rdc_100m) := rotation * (gross_revenues - production_costs + CAP_subsidy);
		attribute<Eur_Ha_jaarlijks> gross_output     (rdc_100m) := rotation * gross_revenues;
		attribute<Eur_M2>           totaal                   (rdc_100m) := Economic_performance/Net_revenues * Kapitalisatie/Factor - Economic_performance/Conversion_costs;
		
		container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ name +')';
		
		container Economic_performance
		{
			parameter<ratio>            holding_costs_ratio           := 0.208[ratio];
			attribute<Eur_Ha_jaarlijks> total_gross_output (rdc_100m) := = 'add('+ AsItemList(GewasSoortYR/akkerbouw/name + '/gross_output') + ')';
			attribute<Eur_Ha_jaarlijks> holding_costs      (rdc_100m) := holding_costs_ratio * total_gross_output;
			attribute<Eur_Ha_jaarlijks> Net_revenues_ha    (rdc_100m) := = 'add('+ AsItemList(GewasSoortYR/akkerbouw/name + '/Net_revenues') + ') - holding_costs';
			attribute<EUR_M2_jaarlijks> Net_revenues       (rdc_100m) := Net_revenues_ha[EUR_M2_jaarlijks];
			attribute<EUR_M2>           Conversion_costs   (rdc_100m) := ='value(makedefined(Factoren/transitiekosten/'+ name + '[gg_LandbouwK],0[EUR_ha]),EUR_M2)';
		}
	}
	
	
	
	Template Dairy_T
	: using = "Classifications/Landbouw"
	{
		parameter<string>           name;
		parameter<ratio>            FCE;
		parameter<ton_ha_jaarlijks> MaxYieldGrass;
		parameter<ratio>            FeedDryMatter;
		parameter<EUR_ton>          MilkPricePremium;
		//
		
		parameter<ton_ha_jaarlijks> DDGrassYieldSrc:= Classifications/Landbouw/DrainageK/DDGrassYield[Scenario];
		attribute<float32>          DDPossible   (rdc_100m):= float32(SourceData/Landbouw/DD30_uit_droogleggingzomer_00); 
		attribute<ton_ha_jaarlijks> DDGrassYield (rdc_100m):= value(DDGrassYieldSrc * DDPossible, ton_ha_jaarlijks);
		
		attribute<Eur_Ha_jaarlijks> Conversion_costs_ha_year (rdc_100m) :=	StartYear[YearRange] == EndYear[YearRange] 
																				? const(0[Eur_Ha_jaarlijks], rdc_100m, Eur_Ha_jaarlijks)
																				: -value(economic_performance/Conversion_costs[Eur_Ha] / value(float32(PeriodDuration), jaar), Eur_Ha_jaarlijks);

		attribute<Eur_Ha_jaarlijks> NetRevConCosts_ha_year   (rdc_100m) := add(Conversion_costs_ha_year, economic_performance/Net_revenues_ha);
		attribute<Eur_Ha_jaarlijks> Totaal_ha_year           (rdc_100m) := add(Conversion_costs_ha_year, economic_performance/Net_revenues_ha);
		attribute<Eur_M2>           totaal_NonAugmented      (rdc_100m) := economic_performance/Net_revenues * kapitalisatie/factor - economic_performance/Conversion_costs;
		attribute<Eur_M2>           totaal                   (rdc_100m) := totaal_NonAugmented;
		attribute<Bool>             DairySuitabilityDefined  (rdc_100m) := IsDefined(totaal), Descr = "// geeft aan welke cellen defined suitabilities hebben. Vormt mede de begrenzing van de studyarea en, dus, wat endogeen wordt in basemap landuse (ggmodel). Needs check bas: welke bron maakt precies dat er uindefined vals in de suit maps zitten? Is deze bron voor alle dairy gesch kaarten hetzelfde? ";
		
		container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ name +')';

		container Gras_zonder_herinzaai
		{
			parameter<GewasSoortYR>     Gewas                       := GewasSoortYR/V/Gras_zonder_herinzaai;
			attribute<ratio>            rotation         (rdc_100m) := switch(
																		 case(SourceData/Landbouw/Bodem_HELP >= value(1, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(5, BodemKlasse14k), 1[ratio]) //0.801
																		,case(SourceData/Landbouw/Bodem_HELP >= value(6, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(14, BodemKlasse14k), 1[ratio]) //0.630
																		,0[ratio]);
			attribute<Eur_Ha_jaarlijks> production_costs (rdc_100m) := 774[Eur_Ha_jaarlijks] * rotation;   // updaten of speciferen per intensiteitsklasse? // wat zijn dit precies (paper vasco)?
			attribute<float32>          YieldReduction   (rdc_100m) := ='factoren/YieldReduction/AveragePeriod/'+GewasSoortYR/name[Gewas];
			attribute<ton_ha_jaarlijks> DM_yield         (rdc_100m) := (MaxYieldGrass + DDGrassYield) * (1f - YieldReduction) * rotation;
			parameter<EUR_ton>          Feeding_costs               := 16[EUR_ton]; // updaten of speciferen per intensiteitsklasse?    // wat zijn dit precies (paper vasco)?
		}
		
		container Gras_met_herinzaai
		{
			parameter<GewasSoortYR>     Gewas                       := GewasSoortYR/V/Gras_met_herinzaai;
			attribute<ratio>            rotation         (rdc_100m) := switch(
																		 case(SourceData/Landbouw/Bodem_HELP >= value(1, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(5, BodemKlasse14k), 0[ratio]) //0.089
																		,case(SourceData/Landbouw/Bodem_HELP >= value(6, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(14, BodemKlasse14k), 0[ratio]) //0.07
																		,0[ratio]);
			attribute<Eur_Ha_jaarlijks> production_costs (rdc_100m) := 774[Eur_Ha_jaarlijks] * rotation;   // updaten of speciferen per intensiteitsklasse? // wat zijn dit precies (paper vasco)?
			attribute<float32>          YieldReduction   (rdc_100m) := ='factoren/YieldReduction/AveragePeriod/'+GewasSoortYR/name[Gewas];
			attribute<ton_ha_jaarlijks> DM_yield         (rdc_100m) := (MaxYieldGrass + DDGrassYield) * (1f - YieldReduction) * rotation;
			parameter<EUR_ton>          Feeding_costs               := 16[EUR_ton]; // updaten of speciferen per intensiteitsklasse?    // wat zijn dit precies (paper vasco)?
		}

		container Snijmais
		{
			parameter<GewasSoortYR>     Gewas                       := GewasSoortYR/V/Snijmais;
			attribute<ratio>            rotation         (rdc_100m) := switch(
																		 case(SourceData/Landbouw/Bodem_HELP >= value(1, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(5, BodemKlasse14k), 0[ratio]) //0.11
																		,case(SourceData/Landbouw/Bodem_HELP >= value(6, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(14, BodemKlasse14k), 0[ratio]) //0.30
																		,0[ratio]);
			attribute<Eur_Ha_jaarlijks> production_costs (rdc_100m) := switch(
																		 case(SourceData/Landbouw/Bodem_HELP >= value(1, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(5, BodemKlasse14k), 1491.3[Eur_Ha_jaarlijks]) 
																		,case(SourceData/Landbouw/Bodem_HELP >= value(6, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(14, BodemKlasse14k), 1504.1[Eur_Ha_jaarlijks]) 
																		,0[Eur_Ha_jaarlijks]) * rotation;
			attribute<float32>          YieldReduction   (rdc_100m) := ='factoren/YieldReduction/AveragePeriod/'+GewasSoortYR/name[Gewas];
			parameter<ratio>            DM_content                  := 0.35[ratio]; // dry matter content	 // uitgangspunten normen bedrijfsbegroting melkveehouderij, 5 - 06 - 2014
			parameter<EUR_ton>          price_fresh_ton             := 60[EUR_ton]; // Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse? // uitgangspunten normen bedrijfsbegroting melkveehouderij, 5 - 06 - 2014
			parameter<EUR_ton>          price_DM_ton                := price_fresh_ton / DM_content;
			
			attribute<ton_ha_jaarlijks> DM_yield         (rdc_100m) := switch(
																		 case(SourceData/Landbouw/Bodem_HELP >= value(1, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(5, BodemKlasse14k), 15.3[ton_ha_jaarlijks] * (1[ratio] - YieldReduction)) 
																		,case(SourceData/Landbouw/Bodem_HELP >= value(6, BodemKlasse14k) && SourceData/Landbouw/Bodem_HELP <= value(14, BodemKlasse14k), 13.0[ton_ha_jaarlijks] * (1[ratio] - YieldReduction)) 
																		,0[ton_ha_jaarlijks]) * rotation;
			attribute<Eur_Ha_jaarlijks> CAP_subsidy      (rdc_100m) := rotation * 0[Eur_Ha_jaarlijks]; // Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse?
			parameter<EUR_ton>          feeding_costs               := 50[EUR_ton]; // wat zijn dit precies (paper vasco)? Updaten of speciferen per intensiteitsklasse? Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse?
		}

		container feed_concentrates // Zie bovenstaande opmerkingen
		{
			parameter<ratio>            DM_content                  := 0.89[ratio];
			parameter<EUR_ton>          price_fresh_ton             := 215[EUR_ton]; // uitgangspunten normen bedrijfsbegroting melkveehouderij, 5 - 06 - 2014. Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse?
			parameter<EUR_ton>          price_DM_ton                := price_fresh_ton / DM_content;
			parameter<EUR_ton>          feeding_costs               := 20[EUR_ton]; // wat zijn dit precies (paper vasco)? Updaten of speciferen per intensiteitsklasse? Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse?
		}
		
		container Economic_performance
		{
			container feed_composition 
			{
				parameter<ratio>        grass                       := 0.75[ratio] * FeedDryMatter; //0.6, kan weg
				parameter<ratio>        mais                        := 0.25[ratio] * FeedDryMatter; //0.2, kan weg
			}
			
			parameter<EUR_ton>          MilkPrice                   := ModelParameters/Landbouw/MilkPrice + MilkPricePremium; // uitgangspunten en normen bedrijfsbegroting melkveehouderij, 5 - 06 - 2014. Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse?
			parameter<EUR_ton>          manure_revenue              := 0[EUR_ton];
			parameter<EUR_ton>          holding_costs               := 157.1[EUR_ton]; // wat zijn dit precies (paper vasco)? Updaten of speciferen per intensiteitsklasse? Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse?
			
			container TotalFeed
			{
				attribute<ton_ha_jaarlijks>     exo      (rdc_100m) := const(MaxYieldGrass[ton_ha_jaarlijks] / FeedDryMatter, rdc_100m, ton_ha_jaarlijks);   // per intensiteitsklasse te speciferen door LEI, obv pg 22 achtergronddoc (feed_c)
				attribute<ton_ha_jaarlijks>     endo     (rdc_100m) := (Gras_zonder_herinzaai/DM_yield + Gras_met_herinzaai/DM_yield) / feed_composition/grass; // Kan vervangen door onderstaande. Afhankerlijk van yr. Is grass yield als feed comp grass is 100%. Als feed comp grass lager is, bijv 50%, dan is het 2 maal grass yield. Dit is vreemd. Waarom niet total feed vastzetten? P{roductiecapaciteit staat toch ook vast (koeien etc.)? Nu varieert voedsel met yield reduction gras, ZELFS ALS FEED COMP GRASS LAAG IS!
				attribute<ton_ha_jaarlijks>     instant  (rdc_100m) := = ModelParameters/Landbouw/TotalFeedExo ? 'exo' : 'endo' ;
			}
			
			container Gras_zonder_herinzaai_feed
			{
				attribute<Eur_Ha_jaarlijks>     costs    (rdc_100m) := Gras_zonder_herinzaai/production_costs + (Gras_zonder_herinzaai/DM_yield * Gras_zonder_herinzaai/feeding_costs);
			}
			
			container Gras_met_herinzaai_feed
			{
				attribute<Eur_Ha_jaarlijks>     costs    (rdc_100m) := Gras_met_herinzaai/production_costs + (Gras_met_herinzaai/DM_yield * Gras_met_herinzaai/feeding_costs);
			}
			
			container Snijmais_feed
			{
				attribute<ton_ha_jaarlijks> requirement     (rdc_100m) := TotalFeed/Instant - concentrates_feed/requirement - (Gras_zonder_herinzaai/DM_yield + Gras_met_herinzaai/DM_yield);
				attribute<Eur_Ha_jaarlijks> surplus_deficit (rdc_100m) := (Snijmais/DM_yield - requirement) * Snijmais/price_DM_ton;  // Dit kan ook blijven staan.
				attribute<Eur_Ha_jaarlijks> costs           (rdc_100m) := Snijmais/production_costs - Snijmais/CAP_subsidy - surplus_deficit + (requirement * Snijmais/feeding_costs);
			}

			container concentrates_feed
			{
				attribute<ton_ha_jaarlijks> requirement  (rdc_100m) := TotalFeed/Instant * (1[ratio] - FeedDryMatter); // Dit kan ook blijven staan.
				attribute<Eur_Ha_jaarlijks> costs        (rdc_100m) := requirement * (feed_concentrates/price_DM_ton + feed_concentrates/feeding_costs);
			}
			attribute<Eur_Ha_jaarlijks> DD_costs         (rdc_100m) := value(DrainageK/DD_costs[Scenario] * DDPossible, Eur_Ha_jaarlijks);
			attribute<Eur_Ha_jaarlijks> total_costs      (rdc_100m) := Gras_zonder_herinzaai_feed/costs + Gras_met_herinzaai_feed/costs + Snijmais_feed/costs + concentrates_feed/costs + DD_costs;
			attribute<ton_ha_jaarlijks> milk_production  (rdc_100m) := TotalFeed/Instant * FCE[Ratio];
			attribute<EUR_ton>          total_costs_milk (rdc_100m) := total_costs / milk_production;
			attribute<Eur_Ha_jaarlijks> gross_revenues   (rdc_100m) := milk_production * (MilkPrice + manure_revenue - holding_costs);
			attribute<Eur_Ha_jaarlijks> Net_revenues_ha  (rdc_100m) := gross_revenues - total_costs;
			attribute<EUR_M2_jaarlijks> Net_revenues     (rdc_100m) := Net_revenues_ha[EUR_M2_jaarlijks];
			attribute<EUR_M2>           Conversion_costs (rdc_100m) := = 'value(makedefined(Factoren/transitiekosten/'+ name + '[gg_LandbouwK],0[EUR_ha]),EUR_M2)';
		}
	}
	
	Template Kapitalisatie_T
	{
		parameter<ModelType> ModelTypenr;
		//

		container CaseData
		{
			parameter<jaarlijks> rentevoet:              = 0.055[jaarlijks];
			parameter<jaar>      afschrijvingsperiode:   = 20[jaar];
			parameter<jaarlijks> disconteringssnelheid:  = log(float32(1) + rentevoet * 1[jaar])[jaarlijks];

			unit<uint32> periode:  = range(uint32,0,uint32(afschrijvingsperiode))
			{
				attribute<jaar>    jr:           = id(periode)[jaar] + 1[jaar];
				attribute<float32> logCWfactor:  = -disconteringssnelheid * jr;
				attribute<float32> CWfactor:     = exp(logCWfactor);
			}
		}
		parameter<jaar>      factor:            = Sum(CaseData/periode/CWfactor)[jaar];
		parameter<jaarlijks> annuiteitsfactor:  = 1f / factor;
	}
}