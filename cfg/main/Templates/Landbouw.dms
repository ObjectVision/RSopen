container Landbouw : using = "Classifications/Landbouw;Classifications/Actor"
{
	Template Suitability_T
	{
		//
		parameter<string> Zichtjaar_name;
		parameter<string> DeepDrainageVariant_name;
		//
		
		parameter<YearRange>  StartYear  := rjoin(Zichtjaar_name, Zichtjaar/name, Zichtjaar/PrevYearRange_rel);
		parameter<YearRange>  EndYear    := rjoin(Zichtjaar_name, Zichtjaar/name, Zichtjaar/YearRange_rel);
		parameter<DeepDrainageK> DeepDrainageVariant   := ='DeepDrainageK/v/'+DeepDrainageVariant_name;
		parameter<Jaar>       PeriodDuration := (EndYear - StartYear)[jaar];
		
		parameter<int16>      StYrPhoenix     := int16(round(float32(StartYear)/10f) * 10i);
		parameter<string>     StYrPhoenixStr  := rjoin(StYrPhoenix, Phoenix/Zichtjaar/StartYearPhoenix, Phoenix/Zichtjaar/namePhoenix);
		parameter<string>     EndYrPhoenixStr := rjoin(EndYear, Phoenix/Zichtjaar/EndYearPhoenix, Phoenix/Zichtjaar/namePhoenix);
		attribute<LU_ModelType>  gg_LandbouwK      (rdc_100m) := BaseData/StartState/Grondgebruik/per_AllocDomain/gg_Landbouw;
		attribute<LU_ModelType>  gg_LandbouwK_25m  (rdc_25m)  := BaseData/StartState/Grondgebruik/per_AdminDomain/gg_Landbouw;
		attribute<bool>       gg_IsStedelijk    (rdc_25m)  := BaseData/StartState/Grondgebruik/per_AdminDomain/IsWoonlocatie || BaseData/StartState/Grondgebruik/per_AdminDomain/IsWerklocatie;
		
		attribute<HELPbodems> BodemType         (rdc_100m) := SourceData/Landbouw/HELPbodemsNL;
		unit<uint8>           ModelType                    := LandbouwK;
		
		container Factoren 
		{
			container Transitiekosten := 
				for_each_nedv(
					ModelType/name
					, 'ModelParameters/Landbouw/Transitiekosten/'+ ModelType/name
					, ModelType
					, EUR_ha
				);
			
			container YieldReduction : Descr = "yield reduction"
			{
				attribute<bool> AangetastVerziltGebied (rdc_100m) := SourceData/Landbouw/AangetastVerziltGebied;
				
				container Result :=
					for_each_nedv(
						 GewasSoortYR/name
						,'min_elem('+GewasSoortYR/YR_bron+'/'+GewasSoortYR/name+' + float32(AangetastVerziltGebied) * ModelParameters/Landbouw/Verzilt_OpbrengstDerving * float32('+string(GewasSoortYR/AantastingDoorVerzilt)+'), 1f)'
						, rdc_100m
						, float32
					);
				
				container WWL := 
					for_each_nedv(
						WWL_GewasSoort/name
						, 'MakeDefined(SourceData/Landbouw/Yield_Reduction/WWL_'+/Variant_name+'/'+WWL_GewasSoort/name+' / 100f, ModelParameters/Landbouw/YieldReduction_NoData)'
						, rdc_100m
						, float32
					);
				
				container Exotisch :=
					for_each_nedv(
						Exotische_GewasSoort/name
						, 'MakeDefined(1f - SourceData/Landbouw/WUR_Kansenkaarten/Kansenkaarten/'+Exotische_GewasSoort/name+', ModelParameters/Landbouw/YieldReduction_NoData)'
						, rdc_100m
						, float32
					);
			}
		}
		
		container per_ModelType : using = "ModelParameters/Landbouw"
		{
			container gg_vee_extensief  := Dairy_T('gg_vee_extensief'); 
			container gg_vee            := Dairy_T('gg_vee'); 
			container gg_vee_intensief  := Dairy_T('gg_vee_intensief'); 
			container Yacon             := Generiek_Single_T('Yacon','Yacon', ModelParameters/Landbouw/Yacon/UseSpecificTransitions);
			container Rijst             := Generiek_Single_T('Rijst','Rijst', ModelParameters/Landbouw/Rijst/UseSpecificTransitions);
			container Cranberry         := Generiek_Single_T('Cranberry','Cranberry', ModelParameters/Landbouw/Cranberry/UseSpecificTransitions);
			
			container NonLandbouw
			{
				attribute<Eur_M2>           Totaal                   (rdc_100m) := const(0[Eur_m2], rdc_100m);
				attribute<Eur_M2>           NPV                      (rdc_100m) := Totaal;
				
				attribute<float32>          Suitability              (rdc_100m) := Totaal, Descr = "Uiteindelijke suitability die aan de alloc module wordt meegegeven.";
			}
			
			container Boomgaard
			{
				parameter<string>           ModelType_name                      := 'Boomgaard';
				container                   Parameters                          := ModelParameters/Landbouw;
				container                   ParametersModelType                 := ='ModelParameters/Landbouw/'+ModelType_name;
				unit<uint8>                 GewasTypes                          := ='GewasSoortYR/perLandbouwK_domain/'+ModelType_name;
				
				container per_GewasType :=
					for_each_ne(
						GewasTypes/name
						, 'Generiek_Single_T(ModelType_name,'+quote(GewasTypes/name)+', ParametersModelType/UseSpecificTransitions)' 
					);
				
				attribute<Eur_M2>           Totaal                   (rdc_100m) := = 'max_elem('+ AsItemList('per_GewasType/'+GewasTypes/name + '/Totaal') + ')';
				attribute<Eur_M2>           NPV                      (rdc_100m) := Totaal;
				
				attribute<float32>          Suitability              (rdc_100m) := Totaal, Descr = "Uiteindelijke suitability die aan de alloc module wordt meegegeven.";
				
				attribute<GewasTypes>       GekozenGewas             (rdc_100m) := = 'argmax_ifdefined('+ AsItemList('per_GewasType/'+GewasTypes/name + '/Totaal') + ')[GewasTypes]';
				attribute<Eur_m2_jaarlijks> NetRevenue               (rdc_100m) := ='merge(GekozenGewas, Eur_m2_jaarlijks, '+AsItemList('per_GewasType/'+GewasTypes/name+'/Net_revenues')+')';
				
				container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ ModelType_name +')';
			}
			
			container Moerasbomen
			{
				parameter<string>           ModelType_name                      := 'Moerasbomen';
				container                   Parameters                          := ModelParameters/Landbouw;
				container                   ParametersModelType                 := ='ModelParameters/Landbouw/'+ModelType_name;
				unit<uint8>                 GewasTypes                          := ='GewasSoortYR/perLandbouwK_domain/'+ModelType_name;
				
				container per_GewasType :=
					for_each_ne(
						GewasTypes/name
						, 'Generiek_Single_T(ModelType_name,'+quote(GewasTypes/name)+', ParametersModelType/UseSpecificTransitions)' 
					);
				
				attribute<Eur_M2>           Totaal                   (rdc_100m) := = 'max_elem('+ AsItemList('per_GewasType/'+GewasTypes/name + '/Totaal') + ')';
				attribute<Eur_M2>           NPV                      (rdc_100m) := Totaal;
				
				attribute<bool>             IsNabijN2000             (rdc_100m) := ='potential(float32(SourceData/Omgevingsrecht/EU/Natura2000/Result_AllocDomain && !/SourceData/Omgevingsrecht/EU/Natura2000/IsZee_AllocDomain), /Geography/Distmatrices_'+AllocDomain_ref_short+'/pot'+string(ModelParameters/Landbouw/SuitWegingMaxAfstandN2000)+'m/Flat2) > 0f && !SourceData/Omgevingsrecht/EU/Natura2000/Result_AllocDomain && !/SourceData/Omgevingsrecht/EU/Natura2000/IsZee_AllocDomain';
				attribute<Eur_M2>           NabijN2000_Premie        (rdc_100m) := abs(Totaal != /ModelParameters/Landbouw/YieldReduction_NoData && IsNabijN2000 ? Totaal : const(0f,rdc_100m)) * ModelParameters/Landbouw/SuitWegingFactorN2000;
				attribute<Eur_M2>           Suitability              (rdc_100m) := NabijN2000_Premie + Totaal, Descr = "Uiteindelijke suitability die aan de alloc module wordt meegegeven.";
				
				attribute<GewasTypes>       GekozenGewas             (rdc_100m) := = 'argmax_ifdefined('+ AsItemList('per_GewasType/'+GewasTypes/name + '/Totaal') + ')[GewasTypes]';
				attribute<Eur_m2_jaarlijks> NetRevenue               (rdc_100m) := ='merge(GekozenGewas, Eur_m2_jaarlijks, '+AsItemList('per_GewasType/'+GewasTypes/name+'/Net_revenues')+')';
				
				container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ ModelType_name +')';
			}
			
			container Rietteelt
			{
				parameter<string>           ModelType_name                      := 'Rietteelt';
				container                   Parameters                          := ModelParameters/Landbouw;
				container                   ParametersModelType                 := ='ModelParameters/Landbouw/'+ModelType_name;
				unit<uint8>                 GewasTypes                          := ='GewasSoortYR/perLandbouwK_domain/'+ModelType_name;
				
				container per_GewasType :=
					for_each_ne(
						GewasTypes/name
						, 'Generiek_Single_T(ModelType_name,'+quote(GewasTypes/name)+', ParametersModelType/UseSpecificTransitions)' 
					);
				
				attribute<Eur_M2>           Totaal                   (rdc_100m) := = 'max_elem('+ AsItemList('per_GewasType/'+GewasTypes/name+'/Totaal') + ')';
				attribute<Eur_M2>           NPV                      (rdc_100m) := Totaal;
				
				attribute<bool>             IsNabijN2000             (rdc_100m) := ='potential(float32(SourceData/Omgevingsrecht/EU/Natura2000/Result_AllocDomain && !/SourceData/Omgevingsrecht/EU/Natura2000/IsZee_AllocDomain), /Geography/Distmatrices_'+AllocDomain_ref_short+'/pot'+string(ModelParameters/Landbouw/SuitWegingMaxAfstandN2000)+'m/Flat2) > 0f && !SourceData/Omgevingsrecht/EU/Natura2000/Result_AllocDomain && !/SourceData/Omgevingsrecht/EU/Natura2000/IsZee_AllocDomain';
				attribute<Eur_M2>           NabijN2000_Premie        (rdc_100m) := abs(Totaal != /ModelParameters/Landbouw/YieldReduction_NoData && IsNabijN2000 ? Totaal : const(0f,rdc_100m)) * ModelParameters/Landbouw/SuitWegingFactorN2000;
				attribute<Eur_M2>           Suitability              (rdc_100m) := NabijN2000_Premie + Totaal, Descr = "Uiteindelijke suitability die aan de alloc module wordt meegegeven.";
				
				attribute<GewasTypes>       GekozenGewas             (rdc_100m) := = 'argmax_ifdefined('+ AsItemList('per_GewasType/'+GewasTypes/name + '/Totaal') + ')[GewasTypes]';
				attribute<Eur_m2_jaarlijks> NetRevenue               (rdc_100m) := ='merge(GekozenGewas, Eur_m2_jaarlijks, '+AsItemList('per_GewasType/'+GewasTypes/name+'/Net_revenues')+')';
				
				container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ ModelType_name +')';
			}
			
			container Akkerbouw 
			{
				parameter<string>           ModelType_name                      := 'Akkerbouw';
				container                   Parameters                          := ModelParameters/Landbouw;
				container                   ParametersModelType                 := ='ModelParameters/Landbouw/'+ModelType_name;
				
				container                   Consumptieaardappelen               := Calc_Rotation_T('Consumptieaardappelen');
				container                   Zetmeelaardappelen                  := Calc_Rotation_T('Zetmeelaardappelen');
				container                   Suikerbieten                        := Calc_Rotation_T('Suikerbieten');
				container                   Wintertarwe                         := Calc_Rotation_T('Wintertarwe');
				container                   Zaaiuien                            := Calc_Rotation_T('Zaaiuien');
				
				parameter<float32> check_rotatie_sum_kleiig := ='add('+AsItemList('Parameters/'+GewasSoortYR/perLandbouwK_domain/Akkerbouw/name+'/Rotation_BodemK_kleiig')+')';
				parameter<float32> check_rotatie_sum_zandig := ='add('+AsItemList('Parameters/'+GewasSoortYR/perLandbouwK_domain/Akkerbouw/name+'/Rotation_BodemK_zandig')+')';
				
				attribute<Eur_M2>           Totaal                   (rdc_100m) := Economic_performance/Net_revenues * Kapitalisatie/Factor - Economic_performance/Conversion_costs, Descr = "NPV";
				attribute<Eur_M2>           NPV                      (rdc_100m) := Totaal;
				
				attribute<float32>          Suitability              (rdc_100m) := Totaal, Descr = "Uiteindelijke suitability die aan de alloc module wordt meegegeven.";
				
				attribute<EUR_M2_jaarlijks> NetRevenue               (rdc_100m) := Economic_performance/Net_revenues;
				
				container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ ModelType_name +')';
				
				container Economic_performance
				{
					attribute<Eur_Ha_jaarlijks> total_gross_output (rdc_100m) := = 'add('+ AsItemList(GewasSoortYR/perLandbouwK_domain/akkerbouw/name + '/gross_output') + ')';
					attribute<Eur_Ha_jaarlijks> holding_costs      (rdc_100m) := ParametersModelType/holding_costs_ratio * total_gross_output;
					attribute<Eur_Ha_jaarlijks> Net_revenues_ha    (rdc_100m) := = 'add('+ AsItemList(GewasSoortYR/perLandbouwK_domain/akkerbouw/name + '/Net_revenues') + ') - holding_costs';
					attribute<EUR_M2_jaarlijks> Net_revenues       (rdc_100m) := Net_revenues_ha[EUR_M2_jaarlijks];
					attribute<EUR_M2>           Conversion_costs   (rdc_100m) := ='MakeDefined(Factoren/transitiekosten/'+ ModelType_name + '[LU_ModelType/LandbouwK_rel[gg_LandbouwK]],/ModelParameters/Landbouw/Transitiekosten_src/overigen__'+ModelType_name+')[EUR_M2]';
				}
			}
		}
	}
	
	#include<Dairy_T.dms>
	
	Template Generiek_Single_T 
	{
		//
		parameter<string>           ModelType_name;
		parameter<string>           Gewas_name;
		parameter<bool>             UseSpecificTransitions;
		//
		
		container                   Parameters                  := ='ModelParameters/Landbouw/'+Gewas_name;
		parameter<GewasSoortYR>     Gewas                       := ='GewasSoortYR/V/'+Gewas_name;
		
		attribute<float32>          YieldReduction   (rdc_100m) := ='factoren/YieldReduction/Result/'+GewasSoortYR/name[Gewas];
		attribute<Eur_Ha_jaarlijks> Gross_revenues   (rdc_100m) := Parameters/Gross_revenues * (1[ratio] - (YieldReduction == ModelParameters/Landbouw/YieldReduction_NoData ? 1f : YieldReduction));
		attribute<Eur_Ha_jaarlijks> Holding_costs    (rdc_100m) := Gross_revenues * Parameters/Holding_costs_ratio;
		attribute<Eur_Ha_jaarlijks> Net_revenues_ha  (rdc_100m) := Parameters/Rotation * (Gross_revenues - Parameters/Production_costs - Holding_costs);
		attribute<EUR_M2_jaarlijks> Net_revenues     (rdc_100m) := Net_revenues_ha[EUR_M2_jaarlijks];
		attribute<EUR_M2>           Conversion_costs (rdc_100m) := = UseSpecificTransitions ?
			'MakeDefined(Factoren/Transitiekosten/'+Gewas_name+'[LU_ModelType/LandbouwK_rel[gg_LandbouwK]], /ModelParameters/Landbouw/Transitiekosten_src/overigen__'+Gewas_name+')[EUR_M2]' :
			'MakeDefined(Factoren/Transitiekosten/'+ModelType_name+'[LU_ModelType/LandbouwK_rel[gg_LandbouwK]],/ModelParameters/Landbouw/Transitiekosten_src/overigen__'+ModelType_name+')[EUR_M2]';
		
		container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ ModelType_name +')';
		
		attribute<Eur_M2>           Totaal           (rdc_100m) := YieldReduction != ModelParameters/Landbouw/YieldReduction_NoData ? Net_revenues * Kapitalisatie/Factor - Conversion_costs : ModelParameters/Landbouw/YieldReduction_NoData, Descr = "NPV";
		attribute<EUR_M2_jaarlijks> NetRevenue       (rdc_100m) := Net_revenues;
		attribute<Eur_M2>           NPV              (rdc_100m) := Totaal;
		
		attribute<float32>          Suitability              (rdc_100m) := Totaal, Descr = "Uiteindelijke suitability die aan de alloc module wordt meegegeven.";
	}
	
	Template Calc_Rotation_T
	{
		//
		parameter<string> sub_gewas;
		//
		
		parameter<GewasSoortYR>     Gewas                           := ='GewasSoortYR/V/'+sub_gewas;
		container                   ParametersSubgewas              := ='Parameters/'+sub_gewas;
		
		attribute<ratio>            Rotation             (rdc_100m) := switch(
																		 case(SourceData/Landbouw/Bodem_HELP_kleiig, ParametersSubgewas/Rotation_BodemK_kleiig)
																		,case(SourceData/Landbouw/Bodem_HELP_zandig, ParametersSubgewas/Rotation_BodemK_zandig) 
																		,0[ratio]);
																		
		attribute<Eur_Ha_jaarlijks> Production_costs     (rdc_100m) := switch(
																		 case(SourceData/Landbouw/Bodem_HELP_kleiig, ParametersSubgewas/Production_costs_BodemK_kleiig) 
																		,case(SourceData/Landbouw/Bodem_HELP_zandig, ParametersSubgewas/Production_costs_BodemK_zandig) 
																		,0[Eur_Ha_jaarlijks]);
																		
		attribute<float32>          YieldReduction       (rdc_100m) := ='factoren/YieldReduction/Result/'+GewasSoortYR/name[Gewas];
		
		attribute<Eur_Ha_jaarlijks> Gross_revenues       (rdc_100m) := switch(
																		 case(YieldReduction == ModelParameters/Landbouw/YieldReduction_NoData, 0[Eur_Ha_jaarlijks])
																		,case(SourceData/Landbouw/Bodem_HELP_kleiig, ParametersSubgewas/Gross_revenues_BodemK_kleiig * (1[ratio] - YieldReduction))
																		,case(SourceData/Landbouw/Bodem_HELP_zandig, ParametersSubgewas/Gross_revenues_BodemK_zandig * (1[ratio] - YieldReduction))
																		,0[Eur_Ha_jaarlijks]);
																		
		attribute<Eur_Ha_jaarlijks> Net_revenues         (rdc_100m) := Rotation * (Gross_revenues - Production_costs + ParametersSubgewas/CAP_subsidy);
		attribute<Eur_Ha_jaarlijks> Gross_output         (rdc_100m) := Rotation * Gross_revenues;
	}
	
	Template Kapitalisatie_T
	{
		//
		parameter<ModelType> ModelTypenr;
		//
		
		parameter<jaarlijks> disconteringssnelheid      := log(1f + ModelParameters/Landbouw/rentevoet * 1[jaar])[jaarlijks];
		parameter<jaar>      factor                     := sum(periode/CWfactor)[jaar];
		parameter<jaarlijks> annuiteitsfactor           := 1f / factor;
		
		unit<uint32> periode:  = range(uint32,0,uint32(ModelParameters/Landbouw/afschrijvingsperiode))
		{
			attribute<jaar>    jr                   := id(.)[jaar] + 1[jaar];
			attribute<float32> logCWfactor          := -disconteringssnelheid * jr;
			attribute<float32> CWfactor             := exp(logCWfactor);
		}
	}
}