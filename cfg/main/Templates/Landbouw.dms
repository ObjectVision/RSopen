container Landbouw : using = "Classifications/Landbouw;Classifications/Actor"
{
	Template Suitability_T
	{
		parameter<YearRange> StartYear;
		parameter<YearRange> EndYear;
		parameter<Classifications/Landbouw/DrainageK> Scenario;
		// 

		parameter<Jaar>      PeriodDuration := (EndYear - StartYear)[jaar];
		parameter<int16>     StYrPhoenix     := StartYear - StartYear[int16];
		parameter<string>    StYrPhoenixStr  := StYrPhoenix == 0[int16] ? 'J000_' : 'J0'+string(StYrPhoenix)+'_';
		parameter<int16>     EndYrPhoenix    := EndYear - StartYear[int16];
		parameter<string>    EndYrPhoenixStr := EndYrPhoenix == 0[int16] ? 'J000_' : 'J0'+string(EndYrPhoenix)+'_';
		attribute<LandbouwK>           gg_LandbouwK  (rdc_100m) := BaseData/StartState/Grondgebruik/per_AllocDomain/gg_Landbouw;
		attribute<HELPbodems>          BodemType     (rdc_100m) := SourceData/Landbouw/HELPbodemsNL;
		unit<uint8>           ModelType        := LandbouwK;

		container Factoren 
		{
			container Transitiekosten := 
				for_each_nedv(
					ModelType/name
					, 'ModelParameters/Landbouw/Transitiekosten/'+ ModelType/name
					, ModelType
					, EUR_ha
				);
			
			container YieldReduction : Descr = "yield reduction"
			{
				unit<uint8> PeilK: NrOfRows = 2
				{
					attribute<string> name  : ['GHG','GLG'];
					attribute<string> label : ['Gemiddeld Hoogste Grondwaterstand','Gemiddeld Laagste Grondwaterstand'], DialogType = "LabelText";
				}

				container AveragePeriod :=
					for_each_nedv(
						 GewasSoortYR/name
						,'MakeDefined(add(
							  StartYr/YieldReduction/'+GewasSoortYR/name+'/Result
							, EndYr/YieldReduction/'+GewasSoortYR/name+'/Result
							) / 2[float32],0f)'
						, rdc_100m
						, float32
					)
				{
					attribute<float32> rietteelt        (rdc_100m) := ='add('+AsItemList(GewasSoortYR/rietteelt/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/rietteelt]';
					attribute<float32> akkerbouw        (rdc_100m) := ='add('+AsItemList(GewasSoortYR/akkerbouw/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/akkerbouw]';
					attribute<float32> groenteteelt     (rdc_100m) := ='add('+AsItemList(GewasSoortYR/groenteteelt/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/groenteteelt]';
					attribute<float32> fruitteelt       (rdc_100m) := ='add('+AsItemList(GewasSoortYR/fruitteelt/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/fruitteelt]';
					attribute<float32> boomgaard        (rdc_100m) := ='add('+AsItemList(GewasSoortYR/boomgaard/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/boomgaard]';
					attribute<float32> gg_vee           (rdc_100m) := ='add('+AsItemList(GewasSoortYR/gg_vee/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/gg_vee]';
					attribute<float32> gg_vee_extensief (rdc_100m) := ='add('+AsItemList(GewasSoortYR/gg_vee/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/gg_vee]';
					attribute<float32> gg_vee_intensief (rdc_100m) := ='add('+AsItemList(GewasSoortYR/gg_vee/name)+') / ModelType/Count_GewasSoortYR[ModelType/V/gg_vee]';
				}

				container StartYr:= Year_T(StYrPhoenixStr);
				container EndYr:   = Year_T(EndYrPhoenixStr);
				
				Template Year_T
				{
					parameter<string> Year;
					//
				
					container Peil := 
						for_each_ne(
							PeilK/name
							, 'Peil_T('+string(id(PeilK))+'[PeilK])'
						);
						
					container YieldReduction_FromJanneke := 
						for_each_ndva(
							GewasSoortYR/DeltaresYR/name
							, rdc_100m
							, float32
							, '%RVF_DataDir%/Geschiktheid_opbrengstderving_BAU/'+GewasSoortYR/DeltaresYR/name+'/dmgtot-Wh-2036-2065.tif'
						);
						
					container YieldReduction := 
						for_each_ne(
							GewasSoortYR/name
							, 'YieldReduction_T(GewasSoortYR/V/'+GewasSoortYR/name+')'
						);
				
					Template Peil_T
					{
						parameter<PeilK> id;
						///
						parameter<string> PeilName                    := PeilK/name[id];  
						attribute<uint32> ResultDDOption   (rdc_100m) := ='SourceData/Landbouw/HELP/'+PeilName+'_merged_'+Classifications/Landbouw/DrainageK/Drainage_nameDDOption[Scenario]+'/'+Year;
						attribute<uint32> ResultNoDDOption (rdc_100m) := ='SourceData/Landbouw/HELP/'+PeilName+'_merged_'+Classifications/Landbouw/DrainageK/Drainage_nameNoDDOption[Scenario]+'/'+Year;
						attribute<bool>   DDPossible       (rdc_100m) := SourceData/Landbouw/DD30_uit_droogleggingzomer_00;
						attribute<uint32> Result           (rdc_100m) := DDPossible ? ResultDDOption: ResultNoDDOption;
					}
					
					Template YieldReduction_T
					{
						parameter<GewasSoortYR> id;
						///
						attribute<string> code (rdc_100m) :=
							GewasSoortYR/code[id] + '_' +
							Classifications/Landbouw/HELPbodems/code[BodemType] + '_'+
							Classifications/Landbouw/GLGHelpKlasse/code[Peil/GLG/Result] + '-' +
							Classifications/Landbouw/GHGHelpKlasse/code[Peil/GHG/Result];

						attribute<Float32> result (rdc_100m) :=
								rjoin(
									  code
									, /Classifications/Landbouw/OpbrengstDerving/code
									, /Classifications/Landbouw/OpbrengstDerving/TS
								);
					}
				}
			}
		}

		container per_ModelType : using = "ModelParameters/Landbouw"
		{
			container gg_vee_extensief  := Dairy_T('gg_vee_extensief'); 
			container gg_vee            := Dairy_T('gg_vee'); 
			container gg_vee_intensief  := Dairy_T('gg_vee_intensief'); 
			container Rietteelt         := Generiek_Single_T('Rietteelt','Rietteelt', ModelParameters/Landbouw/Rietteelt/UseSpecificTransitions);
			
			container Fruitteelt
			{
				parameter<string>           ModelType_name                      := 'Fruitteelt';
				container                   Parameters                          := ModelParameters/Landbouw;
				container                   ParametersModelType                 := ='ModelParameters/Landbouw/'+ModelType_name;
				unit<uint8>                 GewasTypes                          := ='GewasSoortYR/'+ModelType_name;
				
				container per_GewasType :=
					for_each_ne(
						GewasTypes/name
						, 'Generiek_Single_T(ModelType_name,'+quote(GewasTypes/name)+', ParametersModelType/UseSpecificTransitions)' 
					);
			
				attribute<Eur_M2>           Totaal                   (rdc_100m) := Economic_performance/Net_revenues * Kapitalisatie/Factor - Economic_performance/Conversion_costs;
				
				container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ ModelType_name +')';
				
				container Economic_performance
				{
					attribute<Eur_Ha_jaarlijks> Total_Gross_Revenues (rdc_100m) := = 'add('+AsItemList('per_GewasType/'+GewasTypes/name+'/Gross_revenues')+')';
					attribute<Eur_Ha_jaarlijks> Holding_costs        (rdc_100m) := ParametersModelType/holding_costs_ratio * Total_Gross_Revenues;
					attribute<Eur_Ha_jaarlijks> Net_revenues_ha      (rdc_100m) := = 'add('+AsItemList('per_GewasType/'+GewasTypes/name+'/Net_revenues_ha')+') - holding_costs';
					attribute<EUR_M2_jaarlijks> Net_revenues         (rdc_100m) := Net_revenues_ha[EUR_M2_jaarlijks];
					attribute<EUR_M2>           Conversion_costs     (rdc_100m) := ='MakeDefined(Factoren/Transitiekosten/'+ModelType_name+'[gg_LandbouwK],0[EUR_ha])[EUR_M2]';
				}
			}
			container Boomgaard
			{
				parameter<string>           ModelType_name                      := 'Boomgaard';
				container                   Parameters                          := ModelParameters/Landbouw;
				container                   ParametersModelType                 := ='ModelParameters/Landbouw/'+ModelType_name;
				unit<uint8>                 GewasTypes                          := ='GewasSoortYR/'+ModelType_name;
				
				container per_GewasType :=
					for_each_ne(
						GewasTypes/name
						, 'Generiek_Single_T(ModelType_name,'+quote(GewasTypes/name)+', ParametersModelType/UseSpecificTransitions)' 
					);
					
				attribute<Eur_M2>           Totaal                   (rdc_100m) := Economic_performance/Net_revenues * Kapitalisatie/Factor - Economic_performance/Conversion_costs;
				
				container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ ModelType_name +')';
				
				container Economic_performance
				{
					attribute<Eur_Ha_jaarlijks> Total_Gross_Revenues (rdc_100m) := = 'add('+AsItemList('per_GewasType/'+GewasTypes/name+'/Gross_revenues')+')';
					attribute<Eur_Ha_jaarlijks> Holding_costs        (rdc_100m) := ParametersModelType/holding_costs_ratio * Total_Gross_Revenues;
					attribute<Eur_Ha_jaarlijks> Net_revenues_ha      (rdc_100m) := = 'add('+AsItemList('per_GewasType/'+GewasTypes/name+'/Net_revenues_ha')+') - holding_costs';
					attribute<EUR_M2_jaarlijks> Net_revenues         (rdc_100m) := Net_revenues_ha[EUR_M2_jaarlijks];
					attribute<EUR_M2>           Conversion_costs     (rdc_100m) := ='MakeDefined(Factoren/transitiekosten/'+ ModelType_name + '[gg_LandbouwK],0[EUR_ha])[EUR_M2]';
				}
			}
			
			container Groenteteelt
			{
				parameter<string>           ModelType_name                      := 'Groenteteelt';
				container                   Parameters                          := ModelParameters/Landbouw;
				container                   ParametersModelType                 := ='ModelParameters/Landbouw/'+ModelType_name;
				unit<uint8>                 GewasTypes                          := ='GewasSoortYR/'+ModelType_name;
				
				container per_GewasType :=
					for_each_ne(
						GewasTypes/name
						, 'Generiek_Single_T(ModelType_name,'+quote(GewasTypes/name)+', ParametersModelType/UseSpecificTransitions)' 
					);
			
				attribute<Eur_M2>           Totaal                   (rdc_100m) := Economic_performance/Net_revenues * Kapitalisatie/Factor - Economic_performance/Conversion_costs;
				
				container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ ModelType_name +')';
				
				container Economic_performance
				{
					attribute<Eur_Ha_jaarlijks> Total_Gross_Revenues (rdc_100m) := = 'add('+ AsItemList('per_GewasType/'+GewasTypes/name + '/Gross_revenues') + ')';
					attribute<Eur_Ha_jaarlijks> Holding_costs        (rdc_100m) := ParametersModelType/holding_costs_ratio * Total_Gross_Revenues;
					attribute<Eur_Ha_jaarlijks> Net_revenues_ha      (rdc_100m) := = 'add('+ AsItemList('per_GewasType/'+GewasTypes/name + '/Net_revenues_ha') + ') - holding_costs';
					attribute<EUR_M2_jaarlijks> Net_revenues         (rdc_100m) := Net_revenues_ha[EUR_M2_jaarlijks];
					attribute<EUR_M2>           Conversion_costs     (rdc_100m) := ='MakeDefined(Factoren/transitiekosten/'+ ModelType_name + '[gg_LandbouwK],0[EUR_ha])[EUR_M2]';
				}
			}
			
			container Akkerbouw 
			{
				parameter<string>           ModelType_name                      := 'Akkerbouw';
				container                   Parameters                          := ModelParameters/Landbouw;
				container                   ParametersModelType                 := ='ModelParameters/Landbouw/'+ModelType_name;
				
				container                   Consumptieaardappelen               := Calc_RotationHL_ProdCost_HL_GrosRev_HL_T('Consumptieaardappelen');
				container                   Zetmeelaardappelen                  := Calc_RotationHL_ProdCost_HL_GrosRev_HL_T('Zetmeelaardappelen');
				container                   Suikerbieten                        := Calc_RotationHL_ProdCost_HL_GrosRev_HL_T('Suikerbieten');
				container                   Granen                              := Calc_RotationHL_ProdCost_HL_GrosRev_HL_T('Granen');
				container                   Wintertarwe                         := Calc_RotationHL_ProdCost_HL_GrosRev_HL_T('Wintertarwe');
				container                   Zaaiuien                            := Calc_RotationHL_ProdCost_HL_GrosRev_HL_T('Zaaiuien');

				attribute<Eur_M2>           Totaal                   (rdc_100m) := Economic_performance/Net_revenues * Kapitalisatie/Factor - Economic_performance/Conversion_costs;
				
				container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ ModelType_name +')';
				
				container Economic_performance
				{
					attribute<Eur_Ha_jaarlijks> total_gross_output (rdc_100m) := = 'add('+ AsItemList(GewasSoortYR/akkerbouw/name + '/gross_output') + ')';
					attribute<Eur_Ha_jaarlijks> holding_costs      (rdc_100m) := ParametersModelType/holding_costs_ratio * total_gross_output;
					attribute<Eur_Ha_jaarlijks> Net_revenues_ha    (rdc_100m) := = 'add('+ AsItemList(GewasSoortYR/akkerbouw/name + '/Net_revenues') + ') - holding_costs';
					attribute<EUR_M2_jaarlijks> Net_revenues       (rdc_100m) := Net_revenues_ha[EUR_M2_jaarlijks];
					attribute<EUR_M2>           Conversion_costs   (rdc_100m) := ='MakeDefined(Factoren/transitiekosten/'+ ModelType_name + '[gg_LandbouwK],0[EUR_ha])[EUR_M2]';
				}
			}
		}
	}
	
	#include<Dairy_T.dms>
	
	Template Generiek_Single_T 
	{
		parameter<string>           ModelType_name;
		parameter<string>           Gewas_name;
		parameter<bool>             UseSpecificTransitions;
		//
		container                   Parameters                  := ='ModelParameters/Landbouw/'+Gewas_name;
		parameter<GewasSoortYR>     Gewas                       := ='GewasSoortYR/V/'+Gewas_name;
		
		attribute<float32>          YieldReduction   (rdc_100m) := ='factoren/YieldReduction/AveragePeriod/'+GewasSoortYR/name[Gewas];
		attribute<Eur_Ha_jaarlijks> Gross_revenues   (rdc_100m) := Parameters/Gross_revenues * (1[ratio] - YieldReduction);
		attribute<Eur_Ha_jaarlijks> Holding_costs    (rdc_100m) := Gross_revenues * Parameters/Holding_costs_ratio;
		attribute<Eur_Ha_jaarlijks> Net_revenues_ha  (rdc_100m) := Parameters/Rotation * (Gross_revenues - Parameters/Production_costs - Holding_costs);
		attribute<EUR_M2_jaarlijks> Net_revenues     (rdc_100m) := Net_revenues_ha[EUR_M2_jaarlijks];
		attribute<EUR_M2>           Conversion_costs (rdc_100m) := =UseSpecificTransitions ? 'MakeDefined(Factoren/Transitiekosten/'+Gewas_name+'[gg_LandbouwK],0[EUR_ha])[EUR_M2]' : 'MakeDefined(Factoren/Transitiekosten/'+ModelType_name+'[gg_LandbouwK],0[EUR_ha])[EUR_M2]';
		
		container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ ModelType_name +')';
		
		attribute<Eur_M2>           Totaal           (rdc_100m) := Net_revenues * Kapitalisatie/Factor - Conversion_costs;
	}
	
	Template Calc_RotationHL_T
	{
		parameter<string>           sub_gewas;
		//
		parameter<GewasSoortYR>     Gewas                           := ='GewasSoortYR/V/'+sub_gewas;
		container                   ParametersSubgewas              := ='Parameters/'+sub_gewas;
		
		attribute<ratio>            Rotation             (rdc_100m) := switch(
																		 case(SourceData/Landbouw/Bodem_HELP_kleiig, ParametersSubgewas/Rotation_BodemK_kleiig)
																		,case(SourceData/Landbouw/Bodem_HELP_zandig, ParametersSubgewas/Rotation_BodemK_zandig) 
																		,0[ratio]);
		attribute<float32>          YieldReduction       (rdc_100m) := ='factoren/YieldReduction/AveragePeriod/'+GewasSoortYR/name[Gewas];
		attribute<Eur_Ha_jaarlijks> Gross_revenues       (rdc_100m) := ParametersSubgewas/Gross_revenues * (1[ratio] - YieldReduction); 
		attribute<Eur_Ha_jaarlijks> Net_revenues         (rdc_100m) := Rotation * (Gross_revenues - ParametersSubgewas/production_costs + ParametersSubgewas/CAP_subsidy);
		attribute<Eur_Ha_jaarlijks> gross_output         (rdc_100m) := Rotation * Gross_revenues;
	}
	
	Template Calc_RotationHL_ProdCost_HL_GrosRev_HL_T
	{
		parameter<string>           sub_gewas;
		///
		parameter<GewasSoortYR>     Gewas                           := ='GewasSoortYR/V/'+sub_gewas;
		container                   ParametersSubgewas              := ='Parameters/'+sub_gewas;
		
		attribute<ratio>            Rotation             (rdc_100m) := switch(
																		 case(SourceData/Landbouw/Bodem_HELP_kleiig, ParametersSubgewas/Rotation_BodemK_kleiig)
																		,case(SourceData/Landbouw/Bodem_HELP_zandig, ParametersSubgewas/Rotation_BodemK_zandig) 
																		,0[ratio]);
		attribute<Eur_Ha_jaarlijks> Production_costs     (rdc_100m) := switch(
																		 case(SourceData/Landbouw/Bodem_HELP_kleiig, ParametersSubgewas/Production_costs_BodemK_kleiig) 
																		,case(SourceData/Landbouw/Bodem_HELP_zandig, ParametersSubgewas/Production_costs_BodemK_zandig) 
																		,0[Eur_Ha_jaarlijks]) * Rotation;
		attribute<float32>          YieldReduction       (rdc_100m) := ='factoren/YieldReduction/AveragePeriod/'+GewasSoortYR/name[Gewas];
		attribute<Eur_Ha_jaarlijks> Gross_revenues       (rdc_100m) := switch(
																		 case(SourceData/Landbouw/Bodem_HELP_kleiig, ParametersSubgewas/Gross_revenues_BodemK_kleiig * 1[ratio] - YieldReduction)
																		,case(SourceData/Landbouw/Bodem_HELP_zandig, ParametersSubgewas/Gross_revenues_BodemK_zandig * 1[ratio] - YieldReduction)
																		,0[Eur_Ha_jaarlijks]);
		attribute<Eur_Ha_jaarlijks> Net_revenues         (rdc_100m) := Rotation * (Gross_revenues - Production_costs + ParametersSubgewas/CAP_subsidy);
		attribute<Eur_Ha_jaarlijks> Gross_output         (rdc_100m) := Rotation * Gross_revenues;
	}

	Template Kapitalisatie_T
	{
		parameter<ModelType> ModelTypenr;
		//
		parameter<jaarlijks> disconteringssnelheid      := log(1f + ModelParameters/Landbouw/rentevoet * 1[jaar])[jaarlijks];
		parameter<jaar>      factor                     := sum(periode/CWfactor)[jaar];
		parameter<jaarlijks> annuiteitsfactor           := 1f / factor;

		unit<uint32> periode:  = range(uint32,0,uint32(ModelParameters/Landbouw/afschrijvingsperiode))
		{
			attribute<jaar>    jr                   := id(.)[jaar] + 1[jaar];
			attribute<float32> logCWfactor          := -disconteringssnelheid * jr;
			attribute<float32> CWfactor             := exp(logCWfactor);
		}
	}
}