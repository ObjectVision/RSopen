container Actor := Classifications/Actor, using = "classifications/modellering"
{
	unit<uint8> Sector := Classifications/Actor/Sector;
	
	unit<uint8> SectorAllocRegio := VariantParameters/SectorAllocRegio
	{
		attribute<string> name                 := sector_name + '_' + allocregio_name;
		attribute<string> Label                := Sector/Label[Sector_rel], DialogType = "LabelText";
		attribute<string> sector_name          := Sector/name[Sector_rel];
		attribute<string> allocregio_name      := Modellering/AllocRegiosK/name[AllocRegio_rel];
		attribute<string> allocregio_path      := Modellering/AllocRegiosK/path[AllocRegio_rel];
		
		attribute<bool>   IsFirstSectorAllocRegio := id(.) == 0b;
		attribute<string> PrevName   := IsFirstSectorAllocRegio ? '' : name[id(.) - min_elem( id(.), 1b)];
		attribute<string> PrevState  := IsFirstSectorAllocRegio ? 'StateVoorAllocatie' : prevname+'/StateNaAllocatie';
		
		attribute<string> SrcRefRestricties    := Sector/SrcRefRestricties[Sector_rel];
		attribute<string> Subsector_ref        := Sector/Subsector_ref[Sector_rel];
		
		container V := for_each_nedv(name, String(id(.))+'[..]', void, .);
		
		attribute<string>     LastInSector    (Sector) := last(name, sector_rel);
		attribute<string>     Sector_PrevName (Sector) := Sector/name[id(Sector)- 1[Sector]];
		parameter<string>     LastSectorBeforeWind := LastInSector[Sector/V/Wind - 1[Sector]];
		
		attribute<uint8>        AantalIters           := VariantParameters/SectorAllocRegio/AantalIters; 
		attribute<uint8>        AantalItersInLaterSeq := VariantParameters/SectorAllocRegio/AantalItersInLaterSeq;

		unit<uint8> SectorAllocRegio_LaterSeq := select_with_org_rel(SectorAllocRegio/UseInLaterSequences)
		{
			attribute<string>       name                  := ../name[org_rel];
			attribute<Sector>       Sector_rel            := ../sector_rel[org_rel];
			attribute<uint8>        AantalIters           := ../AantalIters[org_rel];
			attribute<uint8>        AantalItersInLaterSeq := ../AantalItersInLaterSeq[org_rel];
			attribute<AllocRegiosK> AllocRegio_rel        := ../AllocRegio_rel[org_rel];
			attribute<string>       Label                 := ../Label[org_rel];
			attribute<string>       sector_name           := ../sector_name[org_rel];
			attribute<string>       allocregio_name       := ../allocregio_name[org_rel];
			attribute<string>       allocregio_path       := ../allocregio_path[org_rel];
			attribute<string>       SrcRefRestricties     := ../SrcRefRestricties[org_rel];
			attribute<string>       Subsector_ref         := ../Subsector_ref[org_rel];
		
			attribute<bool>   IsFirstSectorAllocRegio := id(.) == 0b;
			attribute<string> PrevName                := IsFirstSectorAllocRegio ? '' : name[id(.) - min_elem( id(.), 1b)];
			attribute<string> PrevState               := IsFirstSectorAllocRegio ? 'StateVoorAllocatie' : prevname+'/StateNaAllocatie';
			
			
			parameter<string> LastSectorBeforeWind     := LastInSector[Sector/V/Wind - 1[Sector]];
			attribute<string> LastInSector    (Sector) := last(name, sector_rel);
			attribute<string> Sector_PrevName (Sector) := Sector/name[id(Sector)- 1[Sector]];
			
			container V := for_each_nedv(name, String(id(.))+'[..]', void, .);
		}
	}
	
	unit<uint32> VariantXSectorXSubsector := = 'union_unit('+AsItemList('Sector/XSubSectoren/'+Sector/name+'/subsector')+')'
	{
		attribute<string> Sector_name        := = 'union_data(.,'+AsItemList('Sector/XSubSectoren/'+Sector/name+'/subsector/Sector_name')+')';
		attribute<string> SrcRefGeschiktheid := = 'union_data(.,'+AsItemList('Sector/XSubSectoren/'+Sector/name+'/subsector/SrcRefGeschiktheid')+')';
		attribute<string> SubSector_name     := = 'union_data(.,'+AsItemList('Sector/XSubSectoren/'+Sector/name+'/subsector/SubSector_name')+')';
		attribute<string> Combi_name         := = 'union_data(.,'+AsItemList('Sector/XSubSectoren/'+Sector/name+'/subsector/name')+')';
		attribute<string> SrcRefRestricties  := = replace('union_data(.,'+AsItemList('Sector/XSubSectoren/'+Sector/name+'/subsector/SrcRefRestricties')+')', '@V@', Variant_name);
		attribute<string> name               := = 'variant_name + union_data(.,'+AsItemList('Sector/XSubSectoren/'+Sector/name+'/subsector/name')+')';
	}
}