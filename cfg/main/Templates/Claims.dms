container Claims
{
	#include<Basisjaar.dms>
	#include<ZichtjaarXScenarioxAllocRegios.dms>
	#include<Claims_TargetUnits_T.dms>
	
	Template Maximum_T
	: Descr = ""
	{
		parameter<AllocatieK> id;
		container Claims;
		//
		
		parameter<String> name := AllocatieK/name[id];
		
		attribute<Float32> Result (Claims/AllocRegio) := = replace('max_elem('+asItemList('Claims/ZichtjaarXCases/'+Time/Zichtjaren/name+'/@A@[float32]')+')', '@A@', name);
	}
	
	Template TigrisXLTable_T
	: Descr = ""
	{
		parameter<Classifications/TigrisXL/Table> table_id;
		container Src;
		//
		
		parameter<String> FileNm := Classifications/TigrisXL/Table/ModuleNm[table_id] + '/' + Classifications/TigrisXL/Table/name[table_id] + '.dat';
		
		container metainfo := Src
			, StorageName = "=FileNm"
			, StorageType = "cfg"
			, StorageReadOnly = "True";
			
		container Scenario := for_each_ne(MetaInfo/GenericSrc/ScenarioTimeCombiUnit/name, 'Case('+string(id(MetaInfo/GenericSrc/ScenarioTimeCombiUnit))+'[MetaInfo/GenericSrc/ScenarioTimeCombiUnit], Metainfo)');
	}
	
	Template Case_T
	: Descr = ""
	{
		//
		parameter<Classifications/TigrisXL/Table> table_id;
		parameter<YearRange> Jaar;
		parameter<String> Scenario;
		parameter<String> Variant;
		//
		
		parameter<String> Filename      := Classifications/TigrisXL/Table/name[table_id]+'.dat';
		parameter<String> Filename_bare := Classifications/TigrisXL/Table/name[table_id];
		
		parameter<String>  File
		:	StorageName = "=replace(ClaimSrcDir, '@S@', Scenario)+'_LMS/'+string(Jaar)+'/'+Variant+'_'+Filename"
		,	StorageType = "str";
		
		unit<UInt32> SrcDomain := range(uint32,0,StrCount(File, '\n'))
		{
			attribute<String> FullLine (SrcDomain) := ReadLines(File, .,0);
			attribute<UInt32> EK := ReadElems(FullLine, ., const(0, .));
		}
		
		parameter<String> Validator := '\\s*-?\\d+(\\.\\d+)?';
		
		unit<UInt32> SrcAttribute := ='Classifications/TigrisXL/MetaInfo/'+Classifications/TigrisXL/Table/name[table_id] +'/SrcAttribute' 
		{
			attribute<Bool> is_oke := ='union_data(., '+asItemList('all(regex_match(substr(SrcDomain/FullLine,'+string(SrcAttribute/StartPos)+','+string(SrcAttribute/Length)+'), Validator))')+')';
		}
		
		unit<UInt32> TargetDomain := Geography/RegioIndelingen/LMSSubzone;
		unit<Float32> TargetValues;
		
		container SrcAttributes_strings := 
			for_each_nedv(
				SrcAttribute/name
				, 'substr(SrcDomain/FullLine,' + string(SrcAttribute/StartPos) +',' + string(SrcAttribute/Length) + ')'
				, SrcDomain 
				, string
			)
		{
			attribute<UInt32> EK(SrcDomain) := uint32(LmsSubzone);
		}
		
		container SrcAttributes_oke := 
			for_each_nedv(
				SrcAttribute/name
				, 'regex_match(SrcAttributes_strings/'+SrcAttribute/name+', Validator)'
				, SrcDomain
				, bool
			)
		{
			attribute<UInt32> EK (SrcDomain) := uint32(LmsSubzone);
		}
		
		container SrcAttributes := 
			for_each_neidv(
				SrcAttribute/name
				, 'value(SrcAttributes_strings/'+SrcAttribute/name+', TargetValues)'
				, 'SrcAttributes_oke/'+SrcAttribute/name
				, SrcDomain
				, TargetValues
			)
		{
			attribute<UInt32> EK(SrcDomain) := uint32(LmsSubzone);
		}
		
		container Attributes := 
			for_each_nedv(
				SrcAttribute/name
				, SrcAttribute/is_oke
					? 'rjoin(TargetDomain/LmsSubF, SrcAttributes/EK, SrcAttributes/'+ SrcAttribute/name +')'
					: 'Formatting Error: MetaInfo defined a column with an unexpected number format: '
				, TargetDomain
				, TargetValues
			);
		
		container WritePerNVM :=
			for_each_nedv(
				SrcAttribute/name,
				'sum(Attributes/'+SrcAttribute/name+', TargetDomain/Relaties/NVM_2011)',
				RegioIndelingen/NVM, TargetValues
			), StorageName = "='%LocalDataProjDir%/TigrisXLClaimsPerNVM/'+string(Jaar)+'/'+Scenario+'/'+Variant+'/'+Filename_bare+'.csv'", StorageType = "gdalwrite.vect";
	}
	
	Template MetaInfo_T
	: Descr = ""
	{
		parameter<String> Filename;
		//
		
		unit<UInt32> FileData:
			StorageName = "=Filename",
			StorageType = "gdal.vect",
			StorageReadOnly = "True";
			
		parameter<String> Filenamefss := substr(Filename, 0, strlen(Filename) - 3) + 'fss';
		
		unit<UInt32> MakeFileDatafss := FileData
		, StorageName = "=Filenamefss"
		{
			attribute<String> Variable := FileData/Variable;
			attribute<String> Length   := FileData/Length;
		}
		
		unit<UInt32> ReadFileDatafss
		: StorageName = "=Filenamefss"
		, StorageReadOnly = "True"
		{
			attribute<String> Variable;
			attribute<String> Length;
		}
		
		unit<UInt32> SrcAttribute := ReadFileDatafss
		{
			attribute<String> name:      = ReadFileDatafss/variable;
			attribute<UInt32> Length:    = ReadFileDatafss/Length[uint32];
			attribute<UInt32> EndPos:    = cumulate(Length);
			attribute<UInt32> Startpos:  = EndPos - Length;
		}
	}
}