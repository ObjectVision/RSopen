container StempelProcedure
{
	container reprojectie_windrichting
	{
		parameter<meter> X_org_src  :=  PointCol(Lower_Bound(rdc_meter/geometry[0]))[meter];
		parameter<meter> Y_org_src  :=  PointRow(Lower_Bound(rdc_meter/geometry[0]))[meter];
		parameter<meter> X_org  :=  0.65f * X_org_src, Descr = "linksonder punt, vanwege de tilt moet dit een stuk verder westelijk en zuidelijk liggen van de studyarea linksonderpunt. ";
		parameter<meter> Y_org  :=  0.95f * Y_org_src, Descr = "linksonder punt, vanwege de tilt moet dit een stuk verder westelijk en zuidelijk liggen van de studyarea linksonderpunt. ";
		
		parameter<meter> ZuidOost_afstand  := (4f * CaseClassifications/WindTurbineType/RotorDiameter);
		parameter<meter> NoordOost_afstand := (6f * CaseClassifications/WindTurbineType/RotorDiameter);
		
		parameter<meter> Xc_aligned := ZuidOost_afstand  * sqrt(2f) / 2f;
		parameter<meter> Yc_aligned :=-ZuidOost_afstand  * sqrt(2f) / 2f;
		parameter<meter> Xr_aligned := NoordOost_afstand * sqrt(2f) / 2f;
		parameter<meter> Yr_aligned := NoordOost_afstand * sqrt(2f) / 2f;
		
		parameter<meter> Xc := Xc_aligned;
		parameter<meter> Yc := Yc_aligned;
		parameter<meter> Xr := Xr_aligned - 0.5f * Xc;
		parameter<meter> Yr := Yr_aligned - 0.5f * Yc;

		parameter<meter> X_upperbound  :=  PointCol(Upper_Bound(rdc_meter/geometry[0]))[meter];
		parameter<meter> Y_upperbound  :=  PointRow(Upper_Bound(rdc_meter/geometry[0]))[meter];
		
		parameter<meter> x_range_StudyArea := (X_upperbound - X_org) * 1.5f;
		parameter<meter> y_range_StudyArea := (Y_upperbound - Y_org) * 1.5f;
		
		parameter<int16> aantalrijen    := int16(y_range_StudyArea / ZuidOost_afstand );
		parameter<int16> aantalkolommen := int16(x_range_StudyArea / NoordOost_afstand);
	}
	
	container StempelSettings
	{
		unit<uint32> OffSet := range(uint32, 0, ModelParameters/Wind/aantal_stempel_in1richting * /ModelParameters/Wind/aantal_stempel_in1richting)
		{
			attribute<meter> X := float32(mod(id(.) , /ModelParameters/Wind/aantal_stempel_in1richting)) * /ModelParameters/Wind/afstand_offset_stempel;
			attribute<meter> Y := float32(    id(.) / /ModelParameters/Wind/aantal_stempel_in1richting)  * /ModelParameters/Wind/afstand_offset_stempel;
		}
		
		unit<uint32> EersteRijKolomLeeg := range(uint32, 0, /ModelParameters/Wind/max_aantal_rijen_zonder_tussenruimte + /ModelParameters/Wind/rijkolom_tussenruimte);
		unit<uint32> LijnOrientatie     := range(uint32,0, strcount(/ModelParameters/Wind/LijnOrientatie,',') + 1)
		{
			attribute<string> name := ReadArray(/ModelParameters/Wind/LijnOrientatie, ., string, 0, 0);
		}
	}
	
	unit<uint8> Stempel := combine_uint8(StempelSettings/LijnOrientatie, StempelSettings/EersteRijKolomLeeg, StempelSettings/OffSet)
	{
		attribute<string> orientatie         := StempelSettings/LijnOrientatie/name[first_rel];
		attribute<uint32> EersteRijKolomLeeg := id(StempelSettings/EersteRijKolomLeeg)[second_rel];
		attribute<meter> offsetX             := StempelSettings/OffSet/X[third_rel];
		attribute<meter> offsetY             := StempelSettings/OffSet/Y[third_rel];
		attribute<string> name := 'st_' + orientatie + '_' + string(EersteRijKolomLeeg) + '_' + string(offsetX) + '_' + string(offsetY);
		
		container V := for_each_nedv(name, string(id(.)) + '[..]', void, .);
	}
	
	container Stempels :=
		for_each_ne(
			 Stempel/name
			,'Templates/Beschikbaarheden/Wind_BepaalGeschikteCellenPerStempel_T(' + quote(Stempel/orientatie) + ', ' + string(Stempel/EersteRijKolomLeeg) + ', ' + string(Stempel/offSetX) + '[meter], '+ string(Stempel/offSetY) + '[meter])'
		);
}