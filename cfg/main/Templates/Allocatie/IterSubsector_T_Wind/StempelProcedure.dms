container StempelProcedure
{
	container reprojectie_windrichting
	{
		parameter<rdc_meter> StudyArea  (poly) := geos_union_polygon(rdc_meter/geometry);
		
		parameter<meter>     ZuidOost_afstand  := (4f * CaseClassifications/WindTurbineType/RotorDiameter);
		parameter<meter>     NoordOost_afstand := (6f * CaseClassifications/WindTurbineType/RotorDiameter);
		
		parameter<meter>     Xc_aligned        := ZuidOost_afstand  * sqrt(2f) / 2f;
		parameter<meter>     Yc_aligned        :=-ZuidOost_afstand  * sqrt(2f) / 2f;
		parameter<meter>     Xr_aligned        := NoordOost_afstand * sqrt(2f) / 2f;
		parameter<meter>     Yr_aligned        := NoordOost_afstand * sqrt(2f) / 2f;
		
		parameter<meter_f64>     Xc                := Xc_aligned[meter_f64];
		parameter<meter_f64>     Yc                := Yc_aligned[meter_f64];
		parameter<meter_f64>     Xr                := Xr_aligned[meter_f64] - 0.5d * Xc;
		parameter<meter_f64>     Yr                := Yr_aligned[meter_f64] - 0.5d * Yc;
		
		parameter<meter2_f64>    Determinant       := (Xc * Yr - Xr * Yc);
		parameter<float64>   f_inv             := 1d / Determinant;
		parameter<float64>   Cx                :=  Yr * f_inv;
		parameter<float64>   Cy                := -Xr * f_inv;
		parameter<float64>   Rx                := -Yc * f_inv;
		parameter<float64>   Ry                :=  Xc * f_inv;
		
		unit<uint32> SA_Coords := sequence2points(StudyArea)
		{
			attribute<spoint>    RC_coord  := spoint(point_xy(PointCol(Point) * Cx +  PointRow(Point) * Cy,PointCol(Point) * Rx +  PointRow(Point) * Ry));  
			attribute<rdc_meter> rdc_coord := point_xy(float64(PointCol(RC_coord)) * Xc +  float64(PointRow(RC_coord)) * Xr ,float64(PointCol(RC_coord)) * Yc +  float64(PointRow(RC_coord)) * Yr)[rdc_meter];  
		}
		
		parameter<spoint>    RC_coords  (poly) := points2sequence(SA_Coords/RC_coord);
		parameter<spoint>    RC_org            := spoint(Lower_Bound(RC_coords));
		parameter<spoint>    RC_end            := spoint(Upper_Bound(RC_coords));
		
		parameter<meter_f64>     X_org             :=  (float64(PointCol(RC_org))*Xc + float64(PointRow(RC_org))*Xr)[meter_f64];
		parameter<meter_f64>     Y_org             :=  (float64(PointCol(RC_org))*Yc + float64(PointRow(RC_org))*Yr)[meter_f64];
		parameter<meter_f64>     X_end             :=  (float64(PointCol(RC_end))*Xc + float64(PointRow(RC_end))*Xr)[meter_f64];
		parameter<meter_f64>     Y_end             :=  (float64(PointCol(RC_end))*Yc + float64(PointRow(RC_end))*Yr)[meter_f64];
		parameter<rdc_meter> XY_org            := point_xy(X_org, Y_org)[rdc_meter];
		parameter<rdc_meter> XY_end            := point_xy(X_end, Y_End)[rdc_meter];
		
		parameter<int16>     aantalrijen       := int16(pointrow(RC_end) - pointrow(RC_org))+4s;
		parameter<int16>     aantalkolommen    := int16(pointcol(RC_end) - pointcol(RC_org))+4s;
	}
	
	container StempelSettings
	{
		unit<uint32> OffSet := range(uint32, 0, ModelParameters/Wind/aantal_stempel_in1richting * /ModelParameters/Wind/aantal_stempel_in1richting)
		{
			attribute<float64>       X  := float64(mod(id(.) , /ModelParameters/Wind/aantal_stempel_in1richting)) * /ModelParameters/Wind/afstand_offset_stempel[float64];
			attribute<float64>       Y  := float64(    id(.) / /ModelParameters/Wind/aantal_stempel_in1richting)  * /ModelParameters/Wind/afstand_offset_stempel[float64];
			attribute<rdc_meter>     XY := point_xy(x,y,rdc_meter);
		}
		
		unit<uint32> EersteRijKolomLeeg := range(uint32, 0, /ModelParameters/Wind/max_aantal_rijen_zonder_tussenruimte + /ModelParameters/Wind/rijkolom_tussenruimte);
		// unit<uint32> LijnOrientatie     := range(uint32,0, strcount(/ModelParameters/Wind/LijnOrientatie,',') + 1) //dit hele template is al hardcoded op deze orientatie. Dus parameter is irrelevant...
		unit<uint32> LijnOrientatie     := range(uint32,0, 1)
		{
			// attribute<string> name := ReadArray(/ModelParameters/Wind/LijnOrientatie, ., string, 0, 0);
			attribute<string> name := const('NW_ZO', .); //dit hele template is al hardcoded op deze orientatie. Dus parameter is irrelevant...
		}
	}
	
	unit<uint32> Stempel := combine(StempelSettings/LijnOrientatie, StempelSettings/EersteRijKolomLeeg, StempelSettings/OffSet)
	{
		attribute<string>    orientatie          := StempelSettings/LijnOrientatie/name[first_rel];
		attribute<uint32>    eersteRijKolomLeeg  := id(StempelSettings/EersteRijKolomLeeg)[second_rel];
		attribute<float64>   offsetX             := StempelSettings/OffSet/X[third_rel];
		attribute<float64>   offsetY             := StempelSettings/OffSet/Y[third_rel];
		attribute<rdc_meter> XY                  := point_xy(offsetX, offsetY, rdc_meter);
		attribute<string>    name                := 'st_' + orientatie + '_' + string(eersteRijKolomLeeg) + '_' + string(offsetX) + '_' + string(offsetY);
		
		container V := for_each_nedv(name, string(id(.)) + '[..]', void, .);
	}
	
	container Stempels :=
		for_each_ne(
			 Stempel/name
			,'Templates/Beschikbaarheden/Wind_BepaalGeschikteCellenPerStempel_T(' + quote(Stempel/orientatie) + ', ' + string(Stempel/EersteRijKolomLeeg) + ', ' + string(Stempel/offSetX) + '[meter], '+ string(Stempel/offSetY) + '[meter])'
		);
}