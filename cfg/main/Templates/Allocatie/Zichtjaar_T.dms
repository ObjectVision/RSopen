Template Zichtjaar_T
{
	//
	parameter<string> name;
	container StateVoorAllocatie0;
	container Impl0;
	//
	
	parameter<Jaar> AantalJaren := (rjoin(name, Time/Zichtjaar/name, Time/Zichtjaar/YearRange_rel) - rjoin(name, Time/Zichtjaar/name, Time/Zichtjaar/PrevYearRange_rel))[Jaar];
	
	container StateVoorAllocatie := StateVoorAllocatie0
	{
		container Werken0 := 
			for_each_nedv(
				Jobs6/name
				, NOT(/VariantParameters/SectorAllocRegio/Uq_Sectors/HasWerkenSector) //om te kunnen rekenen zonder werken als sectorAllocRegio
					? 'const(0[Job], CompactedAdminDomain)' 
					: 'MakeDefined(StateVoorAllocatie0/Werken/'+Jobs6/name+' / (1f + (VariantParameters/VariantK/'+Jobs6/name+'[VariantParameters/VariantK/V/'+Variant_name+'] * AantalJaren)), 0[job])'
				, CompactedAdminDomain
				, job
			), Descr = "noemer voor verandering door van werkdichtheid (banen/cel) in bestaand gebied. Eenheid is job, maar Impliciet aantal jobs per cell. Dus dichtheid.";
		
		container Werken := Werken0, Descr = "uitkomst in job/m2, fActor gaat over groei m2/job. Src=job/m2"
		{
			attribute<job> Zak_dienstverlening (CompactedAdminDomain) :=
				= first(Time/Zichtjaar/name) == name && ModelParameters/werken/Thuiswerk_verdikking_ook_op_bestaandekantoren
					? 'MakeDefined(1f / ((1f / Werken0/Zak_dienstverlening) * (1f + VariantParameters/VariantK/m2BVO_job_Kantoor_groeifActor[VariantParameters/VariantK/V/'+Variant_name+'])), 0[job])'
					: 'Werken0/Zak_dienstverlening';
		}

		container Wind
		{
			attribute<bool>  MoetWindmolenAfgebrokenWorden (CompactedAdminDomain) := jaartal_ingebruikname_0 + ModelParameters/Wind/WindmolenAfschrijving < uint16(right(name, 4));
			attribute<Yr>    jaartal_ingebruikname_0       (CompactedAdminDomain) := StateVoorAllocatie0/Wind/jaartal_ingebruikname;
			attribute<Yr>    jaartal_ingebruikname         (CompactedAdminDomain) := VariantParameters/SectorAllocRegio/Uq_Sectors/HasWindSector && MoetWindmolenAfgebrokenWorden ? (0/0)[Yr] : jaartal_ingebruikname_0;
			attribute<MW>    Totaal                        (CompactedAdminDomain) := VariantParameters/SectorAllocRegio/Uq_Sectors/HasWindSector && MoetWindmolenAfgebrokenWorden ? 0[MW]     : StateVoorAllocatie0/Wind/Totaal;
		}
	}
	
	container Context
	{
		container ThisZichtjaar := ..;
		parameter<string> ThisZichtjaar_name := ../name;
	}
	
	container Sequences :=
		for_each_ne(
			Sequence_later/name
			, 'Sequence_T('
				+string(id(Sequence_later))+'[Sequence_later]'                           // sequence id
				', '+Sequence_later/PrevName+'/StateNaAllocatie'                         // container indicating the prev states
				', Context'                                                              // context folder from previous step
				', FALSE'                                                                // bool whether first sequence
				', CaseClassifications/Actor/SectorAllocRegio/SectorAllocRegio_LaterSeq' // unit with sector alloc regio set
				', Sequence_later'                                                       // unit of single first sequence or later sequences
				', Impl'                                                                 // Impl folder from previous step
			')'
		), Descr = "Sequences zijn nodig om verdrongen wooneenheden, banen etc in een sequentie in een volgende sequentie te heralloceren, voor zover de verdringing restclaims opleverede"
	{
		container Seq_0 := Sequence_T(
			0[Sequence_first]                             // sequence id
			, StateVoorAllocatie                          // container indicating the prev states
			, Context                                     // context folder from previous step
			, TRUE                                        // bool whether first sequence
			, CaseClassifications/Actor/SectorAllocRegio  // unit with sector alloc regio set
			, Sequence_first                              // unit of single first sequence or later sequences
			, Impl                                        // Impl folder from previous step
		);
		
		container LastSequence := =last(Sequence_later/name)
		{
			container StateNaAllocatie := =last(Sequence_later/name)+'/StateNaAllocatie'; 
		}
	}
	
	unit<uint8> Sequence_first := range(uint8, 0[uint8], 1[uint8])
	{
		attribute<string> name := 'Seq_'+string(id(.));
		attribute<string> Label := name, DialogType = "LabelText";
		attribute<string> PrevName                   := MakeDefined(name[id(.) - 1[.]], '');
		// attribute<bool>   HasStopped_ThisZichtjaar   := ='union_data(., '+AsItemList('Sequences/'+name+'/Impl/StopSequence')+')';
	}
	
	unit<uint8> Sequence_later := range(uint8, 1[uint8], ModelParameters/Default_NrOfSequences)
	{
		attribute<string> name := 'Seq_'+string(id(.));
		attribute<string> Label := name, DialogType = "LabelText";
		attribute<string> PrevName                   := MakeDefined(name[id(.) - 1[.]], 'Seq_0');
		// attribute<bool>   HasStopped_ThisZichtjaar   := ='union_data(., '+AsItemList('Sequences/'+name+'/Impl/StopSequence')+')';
	}
	
	container Impl := Impl0
	{
		parameter<string>  Generate  := 'Allocatie'+name, ExplicitSuppliers = "=AsList('WriteStand/'+StandVar/path, ';')";// , IntegrityCheck = "IntegrityCheck";

		parameter<bool>   Ontkoppeld := ='ModelParameters/StandAllocatieOntkoppeld';
		
		unit<uint32> StandVar := CaseClassifications/StandVar;
		
		container ReadStand_UNCHECKED :=
			for_each_ndvna(
				 StandVar/path
				, AdminDomain
				, StandVar
				, StandVar/unit_name
				, '%LocalDataProjDir%/Allocatie/'+Casus_name +'/Stand'+name+'/'+StandVar/path+'_'+/ModelParameters/StudyArea+'.tif'
			), StorageReadOnly = "True", Descr = "This tif file could potentially contain only zeros or undefined values. To check for this eventuality, the container following this one checks for this.";
		
		container ReadStand :=
			// for_each_neidvn(
			for_each_nedvn(
				 StandVar/path
				, 'ReadStand_UNCHECKED/'+StandVar/path
				// , 'not(all(IsNull(this)))'
				, AdminDomain
				, StandVar
				, StandVar/unit_name
			), StorageReadOnly = "True"
		{
			container wonen
			{
				attribute<Woning> Aantal_Woningen_Totaal (AdminDomain) := = 'add('+AsItemList(Classifications/Vastgoed/WP2xVSSH/name)+')';
				attribute<Woning> Aantal_Woningen_Totaal_NVM (NVM) := sum(Aantal_Woningen_Totaal, NVM/Per_AdminDomain);
			}
		}

		
		container ReadStandWind
		{
			attribute<bool>  IsWind   (AdminDomain) :=ReadStand/SubSector_rel==Classifications/Actor/Sector/xSubsector/V/Wind_Totaal;
			attribute<uint8> WindUint8(AdminDomain) :=IsWind ? 1b :  0b/0b;
			
			#include <WindPolygoon.dms>
		}
		
		container ReadStand_Compacted := for_each_nedvn(StandVar/path, 'collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, ReadStand/'+StandVar/path+')', CompactedAdminDomain, StandVar, StandVar/unit_name);
		container CalcStand_Compacted := for_each_nedvn(StandVar/path, 'Sequences/LastSequence/StateNaAllocatie/'+StandVar/path, CompactedAdminDomain, StandVar, StandVar/unit_name);

		container CalcStand := 
			for_each_nedvn(
				StandVar/path
				, 'recollect_by_cond(AdminDomain/IsCompactedDomain, CalcStand_Compacted/'+StandVar/path+', (0 / 0) [scope(StandVar, '+StandVar/unit_name+')])'
				, AdminDomain
				, StandVar
				,StandVar/unit_name
		);
		
		container WriteStand :=
			// for_each_neidvna(
			for_each_nedvnat(
				StandVar/path
				, 'CalcStand/'+StandVar/path
				// , 'not(all(IsNull(this)))'
				, AdminDomain
				, StandVar
				, StandVar/unit_name
				, '%LocalDataProjDir%/Allocatie/'+Casus_name +'/Stand'+name+'/'+StandVar/path+'_'+/ModelParameters/StudyArea+'.tif'
				, 'gdalwrite.grid'
			);
	}
	
	container StateNaAllocatie := = Impl/Ontkoppeld ? 'Impl/ReadStand_Compacted' : 'Impl/WriteStand_Compacted'
	{
		container WindPath :=  = Impl/Ontkoppeld ? 'Impl/ReadStand_Compacted/Wind' : 'Impl/WriteStand_Compacted/Wind';
		container Wind := WindPath
		{
			unit<uint64> Objects := select_with_attr_by_cond(WindPath, WindPath/Totaal > 0f)
			{
				attribute<rdc_meter> geometry :=  collect_by_cond(., WindPath/Totaal > 0f, CompactedAdminDomain/point)
				{
					parameter<meter> SymbolWorldSize   := 10[meter], DialogType = "SymbolWorldSize  ";
					parameter<int16> SymbolIndex := 83s, DialogType = "SymbolIndex";
				}
			}
		}
	}
}