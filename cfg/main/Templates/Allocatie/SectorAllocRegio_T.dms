Template SectorAllocRegio_T
{
	//
	unit<UInt8>                 SectorAllocRegio;
	parameter<SectorAllocRegio> id;
	container                   StateVoorAllocatie;
	container                   Context0;
	parameter<UInt8>            AantalIters;
	container                   Impl;
	//
	
	parameter<String> name            := SectorAllocRegio/name[id];
	parameter<String> Sector_name     := SectorAllocRegio/Sector_name[id];
	parameter<String> AllocRegio_name := SectorAllocRegio/AllocRegio_name[id];
	parameter<String> AllocRegio_path := SectorAllocRegio/AllocRegio_path[id];
	
	unit<UInt32>      AllocRegio                  := =ModelParameters/StudyArea == 'Friesland' ? AllocRegio_path+'/StudyArea' : AllocRegio_path;
	parameter<String> AllocRegio_StudyArea_orgrel := ModelParameters/StudyArea == 'Friesland' ? '[AllocRegio/org_rel]' : '';
	unit<UInt8>       Subsector                   := = SectorAllocRegio/Subsector_ref[id];
	
	container Context := Context0
	{
		container ThisSectorAllocRegio := ..;
		parameter<String> ThisSectorAllocRegioname := ThisSectorAllocRegio/name;
		parameter<String> Prev_SectorAllocRegio_name := rjoin(lowercase(ThisSectorAllocRegio/name), lowercase(SectorAllocRegio/name), SectorAllocRegio/PrevName);
	}
	
	unit<UInt8> Iter := range(uint8, 0[uint8], AantalIters)
	{
		attribute<String> name := 'Iter_'+string(id(.));
		attribute<Bool>   IsFirstIter := id(.) == 0b;
		
		attribute<String> PrevName   := IsFirstIter ? 'Start' : name[id(.) - min_elem( id(.), 1b)];
		attribute<String> PrevState := IsFirstIter ? 'StateVoorAllocatie' : Iter/PrevName+'/StateNaAllocatie';
		attribute<String> Label := name, DialogType = "LabelText";
	}
	
	container Iters_Normaal :=
		for_each_ne(
			Iter/name,
			'Iter_T(
					'+string(id(Iter))+'[Iter]
					, '+Iter/PrevState+'
					, Context
					, Iter
					, Impl
					, FALSE
				)'
		), Descr = "Iteraties zijn nodig om niet vervulde restclaims in een iteratie in een volgende iteratie te vervullen. "
	{
		container LastIter := =last(Iter/name);
	}
	
	container Iters_Enkel : Descr = "Zon en Verblijfsrecreatie hebben niet meerdere iteraties nodig, dus gaan verder in een enkele iteratie." 
	{
		container Iter_0 := = 
			 'Iter_T(
					0[Iter]
					,StateVoorAllocatie
					,Context
					,Iter
					,Impl
					,TRUE
				)';
		
		container LastIter := ='Iter_0';
	}
	container Iters_Landbouw : Descr = "Landbouw gebruiks discrete allocatie, en behoeft dus een ander mechanisme." 
	{
		container Iter_0 := = 
			 'Iter_Landbouw_T(
					0[Iter]
					,StateVoorAllocatie
					,Context
					,Iter
					,Impl
					,TRUE
				)';
		
		container LastIter := ='Iter_0';
	}
	
	// parameter<String> Iter_str := Sector_name == 'Zon' || Sector_name == 'Verblijfsrecreatie' ? 'Iters_Enkel' : Sector_name == 'Landbouw' ? 'Iters_Landbouw' : 'Iters_Normaal';
	parameter<String> Iter_str := lowercase(Sector_name) == lowercase('Zon') ? 'Iters_Enkel' : lowercase(Sector_name) == lowercase('Landbouw') ? 'Iters_Landbouw' : 'Iters_Normaal';
	// parameter<String> Iter_str := Sector_name == 'Zon' ? 'Iters_Enkel' : 'Iters_Normaal';
	
	container Iters := =Iter_str
	{
	
		parameter<Bool> HasEnoughIteraties_Normaal := ='Iters_Normaal/'+last(Iter/name)+'/Impl/StopCriterium';
		parameter<Bool> HasEnoughIteraties_Enkel   := ='Iters_Enkel/Iter_0/Impl/StopCriterium';
		parameter<Bool> HasEnoughIteraties         := =lowercase(Iter_str) == lowercase('Iters_Enkel') ? 'HasEnoughIteraties_Enkel' : 'HasEnoughIteraties_Normaal';
		
		// parameter<Bool> HasNotEnoughIteraties := NOT(HasEnoughIteraties);
	}
	
	#include<Restricties_Dynamisch_Wind.dms>
	
	container StateNaAllocatie := ='Iters/LastIter/StateNaAllocatie', IntegrityCheck = "Iters/HasEnoughIteraties"
																			, Descr = "Check op genoeg iteraties. Is het stop criterium wel bereikt? 
																							Oftewel, is er in de laatste iter niks meer gealloceerd, en de claim wel gehaald, of geen geschikte locaties meer over?"; //TO DO: nu staat dit feitelijk uitgeschakeld doordat het op statisch staat.
}