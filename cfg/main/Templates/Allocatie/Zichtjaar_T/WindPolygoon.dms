container WindPolygoon
{
	parameter<Units/meter> visualisatiegrootte := 250[Units/meter];
	unit<uint32> polydomain2 := select_with_org_rel(IsDefined(WindUint8))
	{
		attribute<Geography/rdc_meter> point_rdc  := org_rel[Geography/rdc_meter]
		{                        
			//http://www.alanwood.net/demos/wingdings.html
			parameter<string>      SymbolFont      := 'wingdings',      DialogType = "SymbolFont";
			parameter<int16>       SymbolIndex     := 169s,             DialogType = "SymbolIndex";
			parameter<uint32>      SymbolColor     := rgb(0,0,0),       DialogType = "SymbolColor";
			parameter<Units/meter> SymbolWorldSize := 100[Units/meter], DialogType = "SymbolWorldSize";
		}

		attribute<Geography/rdc_meter> geometry (poly) := points2sequence(pointset/point, pointset/sequence, pointset/ordinal);
		attribute<uint32>              een             := const(1u,.)
		
		{
			parameter<uint32> BrushColor := rgb(0,0,0), DialogType = "BrushColor";
			parameter<uint32> PenColor   := rgb(0,0,0), DialogType = "PenColor";
		}
	
		unit<uint32> pointset := union_unit(.,.,.,.,.)
		{

			attribute<Geography/rdc_meter>    point    := union_data(., 
														point_rdc + point(0.5f * visualisatiegrootte[Units/meter],  -0.5f * visualisatiegrootte[Units/meter], Geography/rdc_meter),		//1 linksboven
														point_rdc + point(0.5f * visualisatiegrootte[Units/meter],   0.5f * visualisatiegrootte[Units/meter], Geography/rdc_meter),		//1 rechtsboven
														point_rdc + point(-0.5f * visualisatiegrootte[Units/meter],  0.5f * visualisatiegrootte[Units/meter], Geography/rdc_meter),		//2 rechtsonder
														point_rdc + point(-0.5f * visualisatiegrootte[Units/meter], -0.5f  *visualisatiegrootte[Units/meter], Geography/rdc_meter),		//3 linksonder
														point_rdc + point(0.5f * visualisatiegrootte[Units/meter],  -0.5f * visualisatiegrootte[Units/meter], Geography/rdc_meter)		//4 linksboven
														);

			attribute<..>     sequence := union_data(., id(..), id(..), id(..), id(..), id(..))[uint32];
			attribute<uint32> ordinal  := union_data(., const(0,..), const(1,..), const(2,..), const(3,..), const(4,..));
		}
	}
}
