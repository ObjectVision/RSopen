template Wind_BepaalGeschikteCellenPerStempel_T
{
	// begin case parameters
	parameter<string> orientatie;
	parameter<uint32> eersteRijKolomLeeg;
	parameter<meter>  offsetX;
	parameter<meter>  offsetY;
	// end case parameters
	
	container impl
	{
		parameter<meter> X_org := reprojectie_windrichting/X_org + offsetX[meter];
		parameter<meter> Y_org := reprojectie_windrichting/Y_org + offsetY[meter];
	}
	
	container windmolen_grid
	{
		unit<fpoint> coordinatesystem;
		
		// parameter<int16> aantalkolommen := value(
			// CaseClassifications/WindTurbineType/RotorDiameter = 80f 
				// ? (8.65f * CaseClassifications/WindTurbineType/RotorDiameter)
				// : CaseClassifications/WindTurbineType/RotorDiameter = 100f 
					// ? (5.65f * CaseClassifications/WindTurbineType/RotorDiameter)
					// : 1.5f * CaseClassifications/WindTurbineType/RotorDiameter
					// : 15.5f * CaseClassifications/WindTurbineType/RotorDiameter
		// ,int16);
		
		// parameter<int16> aantalrijen := value(
			// CaseClassifications/WindTurbineType/RotorDiameter = 80f 
				// ? (9.15f * CaseClassifications/WindTurbineType/RotorDiameter)
				// : CaseClassifications/WindTurbineType/RotorDiameter = 100f 
					// ? (6f * CaseClassifications/WindTurbineType/RotorDiameter)
				// :	1.25f * CaseClassifications/WindTurbineType/RotorDiameter
				// :	16.25f * CaseClassifications/WindTurbineType/RotorDiameter
		// ,int16);
		
		// unit<spoint> GridDomain := range(coordinatesystem, point_xy(0s, 0s), point_xy(aantalkolommen,aantalrijen))
		unit<spoint> GridDomain := range(coordinatesystem, point_xy(0s, 0s), point_xy(reprojectie_windrichting/aantalkolommen,reprojectie_windrichting/aantalrijen))
		, Descr = "Een grid domain zonder relatie met RD coordinaten. Dat komt later pas"
		{
			attribute<float32>       R                                   := float32(PointCol(id(.))), Descr = "Row number";
			attribute<float32>       C                                   := float32(PointRow(id(.))), Descr = "Column number";
			
			parameter<uint32>        nr_mogelijke_pos_eersteRijKolomLeeg := ModelParameters/Wind/rijkolom_tussenruimte + ModelParameters/Wind/max_aantal_rijen_zonder_tussenruimte;
			
			attribute<uint32>        C_mod                               := mod(uint32(C), nr_mogelijke_pos_eersteRijKolomLeeg);
			attribute<uint32>        R_mod                               := mod(uint32(R), nr_mogelijke_pos_eersteRijKolomLeeg);
			
			parameter<uint32>        beginpos_toegestaan                 := eersteRijKolomLeeg;
			parameter<uint32>        eindpos_toegestaan                  := eersteRijKolomLeeg + ModelParameters/Wind/max_aantal_rijen_zonder_tussenruimte - 1;
			parameter<bool>          and_conditie                        := eindpos_toegestaan < nr_mogelijke_pos_eersteRijKolomLeeg;
			
			attribute<bool>          R_toestaan                          := and_conditie
																			? R_mod >= beginpos_toegestaan && R_mod <= eindpos_toegestaan
																			: R_mod >= beginpos_toegestaan || R_mod <= ((eindpos_toegestaan >= nr_mogelijke_pos_eersteRijKolomLeeg) 
																				? eindpos_toegestaan - min_elem(eindpos_toegestaan, nr_mogelijke_pos_eersteRijKolomLeeg) 
																				: 0);
			attribute<bool>          C_toestaan                          := and_conditie
																			? C_mod >= beginpos_toegestaan && C_mod <= eindpos_toegestaan
																			: C_mod >= beginpos_toegestaan || C_mod <= ((eindpos_toegestaan >= nr_mogelijke_pos_eersteRijKolomLeeg) 
																				? eindpos_toegestaan - min_elem(eindpos_toegestaan, nr_mogelijke_pos_eersteRijKolomLeeg) 
																				: 0);
			
			attribute<uint32>        id_RC                               := uint32((C) + ((R) * (max(C) + 1f - min(C))));
			parameter<uint32>        max_id_RC                           := max(id_RC);
			attribute<meter>         X                                   := reprojectie_windrichting/Xc * C + reprojectie_windrichting/Xr * R, Descr = "x-coord zonder offset";
			attribute<meter>         Y                                   := reprojectie_windrichting/Yc * C + reprojectie_windrichting/Yr * R, Descr = "y-coord zonder offset";
			
			attribute<rdc_meter>     pot_locatie                         := point_yx(Y,X, rdc_meter) + point_yx(impl/Y_org[meter], impl/X_org[meter], rdc_meter), Descr = "Locatie in RDC";
			attribute<bool>          IsStudyArea                         := IsDefined(point_in_polygon(pot_locatie, rdc_meter/geometry));
			attribute<locaties_alle> locaties_alle_rel                   := rlookup(id_RC, id(locaties_alle));
			
			// container bbox
			// {
				// attribute<rdc_meter> lefttop     (GridDomain) := pot_locatie[id(GridDomain) - point_yx(1s,0s,GridDomain)];
				// attribute<rdc_meter> rightbottom (GridDomain) := pot_locatie[id(GridDomain) + point_yx(1s,0s,GridDomain)];
				// attribute<rdc_meter> leftbottom  (GridDomain) := pot_locatie[id(GridDomain) - point_yx(0s,1s,GridDomain)];
				// attribute<rdc_meter> righttop    (GridDomain) := pot_locatie[id(GridDomain) + point_yx(0s,1s,GridDomain)];
			// }
		}
		
		unit<uint32> locaties_alle := range(uint32, 0, #GridDomain)
		{
			attribute<rdc_meter> geometry := first(GridDomain/pot_locatie, GridDomain/locaties_alle_rel)
			{
				parameter<uint32> SymbolColor := rgb(200,0,0), DialogType = "SymbolColor";
			}
		}
		
		unit<uint32> locaties_toegestanekolommen := select_with_org_rel(orientatie == 'ZW_NO' ? GridDomain/C_toestaan && GridDomain/IsStudyArea : GridDomain/R_toestaan && GridDomain/IsStudyArea)
		{
			attribute<rdc_meter> geometry := GridDomain/pot_locatie[org_rel]
			{
				/* parameter<uint32> SymbolColor := rgb(0,200,0), DialogType = "SymbolColor"; */
			}
			
			attribute<AdminDomain> in_AdminDomain                := geometry[AdminDomain];
			attribute<bool>        per_AdminDomain (AdminDomain) := IsDefined(invert(in_AdminDomain));
			
			attribute<bool>        IsBeschikbaar   (AdminDomain) := per_AdminDomain && Subsectoren/Totaal/CompactedAdminDomain/Beschikbaar[invert(CompactedAdminDomain/AdminDomain_rel)];
			parameter<uint32>      AantalLocaties                := sum(IsBeschikbaar[uint32]);
		}
	}
}