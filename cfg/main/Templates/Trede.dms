Template Trede_T
{
	//
	parameter<Sector/xSubsector> id;
	container Src;
	//
	
	parameter<String> SectorxSubsector_name := Sector/xSubsector/name[id];
	parameter<String> Sector_name := Sector/xSubsector/Sector_name[id];
	
	container Klassen :=
		for_each_nedv(
			Klasse/Label,
			replace(
				Klasse/RefSrc+' ? Klasse/V/'+Klasse/name+' : (0/0)[Klasse]',
				'@S@', 'Src/', '@X@', Sector_name
			),
			AllocDomain, Klasse
		)
	{
		attribute<Visualisatie> per_domain_grid_visualisatie (AllocDomain) := = 'ArgMin(Classifications/Actor/NoData/v/geen[Klasse], '+asItemList(Klasse/Label)+')[Visualisatie]';
	}
	
	unit<UInt8> Visualisatie := union_unit_uint8(Classifications/Actor/NoData, Visualisatie_src)
	{
		attribute<String> name := union_data(., Classifications/Actor/NoData/name, Visualisatie_src/Label);
		attribute<String> Label := union_data(., Classifications/Actor/NoData/Label, Visualisatie_src/Label), DialogType = "LabelText";
		
		attribute<UInt8> r := union_data(., const(0b/0b, Classifications/Actor/NoData), Visualisatie_src/r);
		attribute<UInt8> g := union_data(., const(0b/0b, Classifications/Actor/NoData), Visualisatie_src/g);
		attribute<UInt8> b := union_data(., const(0b/0b, Classifications/Actor/NoData), Visualisatie_src/b);
		
		attribute<UInt32> BrushColor := rgb(r,g,b), DialogType = "BrushColor";
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt8> Visualisatie_src := range(uint8,0b, #Klasse[uint8])
	{
		attribute<String> Label := Klasse/Label[id(.)[Klasse]], DialogType = "LabelText";
		attribute<UInt32> BrushColor := rgb(r,g,b), DialogType = "BrushColor";
		attribute<UInt8>  r := id(.) <= middle_record ? (0f + change)[uint8] : 254b;
		attribute<UInt8>  g := id(.) <= middle_record ? 254b : (254f - change)[uint8];
		attribute<UInt8>  b := const(0b, .);
		
		attribute<Float32> change :=
			id(.) <= middle_record 
				? (id(.)[float32] * factor) > 254f ? 254f : (id(.)[float32] * factor)
				: ((id(.)[float32] - middle_record[float32]) * factor);
		
		parameter<UInt8> middle_record := (#.[float32] / 2f)[uint8];
		parameter<Float32> factor := 255f / #.[float32] * 2f;
	}
	
	unit<UInt32> Klasse := = 'VariantParameters/Tredes/'+SectorxSubsector_name+'/'+/VariantParameters/VariantK/Trede_Variant[Variant_rel]
	{
		attribute<String> Label := '_'+name, DialogType = "LabelText";
		attribute<String> name_short := 'Trede_' + string(id(.));
		attribute<String> PrevName := MakeDefined(name[sub_or_null(id(.),1[.])], '');
		attribute<String> PrevName_short := MakeDefined(name_short[sub_or_null(id(.),1[.])], '');
		attribute<.> Per_AllocDomain    (AllocDomain) := = #. = 1[uint32] ? 'const(0[.], AllocDomain)' : 'ArgMin('+asItemList('Klassen/'+Label)+')[.]';
		attribute<.> Per_AdminDomain    (AdminDomain) := Per_AllocDomain[AdminDomain/AllocDomain_rel];
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
}