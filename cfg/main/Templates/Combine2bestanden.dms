Template Combine2bestandenT
{
	parameter<string> bestandsnaam1;
	parameter<string> bestandsnaam2;
			
	unit<uint8> bestand1: NrOfRows = 2
	{
		attribute<string> Label: ['VFalse','VTrue'];
	}
	
	unit<uint8> bestand2: NrOfRows = 2
	{
		attribute<string> Label: ['VFalse','VTrue'];
	}
	
	unit<uint8> combine2K := combine_uint8(bestand1,bestand2)
	{
		attribute<uint8>   id         := id(.);
		attribute<string>  idstring   := string(id);
		attribute<string>  Prefixid   := 'Nr' + idstring;
			
		attribute<string>  Label1     := bestand1/Label[first_rel];
		attribute<string>  Label2     := bestand2/Label[second_rel];
		
		attribute<string>  Label      : ['_0_0_allebei_niet', '_0_1_bool1_niet_bool2_wel', '_1_0_bool1_wel_bool2_niet', '_1_1_allebei_wel'];
		attribute<string>  name       := Label;
		attribute<uint32>  BrushColor : [rgb(255,255,255),rgb(255,0,0),rgb(0,255,0),rgb(0,0,0)], DialogType = "BrushColor";
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	container PD := for_each_ne(combine2K/Prefixid, 'G2V('+quote(combine2K/idstring)+')');

	
	container Impl
	{
		unit<uint8> OverlayRegios: NrOfRows = 2
		{
			attribute<string> namen: ['bool1', 'bool2'];
		}
			
		container OverlayGrids
		{
			attribute<bestand1> bool1 (AdminDomain) :== bestandsnaam1 + '[bestand1]';
			attribute<bestand2> bool2 (AdminDomain) :== bestandsnaam2 + '[bestand2]';
		}
		
			
		unit<uint16> combine:= overlay(OverlayRegios/namen, AdminDomain, OverlayGrids)
		{
			attribute<uint16> id     := id(.);
			attribute<string> Label1 := bestand1/Label[bool1];
			attribute<string> Label2 := bestand2/Label[bool2];
			
			attribute<string>    Label  := Label1 + "_" + Label2;
			attribute<uint64>    count  := pcount(UnionData);

			attribute<combine2K> UnionData_Uint2 (AdminDomain) := combine_Data(combine2K, OverlayGrids/bool1, OverlayGrids/bool2);//, StorageReadOnly = "False", StorageName  = "= '%LocalDataProjDir%/PlanMonitor2024/vergelijk/'+Variant+'/aantasting.tif'";		
		}
	}

	Template G2V
	{
		//
		parameter<string> id;
		//
		
		unit<uint32> polydomain := ='select_uint32_with_org_rel(Impl/combine/UnionData_Uint2=='+id+'b)'
		{
			parameter<float32>  gridsize := 25f;
		
			attribute<rdc_meter> point_rdc       := org_rel[rdc_meter];
			attribute<rdc_meter> geometry (poly) := points2sequence(pointset/point, pointset/sequence, pointset/ordinal);

			unit<uint32> pointset := union_unit(.,.,.,.,.)
			{
				attribute<rdc_meter>    point    := union_data(.
				  , point_rdc                                         		// left top 
				  , point_rdc + point_yx(gridsize, 0[meter], rdc_meter)		// right top 
				  , point_rdc + point_yx(gridsize, -gridsize, rdc_meter)	// right bottom 
				  , point_rdc + point_yx(0[meter], -gridsize, rdc_meter)	// left bottom 
				  , point_rdc                                         		// left top 
				);
				attribute<..>     sequence := union_data(., id(..), id(..), id(..), id(..), id(..))[uint32];
				attribute<uint32> ordinal  := union_data(., const(0,..), const(1,..), const(2,..), const(3,..), const(4,..));
			}
			
			attribute<rdc_meter> geometry_boundingbox (poly) := points2sequence(pointset/point, pointset/sequence, pointset/ordinal)
			{
				parameter<meter>  PenWorldWidth := 5000[meter]    , DialogType = "PenWorldWidth";
			}
		}
	}
}