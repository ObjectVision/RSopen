Template Combine2bestandenT
{
	parameter<string> bestandsnaam1;
	parameter<string> bestandsnaam2;
	parameter<string> label1;
	parameter<string> label2;
	//
	
	unit<uint8> bestand: NrOfRows = 2
	{
		attribute<string> Label: ['VFalse','VTrue'];
		attribute<string> Name := const(label1, .);
	}
	
	unit<uint8> combine2K := combine_uint8(bestand,bestand)
	{
		attribute<uint8>   id         := id(.);
		attribute<string>  idstring   := string(id);
		attribute<string>  Prefixid   := 'Nr' + idstring;
		
		attribute<string>  FirstFile    := const(label1, bestand)[first_rel];
		attribute<string>  SecondFile   := const(label2, bestand)[second_rel];

		attribute<string>  Label0       : ['Allebei_niet', '@1@_niet_@2@_wel', '@1@_wel_@2@_niet', 'Beide_wel'];
		attribute<string>  Label        := replace(label0, '@1@', FirstFile, '@2@', SecondFile); 
		attribute<string>  name         := Label;
		attribute<uint32>  BrushColor   : [rgb(255,255,255),rgb(255,0,0),rgb(0,255,0),rgb(0,0,0)], DialogType = "BrushColor";
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	container PD := for_each_ne(combine2K/Prefixid, 'G2V('+quote(combine2K/idstring)+')');

	container OverlayGrids
	{
		attribute<bestand> bool1 (AdminDomain) :== bestandsnaam1 + '[bestand]'; 
		attribute<bestand> bool2 (AdminDomain) :== bestandsnaam2 + '[bestand]';
	}

	unit<uint8> OverlayRegios: NrOfRows = 2
	{
		attribute<string> namen: ['bool1', 'bool2'];
	}

	unit<uint16> combine:= overlay(OverlayRegios/namen, AdminDomain, OverlayGrids)
	{
		attribute<uint16> id     := id(.);
		attribute<string> Label1 := bestand/Label[bool1];
		attribute<string> Label2 := bestand/Label[bool2];
			
		attribute<string>    Label    := Label1 + "_" + Label2;
		attribute<uint64>    count    := pcount(UnionData);
		attribute<float32> 	 area_ha  := count[float32]*AdminDomain/NrHaPerCell;
		attribute<km2>       area_km2 := count[float32]*AdminDomain/NrHaPerCell[km2];
	}
	
	attribute<combine2K> Result (AdminDomain) := combine_Data(combine2K, OverlayGrids/bool1, OverlayGrids/bool2);//, StorageReadOnly = "False", StorageName  = "= '%LocalDataProjDir%/PlanMonitor2024/vergelijk/'+Variant+'/aantasting.tif'";		
	
	
	Template G2V
	{
		//
		parameter<string> id;
		//
		
		unit<uint32> polydomain := ='select_uint32_with_org_rel(Impl/Result=='+id+'b)'
		{
			parameter<float64>  gridsize := 25d;
		
			attribute<rdc_meter> point_rdc       := org_rel[rdc_meter];
			attribute<rdc_meter> geometry (poly) := points2sequence(pointset/point, pointset/sequence, pointset/ordinal);

			unit<uint32> pointset := union_unit(.,.,.,.,.)
			{
				attribute<rdc_meter>    point    := union_data(.
				  , point_rdc                                         		// left top 
				  , point_rdc + point_yx(gridsize, 0[meter_f64], rdc_meter)		// right top 
				  , point_rdc + point_yx(gridsize, -gridsize, rdc_meter)	// right bottom 
				  , point_rdc + point_yx(0[meter_f64], -gridsize, rdc_meter)	// left bottom 
				  , point_rdc                                         		// left top 
				);
				attribute<..>     sequence := union_data(., id(..), id(..), id(..), id(..), id(..))[uint32];
				attribute<uint32> ordinal  := union_data(., const(0,..), const(1,..), const(2,..), const(3,..), const(4,..));
			}
			
			attribute<rdc_meter> geometry_boundingbox (poly) := points2sequence(pointset/point, pointset/sequence, pointset/ordinal)
			{
				parameter<meter>  PenWorldWidth := 5000[meter]    , DialogType = "PenWorldWidth";
			}
		}
	}
}