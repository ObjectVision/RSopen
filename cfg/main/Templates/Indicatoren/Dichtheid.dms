container Dichtheid
{
	unit<uint32> Regio := SourceData/RegioIndelingen/Provincie;
	
	container Wonen
	{
		attribute<bool> AllocatieHeeftPlaatsgevonden (AdminDomain) := Impl/StandVar/SubSector/sector_rel[Stand/Subsector_rel] == /Classifications/Actor/Sector/V/Wonen;
		
		attribute<woning> Aantal_Woningen_Totaal (AdminDomain) := Stand/Aantal_Woningen_Totaal
		{
			attribute<Woning> WaarAllocatieHeeftPlaatsgevonden (AdminDomain) := . / float32(AllocatieHeeftPlaatsgevonden);
		}
		
		parameter <Woning_ha> Per_NL := sum(Aantal_Woningen_Totaal/WaarAllocatieHeeftPlaatsgevonden) / sum(float32(AllocatieHeeftPlaatsgevonden) * AdminDomain/NrHaPerCell);
		
		attribute<Woning_ha> Per_Regio (Regio) := sum(Aantal_Woningen_Totaal/WaarAllocatieHeeftPlaatsgevonden, Regio/Per_AdminDomain) / sum(float32(AllocatieHeeftPlaatsgevonden) * AdminDomain/NrHaPerCell, Regio/Per_AdminDomain);
	}
	
	container Werken
	{
		attribute<bool> AllocatieHeeftPlaatsgevonden (AdminDomain) := Impl/StandVar/SubSector/sector_rel[Stand/Subsector_rel] == /Classifications/Actor/Sector/V/Werken;
		
		container Banen_ha
		{
			attribute<Job> Banen_Totaal (AdminDomain) := Stand/Aantal_Banen_Totaal
			{
				attribute<Job> WaarAllocatieHeeftPlaatsgevonden (AdminDomain) := . / float32(AllocatieHeeftPlaatsgevonden);
			}
			
			parameter <Job_ha> Per_NL := sum(Banen_Totaal/WaarAllocatieHeeftPlaatsgevonden) / sum(float32(AllocatieHeeftPlaatsgevonden) * AdminDomain/NrHaPerCell);
			
			attribute<Job_ha> Per_Regio (Regio) := sum(Banen_Totaal/WaarAllocatieHeeftPlaatsgevonden, Regio/Per_AdminDomain) / sum(float32(AllocatieHeeftPlaatsgevonden) * AdminDomain/NrHaPerCell, Regio/Per_AdminDomain);
		}
		
		container PandFootprint_ha
		{
			attribute<meter2> m2PandFootprint_Totaal (AdminDomain) := Stand/m2PandFootprint_Totaal
			{
				attribute<meter2> WaarAllocatieHeeftPlaatsgevonden (AdminDomain) := . / float32(AllocatieHeeftPlaatsgevonden);
			}
			
			parameter <m2_ha> Per_NL := sum(m2PandFootprint_Totaal/WaarAllocatieHeeftPlaatsgevonden) / sum(float32(AllocatieHeeftPlaatsgevonden) * AdminDomain/NrHaPerCell);
			
			attribute<m2_ha> Per_Regio (Regio) := sum(m2PandFootprint_Totaal/WaarAllocatieHeeftPlaatsgevonden, Regio/Per_AdminDomain) / sum(float32(AllocatieHeeftPlaatsgevonden) * AdminDomain/NrHaPerCell, Regio/Per_AdminDomain);
		}
		
		container Banen_m2
		{
			attribute<job_m2PandFootprint> Per_AdminDomain (AdminDomain) := Banen_ha/Banen_Totaal/WaarAllocatieHeeftPlaatsgevonden / PandFootprint_ha/m2PandFootprint_Totaal/WaarAllocatieHeeftPlaatsgevonden;
			
			parameter <job_m2PandFootprint> Per_NL := mean(Per_AdminDomain);
			
			attribute<job_m2PandFootprint> Per_Regio (Regio) := mean(Per_AdminDomain, Regio/Per_AdminDomain);
		}
	}
}