Template Claims_TargetUnits_T
: Descr = "Converteer Tigris claims in org domain (LMS) naar target allocatie domains"
{
	parameter<ZichtjaarxTXLClaimsxCase> id;
	unit<UInt32> ZichtjaarxTXLClaimsxCase;
	//
	
	parameter<String> Scenario_name    := CaseClassifications/ZichtjaarxTXLClaimsxCase/Scenario_name[id];
	parameter<String> Variant_name     := CaseClassifications/ZichtjaarxTXLClaimsxCase/Variant_name[id];
	parameter<String> TXLClaims_ref    := CaseClassifications/ZichtjaarxTXLClaimsxCase/TXLClaims_ref[id];
	parameter<String> Zichtjaar_name   := CaseClassifications/ZichtjaarxTXLClaimsxCase/Zichtjaar_name[id];
	parameter<String> Sector_name      := CaseClassifications/ZichtjaarxTXLClaimsxCase/Sector_name[id];
	unit<UInt8>       AllocRegio       := /Classifications/Modellering/AllocRegiosK;
	unit<UInt8>       SectorAllocRegio := CaseClassifications/Actor/SectorAllocRegio;
	
	parameter<String> SrcStr :=
		replace(
			'WonenEnWerken/Cases/@S@/@V@/Tables/@T@/Zichtjaren/@J@/Attributes',
			'@S@', Scenario_name,
			'@V@', Variant_name,
			'@T@', TXLClaims_ref,
			'@J@', Zichtjaar_name
		);
	
	unit<UInt8> AttrUnit        := = CaseClassifications/ZichtjaarxTXLClaimsxCase/Attr_ref[id];
	unit<UInt8> Aggregatie_Unit := = AttrUnit/Aggregatie_Unit[0b];
	unit<Int32> TargetValUnit   := = CaseClassifications/ZichtjaarxTXLClaimsxCase/TargetValUnitRef[id];
	
	unit<UInt32> LMS := RegioIndelingen/LMSsubzone;
	
	container Results_in_Org := 
		for_each_nedv(
			AttrUnit/name
			, 'union_data(LMS, '+SrcStr+'/'+AttrUnit/TXLTbl_Ref+'[TargetValUnit])'
			, LMS
			, TargetValUnit
		);
	
	container Results := 
		for_each_nedv(
			Aggregatie_Unit/name
			, asList('Results_in_Org/'+AttrUnit/name, ' + ' , AttrUnit/Aggregatie_rel)
			, LMS
			, TargetValUnit
		);
		
	container AllocRegios := for_each_ne(AllocRegio/name, 'AllocRegio_T('+string(id(AllocRegio))+'[AllocRegio])');
	
	Template AllocRegio_T
	{
		parameter<AllocRegio> AllocRegio_rel;
		
		parameter<String> AllocRegio_name := AllocRegio/name[AllocRegio_rel];
		parameter<String> AllocRegio_path := AllocRegio/path[AllocRegio_rel];
		
		unit<UInt32> RegioUnit := = AllocRegio_path
		{
			attribute<rdc_meter> SrcRegio_Centroid    (WonenEnWerken/SrcRegio) := WonenEnWerken/SrcRegio/centroid;
			attribute<.>         per_TigrisXLSrcRegio (WonenEnWerken/SrcRegio) := point_in_polygon(SrcRegio_centroid, geometry);
			
		}
		
		parameter<String> CalcStr         := 'sum('+Zichtjaar_name+'/@X@/'+Scenario_name+'/'+Variant_name+'/Results/@Y@, RegioUnit/per_TigrisXLSrcRegio)';
		parameter<String> ClaimDir        := '%RSo_DataDir%/Claims/TXL_'+ModelParameters/TIGRIS_filedate;
		parameter<String> File_csv_name   := ClaimDir +'/'+Scenario_name+'/'+Variant_name+'/'+Zichtjaar_name+'/'+AllocRegio_name;
		
		container Write_Wonen :=
			for_each_nedv(
				  WP2/name
				, replace(CalcStr, '@X@', 'Woningen', '@Y@', WP2/name)+'[Woning]'
				, RegioUnit
				, Woning
			), StorageName = "=File_csv_name+'/Wonen.csv'", StorageType = "gdalwrite.vect";

		container Write_Werken :=
			for_each_nedv(
				Jobs6/name,
				replace(CalcStr, '@X@', 'Banen', '@Y@', Jobs6/name)+'[job]',
				RegioUnit, job
			), StorageName = "=File_csv_name+'/Werken.csv'", StorageType = "gdalwrite.vect";
			
		Container Write := =lowercase(Sector_name) == lowercase('Werken') ? 'Write_Werken' : 'Write_Wonen';
	}
} 

