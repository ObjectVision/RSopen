Template Zichtjaar_T
: Descr = ""
{
	parameter<Time/Zichtjaar> id;
	container Claims;
	container CaseClassifications;
	//
	
	parameter<String>    Zichtjaar_name   := Time/Zichtjaar/name[id];
	unit<UInt8>          AllocRegio       := /Classifications/Modellering/AllocRegiosK;
	unit<UInt8>          SectorAllocRegio := CaseClassifications/Actor/SectorAllocRegio;
	
	container SectorAllocRegios := for_each_ne(SectorAllocRegio/name, 'AllocRegios/'+SectorAllocRegio/AllocRegio_name+'/'+SectorAllocRegio/Sector_name);
	
	container AllocRegios := 
		for_each_ne(
			AllocRegio/name
			, 'AllocRegio_T('+string(id(AllocRegio))+'[AllocRegio])'
		);
	
	Template AllocRegio_T
	{
		parameter<AllocRegio> AllocRegio_rel;
		
		parameter<String> AllocRegio_name := AllocRegio/name[AllocRegio_rel];
		parameter<String> AllocRegio_path := AllocRegio/path[AllocRegio_rel];
		
		unit<UInt32> RegioUnit := = AllocRegio_path
		{
			attribute<rdc_meter> geometry (poly) := =AllocRegio_path+'/geometry';
			attribute<.>          per_TigrisXLSrcRegio (PrivData/Claims/WonenEnWerken/SrcRegio) := point_in_polygon(PrivData/Claims/WonenEnWerken/SrcRegio/centroid, geometry);
			attribute<.>          per_Bevolkingskern_2011 (RegioIndelingen/Bevolkingskern_2011) := point_in_polygon(centroid_or_mid(RegioIndelingen/Bevolkingskern_2011/geometry), geometry);
			
			attribute<Bool> Is300kPlusRegio := any(RegioIndelingen/Bevolkingskern_2011/isMeerdan300Kinw, per_Bevolkingskern_2011);
			attribute<Bool> Is75kPlusRegio  := any(RegioIndelingen/Bevolkingskern_2011/isMeerdan75Kinw, per_Bevolkingskern_2011) && !Is300kPlusRegio;
			attribute<Bool> Is50kPlusRegio  := any(RegioIndelingen/Bevolkingskern_2011/isMeerdan50Kinw, per_Bevolkingskern_2011) && !(Is75kPlusRegio || Is300kPlusRegio);
			attribute<Bool> IsRestRegio     := !(Is300kPlusRegio || Is75kPlusRegio || Is50kPlusRegio);
		}
		
		unit<UInt32> RegioUnit_Verblijfsrecreatie := = 'RegioIndelingen/CBS/Last/'+VariantParameters/Recreatie_AllocRegio_name;
		
		parameter<String> CalcStr := 'sum(src/'+Zichtjaar_name+'/@X@/'+Scenario_name+'/'+Variant_name+'/Results/@Y@, RegioUnit/per_TigrisXLSrcRegio)';

		container Read_Wonen_WP2xVSSH_fss
		: StorageName = "='%LocalDataProjDir%/BaseData/Vastgoed/WP2xVSSH_Proxy/'+AllocRegio_name+'/'+/ModelParameters/StudyArea+'.fss'"
		, StorageReadOnly = "TRUE"
		{
			attribute<Woning> eengezins_VrijeSector_Proxy  (RegioUnit);
			attribute<Woning> eengezins_SocialeHuur_Proxy  (RegioUnit);
			attribute<Woning> meergezins_VrijeSector_Proxy (RegioUnit);
			attribute<Woning> meergezins_SocialeHuur_Proxy (RegioUnit);
			attribute<Woning> eengezins_Proxy              (RegioUnit);
			attribute<Woning> meergezins_Proxy             (RegioUnit);
			
			attribute<Woning> eengezins_VrijeSector (RegioUnit) := Read_Wonen_CSV/eengezins  * eengezins_VrijeSector_Proxy  / eengezins_Proxy;
			attribute<Woning> eengezins_SocialeHuur (RegioUnit) := Read_Wonen_CSV/eengezins  * eengezins_SocialeHuur_Proxy  / eengezins_Proxy;
			attribute<Woning> meergezins_VrijeSector(RegioUnit) := Read_Wonen_CSV/meergezins * meergezins_VrijeSector_Proxy / meergezins_Proxy;
			attribute<Woning> meergezins_SocialeHuur(RegioUnit) := Read_Wonen_CSV/meergezins * meergezins_SocialeHuur_Proxy / meergezins_Proxy;
		}

		container Wonen := Read_Wonen_WP2xVSSH_fss
		{
			attribute<Woning> Totaal (RegioUnit) := ='add('+asList(WP2xVSSH/name,',')+')';
		}		
		
		container Werken := Read_werken_CSV;

		container Verblijfsrecreatie 
		{
			attribute<Float32> Totaal       (RegioUnit_Verblijfsrecreatie) := Objecten;
			attribute<Float32> Objecten     (RegioUnit_Verblijfsrecreatie) := ='/BaseData/StartState/Verblijfsrecreatie_Trends/Trends/Read_Betas_Objecten/Objecten 
														+ (/BaseData/StartState/Verblijfsrecreatie_Trends/Trends/Read_Betas_Objecten/Objecten_β * ('+right(string(Zichtjaar_name),4)+'f-'+right(string(/ModelParameters/BAG_RecentYear),4)+'[float32]))
														* VariantParameters/VariantK/ClaimGroeiFActorTovTrendObjecten[VariantParameters/VariantK/V/'+Variant_name+']';
			attribute<Float32> BrutoOpp     (RegioUnit_Verblijfsrecreatie) := ='/BaseData/StartState/Verblijfsrecreatie_Trends/Trends/Read_Betas_Objecten/BrutoOpp 
														+ (/BaseData/StartState/Verblijfsrecreatie_Trends/Trends/Read_Betas_Objecten/BrutoOpp_β * ('+right(string(Zichtjaar_name),4)+'f-'+right(string(/ModelParameters/BBG_Verblijfsrecreatie_Year),4)+'[float32]))
														* VariantParameters/VariantK/ClaimGroeiFActorTovTrendHa[VariantParameters/VariantK/V/'+Variant_name+']';
			attribute<vbo_ha>  Object_perHa (RegioUnit_Verblijfsrecreatie) := Objecten / BrutoOpp;
		}
		
		container Wind
		{
			parameter<String> Variant := = 'VariantParameters/VariantK/RegEnergieVerdelingWind[VariantParameters/VariantK/V/'+Variant_name+']';
			attribute<Bool> RegioUnitSub_Condition (RegioUnit) := = RegioUnit/HeeftBuitengebied ? 'id(RegioUnit) <> RegioUnit/V/Buitengebied' : 'IsDefined(id(RegioUnit))';
			
			unit<UInt32> RegioUnitSub := select_with_attr_by_cond(RegioUnit, RegioUnitSub_Condition)
			{
				attribute<.> Per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
				attribute<.> Per_CompactedAdminDomain (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, Per_AdminDomain);
			}
			
			container Nationaal
			{
				container Beleid
				{
					unit<UInt8> EK :=  ModelParameters/Wind/Claims;
					unit<UInt8> Zichtjaar := Time/Zichtjaar
					{
						attribute<GW> OpLandOfBinnenwater := rjoin(YearRange_rel, EK/Jaar, EK/OpLandOfBinnenwater);
						attribute<GW> OpLandOfBinnenwater_Hoog := rjoin(YearRange_rel, EK/Jaar, EK/OpLandOfBinnenwater_Hoog);
					}
				}
				
				container DitScenario
				{
					container Totaal
					{
						parameter<GW> Y2030 := min_elem(Y2060, Beleid/EK/OpLandOfBinnenwater[Beleid/EK/v/Y2030]);
						parameter<GW> Y2040 := Y2030 + ((Y2060 - Y2030) / 3f);
						parameter<GW> Y2050 := Y2040 + ((Y2060 - Y2030) / 3f);
						parameter<GW> Y2060 := = 'VariantParameters/VariantK/NationaalVermogenWindOpLandEnBinnenwater2060[VariantParameters/VariantK/V/'+Variant_name+']';
					}
					
					unit<UInt8> EK := Beleid/EK
					{
						attribute<GW> OpLandOfBinnenwater := union_data(., DitScenario/Totaal/Y2030, DitScenario/Totaal/Y2040, DitScenario/Totaal/Y2050, DitScenario/Totaal/Y2060);
					}
					
					unit<UInt8> Zichtjaar := Beleid/Zichtjaar
					{
						attribute<GW> OpLandOfBinnenwater := rjoin(YearRange_rel, EK/Jaar, EK/OpLandOfBinnenwater);
					}
				}
			}
			
			container Regionaal
			{
				attribute<MW> Evenredig (RegioUnitSub) := = '((Nationaal/DitScenario/Zichtjaar/OpLandOfBinnenwater[id])[MW] * const(1[float32] / #RegioUnitSub[float32], RegioUnitSub))[MW]';
				attribute<MW> Ruimte    (RegioUnitSub) := = '((Nationaal/DitScenario/Zichtjaar/OpLandOfBinnenwater[id])[MW] 
																	* (sum_uint32(VariantData/Zeef/'+Zichtjaar_name+'/SectorxSubsectoren/Wind/Totaal/IsBeschikbaar, RegioUnitSub/Per_CompactedAdminDomain)[float32] 
																		/ sum(sum_uint32(VariantData/Zeef/'+Zichtjaar_name+'/SectorxSubsectoren/Wind/Totaal/IsBeschikbaar, RegioUnitSub/Per_CompactedAdminDomain)[float32])))[MW]';
				attribute<MW> Vraag     (RegioUnitSub) := = '((Nationaal/DitScenario/Zichtjaar/OpLandOfBinnenwater[id])[MW] * (sum(BaseData/StartState/VBOs_ModelJaar, RegioUnitSub/Per_AdminDomain)[float32] / sum(sum(BaseData/StartState/VBOs_ModelJaar, RegioUnitSub/Per_AdminDomain)[float32])[float32]))[MW]';
			}
			
			attribute<MW> Totaal0 (RegioUnit) := = 'recollect_by_cond(RegioUnitSub_Condition, Regionaal/'+Variant+')';
			
			
			attribute<MW> Totaal  (RegioUnit) := =lowercase(ModelParameters/StudyArea) != lowercase('Friesland') ? 'Totaal0' : 'Totaal_Friesland';
			
			attribute<MW> Totaal_Friesland (RegioUnit) := ='switch(
													 case(lowercase(ModelParameters/StudyArea) == lowercase(''Friesland'') && id(RegioUnit) == RegioUnit/v/Friesland, ModelParameters/Wind/Vermogen_Friesland_'+Zichtjaar_name+')
													,case(lowercase(ModelParameters/StudyArea) == lowercase(''Friesland''), 0[MW])
													, Totaal0
													)';
													
		}
		
		container Zon
		{
			parameter<String> Variant := = 'VariantParameters/VariantK/RegionaleVerdelingZon[VariantParameters/VariantK/V/'+Variant_name+']';
			
			attribute<Bool> RegioUnitSub_Condition (RegioUnit) := = RegioUnit/HeeftBuitengebied ? 'id(RegioUnit) <> RegioUnit/V/Buitengebied' : 'IsDefined(id(RegioUnit))';
			
			unit<UInt32> RegioUnitSub := select_with_attr_by_cond(RegioUnit, RegioUnitSub_Condition)
			{
				attribute<.> Per_AdminDomain (AdminDomain) := poly2grid(geometry, AdminDomain);
			}
			
			container Nationaal
			{
				parameter<TWh> Vermogen2030 := /ModelParameters/Zon/NationaalVermogenZon2030;
				parameter<TWh> Vermogen2040 := = '/VariantParameters/VariantK/NationaalVermogenZon2040[/VariantParameters/VariantK/V/'+/Variant_name+']';
				parameter<TWh> Vermogen2050 := = '/VariantParameters/VariantK/NationaalVermogenZon2050[/VariantParameters/VariantK/V/'+/Variant_name+']';
				parameter<TWh> Vermogen2060 := = '/VariantParameters/VariantK/NationaalVermogenZon2060[/VariantParameters/VariantK/V/'+/Variant_name+']';
				
				unit<UInt8> Zichtjaar := Time/Zichtjaar
				{
					attribute<TWh> Src := ='union_data(., '+asItemList('Vermogen'+string(Time/Zichtjaar/YearRange_rel))+')';
					attribute<GW> Resultaat := Src[GWh] / ModelParameters/Zon/Vollasturen_zonnepaneel;
				}
			}
			
			container Regionaal
			{
				attribute<MW> Evenredig (RegioUnitSub) := = '((Nationaal/Zichtjaar/Resultaat[id])[MW] * const(1[float32] / #RegioUnitSub[float32], RegioUnitSub))[MW]';
																// , StorageName = "='%LocalDataProjDir%/VariantData/Claims/Zon/Regionaal_Evenredig_'+Zichtjaar_name+'_Nederland.fss'";
				attribute<MW> Ruimte    (RegioUnitSub) := = '((Nationaal/Zichtjaar/Resultaat[id])[MW] 
																* (
																	sum_uint32(
																		VariantData/Zeef/'+Zichtjaar_name+'/SectorxSubsectoren/Zon/Totaal/IsBeschikbaar
																		, collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain , RegioUnitSub/Per_AdminDomain ) 
																	)[float32] 
																	/ 
																	sum(
																		sum_uint32(
																			VariantData/Zeef/'+Zichtjaar_name+'/SectorxSubsectoren/Zon/Totaal/IsBeschikbaar
																			, collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain , RegioUnitSub/Per_AdminDomain )
																		)[float32]
																	)
																  )
																)[MW]';
																// , StorageName = "='%LocalDataProjDir%/VariantData/Claims/Zon/Regionaal_Ruimte_'+Zichtjaar_name+'_Nederland.fss'";
				attribute<MW> Vraag     (RegioUnitSub) := = '((Nationaal/Zichtjaar/Resultaat[id])[MW] * (sum(BaseData/StartState/VBOs_ModelJaar, RegioUnitSub/per_AdminDomain)[float32] 
																	/ sum(sum(BaseData/StartState/VBOs_ModelJaar, RegioUnitSub/per_AdminDomain)[float32])[float32]))[MW]';
																// , StorageName = "='%LocalDataProjDir%/VariantData/Claims/Zon/Regionaal_Vraag_'+Zichtjaar_name+'_Nederland.fss'";
			}
			
			attribute<MW> Totaal0 (RegioUnit) := ='recollect_by_cond(RegioUnitSub_Condition, Regionaal/'+Variant+')';
			attribute<MW> Totaal_Friesland  (RegioUnit) := ='switch(
													 case(ModelParameters/StudyArea == ''Friesland'' && id(RegioUnit) == RegioUnit/v/Friesland, ModelParameters/Zon/Vermogen_Friesland_'+Zichtjaar_name+')
													,case(ModelParameters/StudyArea == ''Friesland'', 0[MW])
													, Totaal0
													)';
			attribute<MW> Totaal  (RegioUnit) := =ModelParameters/StudyArea != 'Friesland' ? 'Totaal0' : 'Totaal_Friesland';
													
		}
		
		container Landbouw
		{
			attribute<Bool> ExogeenOpleggen (CompactedAdminDomain) := IsDefined(collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, VariantData/ExogeenOpleggen/Totaal));
			
			container StartYear := 
				for_each_nedv(
					  Actor/LandbouwKlasses/name
					, VariantK/ExogeenOpleggen[/Variant_rel]
						? 'sum(float32(NOT(ExogeenOpleggen)) * VariantData/StateBasisjaar/Landbouw/'+Actor/LandbouwKlasses/name+', RegioUnit/Per_CompactedAdminDomain)'
						: 'sum(/VariantData/StateBasisjaar/Landbouw/'+Actor/LandbouwKlasses/name+', RegioUnit/Per_CompactedAdminDomain)'
					, RegioUnit
					, ha
				);
				
			container StartYear_minusNietBeschikbaar := 
				for_each_nedv(
					  Actor/LandbouwKlasses/name
					, VariantK/ExogeenOpleggen[/Variant_rel]
						? 'sum(float32(NOT(ExogeenOpleggen)) * float32(VariantData/Zeef/Basisjaar/Landbouw/Rietteelt/IsBeschikbaar) * VariantData/StateBasisjaar/Landbouw/'+Actor/LandbouwKlasses/name+', RegioUnit/Per_CompactedAdminDomain)'
						: 'sum(float32(VariantData/Zeef/Basisjaar/Landbouw/Rietteelt/IsBeschikbaar) * VariantData/StateBasisjaar/Landbouw/'+Actor/LandbouwKlasses/name+', RegioUnit/Per_CompactedAdminDomain)'
					, RegioUnit
					, ha
				);
			
			container Maxclaims_Defined := 
				for_each_nedv(
					  Actor/LandbouwKlasses/name
					, 'StartYear/'+Actor/LandbouwKlasses/name+' * (1f + ModelParameters/Landbouw/Landbouw_Claim_Growth)'
					, RegioUnit
					, ha
				)
			{
				attribute<Ha> NonLandbouw (RegioUnit) := area(RegioUnit/geometry, meter2)[ha];
			}
			
			container Maxclaims_Undefined := 
				for_each_nedv(
					  Actor/LandbouwKlasses/name
					, 'const(null_f, RegioUnit, ha)'
					, RegioUnit
					, ha
				);
			
			container Minclaims_Defined0 := 
				for_each_nedv(
					  Actor/LandbouwKlasses/name
					, 'StartYear/'+Actor/LandbouwKlasses/name+' * (1f - ModelParameters/Landbouw/Landbouw_Claim_Growth)'
					, RegioUnit
					, ha
				);
			
			container Minclaims_Defined := 
				for_each_nedv(
					  Actor/LandbouwKlasses/name
					, lowercase(Actor/LandbouwKlasses/name) == lowercase('NonLandbouw') ? 'const(0[ha], RegioUnit)' : 'Minclaims_Defined0/'+Actor/LandbouwKlasses/name
					, RegioUnit
					, ha
				);
			
			container MinClaims_zero := 
				for_each_nedv(
					  Actor/LandbouwKlasses/name
					, 'const(0[ha], RegioUnit, ha)'
					, RegioUnit
					, ha
				);
			
			container MinClaims_manual :=
				for_each_nedv(
					Actor/LandbouwKlasses/name
					, '=ModelParameters/Landbouw/'+/VariantParameters/VariantK/Claim_agrarisch_Variant[Variant_rel]+'/MinClaims_manual/'+Actor/LandbouwKlasses/name
					, RegioUnit
					, ha
				)
			{
				attribute<ha> NonLandbouw (RegioUnit) := const(0[ha], RegioUnit, ha);
			}

			container MaxClaims_manual :=
				for_each_nedv(
					Actor/LandbouwKlasses/name
					, '=ModelParameters/Landbouw/'+/VariantParameters/VariantK/Claim_agrarisch_Variant[Variant_rel]+'/MaxClaims_manual/'+Actor/LandbouwKlasses/name+''
					, RegioUnit
					, ha
				)
			{
				attribute<Ha> NonLandbouw (RegioUnit) := area(RegioUnit/geometry, meter2_f64)[ha] + 1000[ha];
			}
			
		
			container MaxClaims := =lowercase(ModelParameters/Landbouw/ClaimVariant) == lowercase('Manual')
										? 'MaxClaims_manual' 
										: lowercase(ModelParameters/Landbouw/ClaimVariant) == lowercase('ConstGrowthMinMax')
											? 'Maxclaims_Defined' 
											: 'Maxclaims_Undefined';
			
			container MinClaims := =lowercase(ModelParameters/Landbouw/ClaimVariant) == lowercase('Manual') 
										? 'MinClaims_manual' 
										: lowercase(ModelParameters/Landbouw/ClaimVariant) == lowercase('ConstGrowthMinMax')
											? 'Minclaims_Defined' 
											: 'MinClaims_zero';
		}
		
		parameter<String> ClaimDir        := '%RSo_DataDir%/Claims/TXL_'+ModelParameters/TIGRIS_Filedate;
		parameter<String> File_csv_name   := ClaimDir +'/'+/Scenario_name+'/'+/VariantParameters/VariantK/ClaimVariantName[/Variant_rel]+'/'+Zichtjaar_name+'/'+AllocRegio_name;
		
		container Read_Wonen_CSV :=
		for_each_ndv(
				WP2/name
				, RegioUnit
				, Woning
			), StorageName = "=File_csv_name+'/Wonen.csv'", StorageType = "gdal.vect", StorageReadOnly = "TRUE";
		
		container Read_Werken_CSV :=
		for_each_ndv(
				Jobs6/name
				, RegioUnit
				, job
			), StorageName = "=File_csv_name+'/Werken.csv'", StorageType = "gdal.vect", StorageReadOnly = "TRUE"
		{
			attribute<job> Totaal   (RegioUnit) := ='add('+asList(Jobs6/name,',')+')';
		}
	}
}