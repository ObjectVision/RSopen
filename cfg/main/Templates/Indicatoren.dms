Template Indicatoren_T
: using = "classifications/modellering"
{
	parameter<String> Zichtjaar;
	container         PrevIndicatoren;
	parameter<String> Scenario_name;
	parameter<String> Variant_name;
	//
	
	parameter<String> Casus_name := Scenario_name + '_' + Variant_name;
	
	container PrevStand := PrevIndicatoren/Stand;
	container StandBasisjaar := Basisjaar/Stand;
	container ThisYear := .;
	container Impl
	{
		container Claims := ='VariantData/Claims/'+zichtjaar;
		
		unit<UInt32> Subsector := Classifications/Actor/Sector/xSubsector;
		unit<UInt32> StandVar  := CaseClassifications/StandVar
		{
			attribute<String> quantity_name := is_quantity ? name : '';
			unit<UInt8> OP := CaseClassifications/StandVar/OP;
		}
		
		parameter<string> AllocatieFileName := replace(ModelParameters/Advanced/AllocatieFileName, '@CASUS@', Casus_name, '@JAAR@', Zichtjaar, '@SA@', ModelParameters/StudyArea, '@SS@', string(#/Classifications/Actor/Sector/xSubsector));

		container Stand_with_path :=
			for_each_ndvna(
				StandVar/path
				, AdminDomain
				, StandVar
				, StandVar/unit_name
				, replace(AllocatieFileName, '@STANDPATH@', StandVar/path)
			),	StorageReadOnly = "True";
	}
	
	attribute<Classifications/Actor/Sector>                       Sector_rel                    (AdminDomain):= Classifications/Actor/Sector/XSubsector/Sector_rel[Impl/Stand_with_path/Subsector_rel];
	attribute<Bool>                                               Sector_rel_Verstedelijking    (AdminDomain):= Sector_rel == /Classifications/Actor/Sector/V/Wonen || 
																	Sector_rel == /Classifications/Actor/Sector/V/Werken || 
																	Sector_rel == /Classifications/Actor/Sector/V/Verblijfsrecreatie;
																  
	attribute<Bool> Sector_rel_Verstedelijking_Buitenstedelijk  (AdminDomain):= !/SourceData/RegioIndelingen/Bevolkingskern_2011/Is_BBG_AdminDomain ? Sector_rel_Verstedelijking : false;
	
	container Stand :=
		for_each_nedvnl(
			Impl/StandVar/name
			, 'Impl/Stand_with_path/'+Impl/StandVar/path
			, AdminDomain
			, Impl/StandVar
			, Impl/StandVar/unit_name
			, replace(Impl/StandVar/name, '_', ' ')
		)
	{
		attribute<Actor/Sector> Sector_rel               (AdminDomain) := Actor/Sector/XSubsector/Sector_rel[Subsector_rel];
	
		attribute<Woning>       Aantal_Woningen_Totaal   (AdminDomain) := = 'add('+asItemList('Aantal_Woningen_'+/Classifications/Vastgoed/WP2xVSSH/name)+')';
		attribute<Job>     Aantal_Banen_Totaal      (AdminDomain) := = 'add('+asItemList('Banen_'+/Classifications/Actor/Jobs6/name)+')';
		attribute<meter2>  m2PandFootprint_Totaal   (AdminDomain) := = 'add('+asItemList('m2PandFootprint_'+/Classifications/Actor/Jobs6/name)+')';
		attribute<meter2>  PandFootprint_Werken     (AdminDomain) := m2PandFootprint_Totaal;
	}
	#include<ClaimRealisatie.dms>
	
	container Overflow
	{
		container PerSequence := 
			for_each_ne(
				Sequence_later/name
				, 'PerSequence_T('+quote(Sequence_later/name)+')'
			)
		{
			container Seq_0 := PerSequence_T(first(Sequence_first/name));
		}
		
		Template PerSequence_T 
		{
			parameter<string> SequenceName;
			///
			unit<uint8> SectorAllocRegio := CaseClassifications/Actor/SectorAllocRegio;
			
			container PerSectorAllocRegio := 
				for_each_ne(
					SectorAllocRegio/name
					, 'PerSectorAllocRegio_T('+quote(SectorAllocRegio/name)+')'
				);
		}
		
		Template PerSectorAllocRegio_T 
		{
			parameter<string> SectorAllocRegioName;
			///
			unit<uint32> AllocRegio := =rjoin(SectorAllocRegioName, /VariantParameters/SectorAllocRegio/SectorAllocRegio_name, /VariantParameters/SectorAllocRegio/AllocRegio_path);

			unit<uint32> Read := AllocRegio
			, StorageName = "='%LocalDataDir%/Allocatie/'+Casus_name+'/OverflowNa_'+Zichtjaar+'_'+SequenceName+'_'+SectorAllocRegioName+'.csv'"
			, StorageType = "gdal.vect"
			, StorageReadOnly = "true"
			{
			
			}
			container Result := 
				for_each_nedv(
					Actor/Jobs6/name
					,'Read/'+Actor/Jobs6/name+'[float32]' 
					, AllocRegio
					, Float32
				);
		}	
		

	}
	
	container Overstromingsschade := Templates/SSM2017_Overstromingsschades_T(Zichtjaar), Descr = "SSM Model van Deltares nagebouwd in RuimteScanner; Slager, K. (2016). Technische documentatie SSM2015: functionele en technische ontwerpkeuzen. Deltares rapportage 1230095-004-HYE-0009 dd. november 2016 ";
	container SOMERS_CO2_laagveen := Templates/SOMERS_CO2_T(Zichtjaar), Descr = "Het registratiesysteem SOMERS (Subsurface Organic Matter Emission RegistRation System) is ontwikkeld om de landelijke CO2-uitstoot reductie in het veenweidegebied jaarlijks bij te houden. Met SOMERS 2.0 zijn rekenregels opgesteld om de toekomstige uitstoot te bepalen onder gestandaardiseerde omstandigheden.", URL = "https://www.nobveenweiden.nl/bevindingen-rekenregels/";
	
	container BereikbaarheidGroen := Templates/BereikbaarheidGroen(., quote(Zichtjaar));
	container Landgebruikskaart   := Templates/Landgebruikskaart/Make_Landgebruikskaart_T(Zichtjaar, Stand);
	
	// #include<Gebruiksoppervlak.dms>
	#include<SloopNieuwbouwWonen.dms>
	// #include<Materiaalgebruik.dms>
	#include<Grondgebruik.dms>
	// #include<Inbreiding.dms>
	#include<Dichtheid.dms>
	#include<Verharding.dms>
	#include<Bereikbaarheid.dms>
	#include<DeltaT.dms>
}