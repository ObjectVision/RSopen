Template Dairy_T : using = "Classifications/Landbouw"
{
	parameter<string>           name;
	//
	container                   Parameters                          := ModelParameters/Landbouw;
	container                   ParametersModelType                 := ='ModelParameters/Landbouw/'+name;
	
	attribute<float32>          DDPossible               (rdc_25m) := float32(SourceData/Landbouw/DD30_uit_droogleggingzomer_00), Descr = "Is Deep Draining possible in this scenario?"; 
	attribute<ton_ha_jaarlijks> DDGrassYield             (rdc_25m) := Classifications/Landbouw/DeepDrainageK/DDGrassYield[DeepDrainageVariant] * DDPossible, Descr = "Deep Drainage scenario Grass Yield";
	
	attribute<Eur_Ha_jaarlijks> Conversion_costs_ha_year (rdc_25m) :=	StartYear[YearRange] == EndYear[YearRange] 
																			? const(0[Eur_Ha_jaarlijks], rdc_25m)
																			: -Economic_performance/Conversion_costs[Eur_Ha] / PeriodDuration;
	// attribute<Eur_Ha_jaarlijks> Conversion_costs_ha_year (rdc_100m) :=	StartYear[YearRange] == EndYear[YearRange] 
																			// ? const(0[Eur_Ha_jaarlijks], rdc_100m)
																			// : -Economic_performance/Conversion_costs[Eur_Ha] / PeriodDuration;

	//attribute<Eur_Ha_jaarlijks> NetRevConCosts_ha_year   (rdc_25m) := Conversion_costs_ha_year + economic_performance/Net_revenues_ha;
	attribute<Eur_M2>           totaal_NonAugmented      (rdc_25m) := Economic_performance/Net_revenues * Kapitalisatie/factor - Economic_performance/Conversion_costs;
	attribute<Eur_M2>           totaal                   (rdc_25m) := Totaal_NonAugmented;
	attribute<Eur_M2>           NPV                      (rdc_25m) := Totaal;
				
	attribute<float32>          Suitability              (rdc_25m) := Totaal, Descr = "Uiteindelijke suitability die aan de alloc module wordt meegegeven.";
	
	attribute<Eur_m2_jaarlijks> NetRevenue               (rdc_25m) := Economic_performance/Net_revenues;
	
	container Kapitalisatie := ='Kapitalisatie_T(ModelType/V/'+ name +')';

	container Gras_zonder_herinzaai
	{
		parameter<string>           sub_gewas                       := rjoin('gras_zonder_herinzaaikosten', lowercase(GewasSoortYR/Rotatieklasse), GewasSoortYR/name);
		parameter<GewasSoortYR>     Gewas                           := ='GewasSoortYR/V/'+sub_gewas;
		container                   ParametersSubgewas              := ='Parameters/'+sub_gewas;
		
		attribute<ratio>            Rotation             (rdc_25m) := switch(
																	 case(SourceData/Landbouw/Bodem_HELP_kleiig, ParametersSubgewas/Rotation_BodemK_kleiig)
																	,case(SourceData/Landbouw/Bodem_HELP_zandig, ParametersSubgewas/Rotation_BodemK_zandig) 
																	,0[ratio]);
		attribute<Eur_Ha_jaarlijks> Production_costs     (rdc_25m) := ParametersSubgewas/production_costs * Rotation;   // updaten of speciferen per intensiteitsklasse? // wat zijn dit precies (paper vasco)?
		attribute<float32>          YieldReduction       (rdc_25m) := ='factoren/YieldReduction/Result/'+GewasSoortYR/name[Gewas];
		attribute<ton_ha_jaarlijks> DM_yield             (rdc_25m) := (ParametersModelType/MaxYieldGrass + DDGrassYield) * (1f - YieldReduction) * Rotation, Descr = "Dry matter yield";
		
		attribute<Eur_Ha_jaarlijks> Feed_costs           (rdc_25m) := Production_costs + (DM_yield * ParametersSubgewas/Feeding_costs);
	}
	
	container Gras_met_herinzaai
	{
		parameter<string>           sub_gewas                       := rjoin('gras_met_herinzaaikosten', lowercase(GewasSoortYR/Rotatieklasse), GewasSoortYR/name);
		parameter<GewasSoortYR>     Gewas                           := ='GewasSoortYR/V/'+sub_gewas;
		container                   ParametersSubgewas              := ='Parameters/'+sub_gewas;
		
		attribute<ratio>            Rotation             (rdc_25m) := switch(
																	 case(SourceData/Landbouw/Bodem_HELP_kleiig, ParametersSubgewas/Rotation_BodemK_kleiig)
																	,case(SourceData/Landbouw/Bodem_HELP_zandig, ParametersSubgewas/Rotation_BodemK_zandig) 
																	,0[ratio]);
		attribute<Eur_Ha_jaarlijks> Production_costs     (rdc_25m) := ParametersSubgewas/production_costs * Rotation;   // updaten of speciferen per intensiteitsklasse? // wat zijn dit precies (paper vasco)?
		attribute<float32>          YieldReduction       (rdc_25m) := ='factoren/YieldReduction/Result/'+GewasSoortYR/name[Gewas];
		attribute<ton_ha_jaarlijks> DM_yield             (rdc_25m) := (ParametersModelType/MaxYieldGrass + DDGrassYield) * (1f - YieldReduction) * Rotation, Descr = "Dry matter yield";
		
		attribute<Eur_Ha_jaarlijks> Feed_costs           (rdc_25m) := Production_costs + (DM_yield * ParametersSubgewas/Feeding_costs);
	}
	
	container Snijmais
	{
		parameter<string>           sub_gewas                       := 'Snijmais';
		parameter<GewasSoortYR>     Gewas                           := ='GewasSoortYR/V/'+sub_gewas;
		container                   ParametersSubgewas              := ='Parameters/'+sub_gewas;
		
		attribute<ratio>            Rotation             (rdc_25m) := switch(
																	 case(SourceData/Landbouw/Bodem_HELP_kleiig, ParametersSubgewas/Rotation_BodemK_kleiig)
																	,case(SourceData/Landbouw/Bodem_HELP_zandig, ParametersSubgewas/Rotation_BodemK_zandig) 
																	,0[ratio]);
		attribute<Eur_Ha_jaarlijks> production_costs     (rdc_25m) := switch(
																	 case(SourceData/Landbouw/Bodem_HELP_kleiig, ParametersSubgewas/Production_costs_BodemK_kleiig) 
																	,case(SourceData/Landbouw/Bodem_HELP_zandig, ParametersSubgewas/Production_costs_BodemK_zandig) 
																	,0[Eur_Ha_jaarlijks]) * Rotation;
		attribute<float32>          YieldReduction       (rdc_25m) := ='factoren/YieldReduction/Result/'+GewasSoortYR/name[Gewas];
		attribute<ton_ha_jaarlijks> DM_yield             (rdc_25m) := switch(
																	 case(SourceData/Landbouw/Bodem_HELP_kleiig, ParametersSubgewas/DM_yield_BodemK_kleiig * (1[ratio] - YieldReduction)) 
																	,case(SourceData/Landbouw/Bodem_HELP_zandig, ParametersSubgewas/DM_yield_BodemK_kleiig * (1[ratio] - YieldReduction)) 
																	,0[ton_ha_jaarlijks]) * Rotation;
		attribute<Eur_Ha_jaarlijks> CAP_subsidy          (rdc_25m) := Rotation * ParametersSubgewas/CAP_subsidy; // Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse?
		
		attribute<ton_ha_jaarlijks> Feed_requirement     (rdc_25m) := Economic_performance/TotalFeed/Instant - Economic_performance/feed_concentrates/requirement - (Gras_zonder_herinzaai/DM_yield + Gras_met_herinzaai/DM_yield);
		attribute<Eur_Ha_jaarlijks> Feed_surplus_deficit (rdc_25m) := (DM_yield - Feed_requirement) * ParametersSubgewas/price_DM_ton;  
		attribute<Eur_Ha_jaarlijks> Feed_costs           (rdc_25m) := production_costs - CAP_subsidy - Feed_surplus_deficit + (Feed_requirement * ParametersSubgewas/feeding_costs);
	}

	container Economic_performance
	{
		container Feed_composition 
		{
			parameter<ratio>        Grass                       := ModelParameters/Landbouw/Dairy/feed_composition_share_grass * ParametersModelType/Perc_FeedDryMatter;
			parameter<ratio>        Mais                        := ModelParameters/Landbouw/Dairy/feed_composition_share_mais * ParametersModelType/Perc_FeedDryMatter; 
		}
		
		parameter<EUR_ton>          MilkPrice                   := ModelParameters/Landbouw/Dairy/MilkPrice + ParametersModelType/MilkPricePremium; // uitgangspunten en normen bedrijfsbegroting melkveehouderij, 5 - 06 - 2014. Te speciferen per soc. econ. scenario of voor gevoeligheidsanalyse?
		
		container TotalFeed
		{
			attribute<ton_ha_jaarlijks>     Exo      (rdc_25m) := const(ParametersModelType/MaxYieldGrass[ton_ha_jaarlijks] / ParametersModelType/Perc_FeedDryMatter, rdc_25m);   // per intensiteitsklasse te speciferen door LEI, obv pg 22 achtergronddoc (feed_c)
			attribute<ton_ha_jaarlijks>     Endo     (rdc_25m) := (Gras_zonder_herinzaai/DM_yield + Gras_met_herinzaai/DM_yield) / Feed_composition/grass; // Kan vervangen door onderstaande. Afhankerlijk van yr. Is grass yield als feed comp grass is 100%. Als feed comp grass lager is, bijv 50%, dan is het 2 maal grass yield. Dit is vreemd. Waarom niet total feed vastzetten? P{roductiecapaciteit staat toch ook vast (koeien etc.)? Nu varieert voedsel met yield reduction gras, ZELFS ALS FEED COMP GRASS LAAG IS!
			attribute<ton_ha_jaarlijks>     instant  (rdc_25m) := = ModelParameters/Landbouw/Dairy/TotalFeedExo ? 'exo' : 'endo' ;
		}
		
		container Feed_concentrates
		{
			attribute<ton_ha_jaarlijks> requirement  (rdc_25m) := TotalFeed/Instant * (1[ratio] - ParametersModelType/Perc_FeedDryMatter); // Dit kan ook blijven staan.
			attribute<Eur_Ha_jaarlijks> Feed_costs   (rdc_25m) := requirement * (Parameters/feed_concentrates/price_DM_ton + Parameters/feed_concentrates/feeding_costs);
		}
		
		attribute<Eur_Ha_jaarlijks> DD_costs         (rdc_25m) := DeepDrainageK/DD_costs[DeepDrainageVariant] * DDPossible;
		attribute<Eur_Ha_jaarlijks> total_costs      (rdc_25m) := Gras_zonder_herinzaai/Feed_costs + Gras_met_herinzaai/Feed_costs + Snijmais/Feed_costs + Feed_concentrates/Feed_costs + DD_costs;
		attribute<ton_ha_jaarlijks> milk_production  (rdc_25m) := TotalFeed/Instant * ParametersModelType/FCE[Ratio];
		attribute<EUR_ton>          total_costs_milk (rdc_25m) := Total_costs / Milk_production;
		attribute<Eur_Ha_jaarlijks> gross_revenues   (rdc_25m) := Milk_production * (MilkPrice + ModelParameters/Landbouw/Dairy/Manure_revenue - ModelParameters/Landbouw/Dairy/holding_costs);
		attribute<Eur_Ha_jaarlijks> Net_revenues_ha  (rdc_25m) := gross_revenues - total_costs;
		attribute<EUR_M2_jaarlijks> Net_revenues     (rdc_25m) := Net_revenues_ha[EUR_M2_jaarlijks];
		attribute<EUR_M2>           Conversion_costs (rdc_25m) := = 'MakeDefined(Factoren/transitiekosten/'+ name + '[LU_ModelType/LandbouwK_rel[gg_LandbouwK]], /ModelParameters/Landbouw/Transitiekosten_src/overigen__'+ name + ')[EUR_M2]';
	}
}