container Startsituatie
{
	container Bedrijven
	{
		attribute<meter2> bijeenkomst     (AdminDomain) := sum(BAG_vbo/Impl/gebruiksdoelen/bijeenkomst || BAG_vbo/Impl/gebruiksdoelen/logies           ? BAG_vbo/oppervlakte_trunc : 0[m2_vbo], BAG_vbo/AdminDomain_rel) * 1[verblijfsobject];
		attribute<meter2> Kantoor         (AdminDomain) := sum(BAG_vbo/Impl/gebruiksdoelen/Kantoor     || BAG_vbo/Impl/gebruiksdoelen/cel              ? BAG_vbo/oppervlakte_trunc : 0[m2_vbo], BAG_vbo/AdminDomain_rel) * 1[verblijfsobject];
		attribute<meter2> Gezondheidszorg (AdminDomain) := sum(BAG_vbo/Impl/gebruiksdoelen/Gezondheidszorg                                        ? BAG_vbo/oppervlakte_trunc : 0[m2_vbo], BAG_vbo/AdminDomain_rel) * 1[verblijfsobject];
		attribute<meter2> industrie       (AdminDomain) := sum(BAG_vbo/Impl/gebruiksdoelen/industrie   || BAG_vbo/Impl/gebruiksdoelen/overige_gebruiks ? BAG_vbo/oppervlakte_trunc : 0[m2_vbo], BAG_vbo/AdminDomain_rel) * 1[verblijfsobject];
		attribute<meter2> onderwijs       (AdminDomain) := sum(BAG_vbo/Impl/gebruiksdoelen/onderwijs                                              ? BAG_vbo/oppervlakte_trunc : 0[m2_vbo], BAG_vbo/AdminDomain_rel) * 1[verblijfsobject];
		attribute<meter2> sport           (AdminDomain) := sum(BAG_vbo/Impl/gebruiksdoelen/sport                                                  ? BAG_vbo/oppervlakte_trunc : 0[m2_vbo], BAG_vbo/AdminDomain_rel) * 1[verblijfsobject];
		attribute<meter2> winkel          (AdminDomain) := sum(BAG_vbo/Impl/gebruiksdoelen/winkel                                                 ? BAG_vbo/oppervlakte_trunc : 0[m2_vbo], BAG_vbo/AdminDomain_rel) * 1[verblijfsobject];
	}
	
	container Woningen
	{
		container eengezinsWoningen
		{
			attribute<verblijfsobject> Aantal_Woningen (AdminDomain) := sum_uint32(BAG_vbo/Impl/gebruiksdoelen/woon && BAG_vbo/WP2_rel == Vastgoed/WP2/V/Eengezins, BAG_vbo/AdminDomain_rel)[verblijfsobject];
			attribute<meter2>          Vloeroppervlak  (AdminDomain) := sum(BAG_vbo/Impl/gebruiksdoelen/woon && BAG_vbo/WP2_rel == Vastgoed/WP2/V/Eengezins ? BAG_vbo/oppervlakte_trunc : 0[m2_vbo], BAG_vbo/AdminDomain_rel) * 1[verblijfsobject];
		}
		
		container meergezins_bg
		{
			attribute<verblijfsobject> Aantal_Woningen_panden_pandvbo (BAG_panden_pandvbo) := (Impl/Aantal_woonfuncties > 1 ? Impl/aantal_bg : 0f) * 1[verblijfsobject];
			attribute<verblijfsobject> Aantal_Woningen_panden_pand    (BAG_panden_pand)    := recollect_by_cond(BAG_panden_pand/met_vbo_selection_condition, Aantal_Woningen_panden_pandvbo, 0f);
			attribute<verblijfsobject> Aantal_Woningen                (AdminDomain)        := sum(Aantal_Woningen_panden_pand[BAG_panden_pand/ToedelingsMatrix/Pand_rel] * BAG_panden_pand/ToedelingsMatrix/ToedelingPand, BAG_panden_pand/ToedelingsMatrix/AdminDomain_rel);
			
			attribute<meter2>          Vloeroppervlak_panden_pandvbo  (BAG_panden_pandvbo) := (Impl/Aantal_woonfuncties > 1 ? Impl/opp_bg : 0[meter2]);
			attribute<meter2>          Vloeroppervlak_panden_pand     (BAG_panden_pand)    := recollect_by_cond(BAG_panden_pand/met_vbo_selection_condition, Vloeroppervlak_panden_pandvbo, 0f);
			attribute<meter2>          Vloeroppervlak                 (AdminDomain)        := sum(Vloeroppervlak_panden_pand[BAG_panden_pand/ToedelingsMatrix/Pand_rel] * BAG_panden_pand/ToedelingsMatrix/ToedelingPand, BAG_panden_pand/ToedelingsMatrix/AdminDomain_rel);
		}
		
		container meergezins_1e
		{
			attribute<verblijfsobject> Aantal_Woningen_panden_pandvbo (BAG_panden_pandvbo) := (Impl/Aantal_woonfuncties > 1 ? Impl/aantal_1e : 0f) * 1[verblijfsobject];
			attribute<verblijfsobject> Aantal_Woningen_panden_pand    (BAG_panden_pand)    := recollect_by_cond(BAG_panden_pand/met_vbo_selection_condition, Aantal_Woningen_panden_pandvbo, 0f);
			attribute<verblijfsobject> Aantal_Woningen                (AdminDomain)        := sum(Aantal_Woningen_panden_pand[BAG_panden_pand/ToedelingsMatrix/Pand_rel] * BAG_panden_pand/ToedelingsMatrix/ToedelingPand, BAG_panden_pand/ToedelingsMatrix/AdminDomain_rel);
			
			attribute<meter2>          Vloeroppervlak_panden_pandvbo  (BAG_panden_pandvbo) := (Impl/Aantal_woonfuncties > 1 ? Impl/opp_1e : 0[meter2]) ;
			attribute<meter2>          Vloeroppervlak_panden_pand     (BAG_panden_pand)    := recollect_by_cond(BAG_panden_pand/met_vbo_selection_condition, Vloeroppervlak_panden_pandvbo, 0f);
			attribute<meter2>          Vloeroppervlak                 (AdminDomain)        := sum(Vloeroppervlak_panden_pand[BAG_panden_pand/ToedelingsMatrix/Pand_rel] * BAG_panden_pand/ToedelingsMatrix/ToedelingPand, BAG_panden_pand/ToedelingsMatrix/AdminDomain_rel);
		}
		
		container meergezins_hoog
		{
			attribute<verblijfsobject> Aantal_Woningen_panden_pandvbo (BAG_panden_pandvbo) := (Impl/Aantal_woonfuncties > 1 ? Impl/aantal_hoog : 0f) * 1[verblijfsobject];
			attribute<verblijfsobject> Aantal_Woningen_panden_pand    (BAG_panden_pand)    := recollect_by_cond(BAG_panden_pand/met_vbo_selection_condition, Aantal_Woningen_panden_pandvbo, 0f);
			attribute<verblijfsobject> Aantal_Woningen                (AdminDomain)        := sum(Aantal_Woningen_panden_pand[BAG_panden_pand/ToedelingsMatrix/Pand_rel] * BAG_panden_pand/ToedelingsMatrix/ToedelingPand, BAG_panden_pand/ToedelingsMatrix/AdminDomain_rel);
			
			attribute<meter2>          Vloeroppervlak_panden_pandvbo  (BAG_panden_pandvbo) := (Impl/Aantal_woonfuncties > 1 ? Impl/opp_hoog : 0[meter2]) ;
			attribute<meter2>          Vloeroppervlak_panden_pand     (BAG_panden_pand)    := recollect_by_cond(BAG_panden_pand/met_vbo_selection_condition, Vloeroppervlak_panden_pandvbo, 0f);
			attribute<meter2>          Vloeroppervlak                 (AdminDomain)        := sum(Vloeroppervlak_panden_pand[BAG_panden_pand/ToedelingsMatrix/Pand_rel] * BAG_panden_pand/ToedelingsMatrix/ToedelingPand, BAG_panden_pand/ToedelingsMatrix/AdminDomain_rel);
		}
		
		unit<UInt32> Impl := BAG_panden_pandvbo
		{
			attribute<Float32> Aantal_bouwlagen_AHN    := convert(pand_hoogte, meter) / ModelParameters/Wonen/Bouwlaaghoogte;
			attribute<Float32> Aantal_bouwlagen_BAG    := oppervlaktes/vbo_opp * 1[pandunit]  / footprint;
			attribute<Float32> Aantal_bouwlagen        := MakeDefined(Aantal_bouwlagen_AHN, Aantal_bouwlagen_BAG);
			
			attribute<UInt32>  Aantal_woonfuncties     := Counts/Vbos_perGebruiksdoel/woon;
			// attribute<UInt32>  Aantal_nietwoonfuncties := count_vbo_pand_niet_woon;
			// attribute<UInt32>  Aantal_functies         := count_vbo_pand_woon + count_vbo_pand_niet_woon;
			attribute<meter2> Opp_woon                := Oppervlaktes/VBOopp_perGebruiksdoel/woon;
			attribute<meter2> Opp_nietwoon            := Oppervlaktes/vbo_opp * 1[pandunit] - Oppervlaktes/VBOopp_perGebruiksdoel/woon;
			attribute<meter2>  Footprint               := BAG_panden_pandvbo/Footprint;
			
			attribute<Float32> lagen_woon_BAG          := Opp_woon / Footprint * 1[pandunit];
			attribute<Float32> lagen_nietwoon_BAG      := Opp_nietwoon / Footprint * 1[pandunit];
			attribute<Float32> perc_lagen_woon         := lagen_woon_BAG / (lagen_woon_BAG + lagen_nietwoon_BAG);
			attribute<Float32> perc_lagen_nietwoon     := lagen_nietwoon_BAG / (lagen_woon_BAG + lagen_nietwoon_BAG);
			
			attribute<Float32> lagen_woon              := round(perc_lagen_woon * Aantal_bouwlagen)[float32];
			attribute<Float32> lagen_nietwoon          := round(perc_lagen_nietwoon * Aantal_bouwlagen)[float32];
			
			attribute<Float32> laag_1e_0 := 2f - lagen_nietwoon;
			attribute<Float32> laag_1e_1 := laag_1e_0 < 0f ? 0f : laag_1e_0;
			attribute<Float32> perc_bg_0 := lagen_woon != 0f ? (1f - lagen_nietwoon) / lagen_woon : 0f;
			attribute<Float32> perc_bg_1 := perc_bg_0 < 0f ? 0f : perc_bg_0;
			attribute<Float32> laag_1e_2 := laag_1e_1 < 0f ? 0f : laag_1e_1 > 1f ? 1f : laag_1e_1;
			attribute<Float32> perc_1e_0 := lagen_woon > 1f ? laag_1e_2 / lagen_woon : lagen_woon > 0f ? laag_1e_2 : 0f;
			attribute<Float32> perc_bg_2 := (lagen_woon + lagen_nietwoon) < 1f ? 1f : perc_bg_1;
			attribute<Float32> perc_1e_1 := (lagen_woon + lagen_nietwoon) < 2f ? 1f - perc_bg_2 : perc_1e_0;
			attribute<Float32> perc_1e_2 := (perc_bg_2 + perc_1e_1) > 1f ? 1f - perc_bg_2 : perc_1e_1;
			attribute<Float32> perc_hoog := (perc_bg_2 + perc_1e_2) > 1f ? 0f : 1f - perc_1e_2 - perc_bg_2;
			// attribute<UInt32>  Aantal_eengezins := Aantal_functies == 1 && Aantal_woonfuncties == 1 ? 1 : 0;
			
			// attribute<m2_pand> Opp_eengezins := Aantal_functies == 1 && Aantal_woonfuncties == 1 ? Opp_woon : (0/0)[m2_pand];
			
			attribute<Float32> aantal_bg   := round(perc_bg_2   * Aantal_woonfuncties[float32])[float32];
			attribute<Float32> opp_bg      := perc_bg_2   * Opp_woon;
			attribute<Float32> aantal_1e   := round(perc_1e_2   * Aantal_woonfuncties[float32])[float32];
			attribute<Float32> opp_1e      := perc_1e_2   * Opp_woon;
			attribute<Float32> aantal_hoog := round(perc_hoog   * Aantal_woonfuncties[float32])[float32];
			attribute<Float32> opp_hoog    := perc_hoog   * Opp_woon;
		}
	}
	
	container Infrastructuur
	{
		unit<UInt32> Wegen := /SourceData/Diversen/Impl/NWB
		{
			attribute<rdc_meter> geometry (arc) := /SourceData/Diversen/Impl/NWB/geometry;
			
			attribute<Bool> IsRijksweg   := WEGBEHSRT == 'R';
			attribute<Bool> IsAutoweg    := WEGBEHSRT == 'P'; //Provincie
			attribute<Bool> IsOverigeWeg := WEGBEHSRT == 'G' || WEGBEHSRT == 'W' || WEGBEHSRT == 'T'; //gemeente, waterschap, overig
			
			attribute<meter> RijksWeg   (AdminDomain) := sum_uint32(Impl/dynapoints/IsRijksweg, Impl/dynapoints/Per_AdminDomain)[meter];
			attribute<meter> AutoWeg    (AdminDomain) := sum_uint32(Impl/dynapoints/IsAutoweg, Impl/dynapoints/Per_AdminDomain)[meter];
			attribute<meter> OverigeWeg (AdminDomain) := sum_uint32(Impl/dynapoints/IsOverigeWeg, Impl/dynapoints/Per_AdminDomain)[meter];
			
			container Impl
			{
				unit<UInt32> segments   := arc2segm(../geometry)
				{
					attribute<Bool> IsRijksweg   := .../IsRijksweg[SequenceNr];
					attribute<Bool> IsAutoweg    := .../IsAutoweg[SequenceNr];
					attribute<Bool> IsOverigeWeg := .../IsOverigeWeg[SequenceNr];
				}
				
				unit<UInt32> dynapoints := dyna_point(segments/point, segments/nextpoint, 1f)
				{
					attribute<Bool> IsRijksweg   := segments/IsRijksweg[SequenceNr];
					attribute<Bool> IsAutoweg    := segments/IsAutoweg[SequenceNr];
					attribute<Bool> IsOverigeWeg := segments/IsOverigeWeg[SequenceNr];
					
					attribute<AdminDomain> Per_AdminDomain := point[AdminDomain];
				}
			}
		}
		
		unit<UInt32> Spoor := SourceData/Grondgebruik/BRT/IsSpoor
		{
			attribute<rdc_meter> geometry (arc) := SourceData/Grondgebruik/BRT/IsSpoor/geometry;
			attribute<Bool>      IsElectrisch   := SourceData/Grondgebruik/BRT/IsSpoor/IsElectrisch;
			
			attribute<meter> Spoor            (AdminDomain) := count(Impl/dynapoints/point, Impl/dynapoints/Per_AdminDomain)[meter];
			attribute<meter> Electrisch       (AdminDomain) := sum_uint32(Impl/dynapoints/IsElectrisch, Impl/dynapoints/Per_AdminDomain)[meter];
			attribute<meter> NietElectrisch   (AdminDomain) := sum_uint32(Impl/dynapoints/IsElectrisch, Impl/dynapoints/Per_AdminDomain)[meter];
			
			container Impl
			{
				unit<UInt32> segments := arc2segm(../geometry)
				{
					attribute<Bool> IsElectrisch := .../IsElectrisch[SequenceNr];
				}
				
				unit<UInt32> dynapoints := dyna_point(segments/point, segments/nextpoint, 1f)
				{
					attribute<Bool> IsElectrisch := segments/IsElectrisch[SequenceNr];
					attribute<AdminDomain> Per_AdminDomain := point[AdminDomain];
				}
			}
		}
	}
	
	container Overig
	{
		attribute<meter2> Glastuinbouw        (AdminDomain) := BBG == Classifications/Grondgebruik/CBSKlasse/V/Glastuinbouw                                                                                                               ? convert(AdminDomain/NrHaPerCell, meter2) : 0[meter2];
		attribute<meter2> Landbouw            (AdminDomain) := BBG == Classifications/Grondgebruik/CBSKlasse/V/overige_agrarisch_gebruik                                                                                                  ? convert(AdminDomain/NrHaPerCell, meter2) : 0[meter2];
		attribute<meter2> Stedelijkgebied     (AdminDomain) := BBG == Classifications/Grondgebruik/CBSKlasse/V/woongebied || BBG == Classifications/Grondgebruik/CBSKlasse/V/bouwterrein                                                            ? convert(AdminDomain/NrHaPerCell, meter2) : 0[meter2];
		attribute<meter2> ExtensieveRecreatie (AdminDomain) := BBG == Classifications/Grondgebruik/CBSKlasse/V/bos || BBG == Classifications/Grondgebruik/CBSKlasse/V/parken_en_plantsoenen || BBG == Classifications/Grondgebruik/CBSKlasse/V/sportterreinen ? convert(AdminDomain/NrHaPerCell, meter2) : 0[meter2];
		attribute<meter2> IntensieveRecreatie (AdminDomain) := BBG == Classifications/Grondgebruik/CBSKlasse/V/dagrecreatieve_terreinen || BBG == Classifications/Grondgebruik/CBSKlasse/V/volkstuinen                                              ? convert(AdminDomain/NrHaPerCell, meter2) : 0[meter2];
		attribute<meter2> Vliegveld           (AdminDomain) := BBG == Classifications/Grondgebruik/CBSKlasse/V/Vliegveld                                                                                                                  ? convert(AdminDomain/NrHaPerCell, meter2) : 0[meter2];
	}
	
	// container Inwoners
	// {
	// }
	
	container Overige_Objecten //Voor deze Objecten en gebieden worden alleen getroffen aantallen of Oppervlaktes gerapporteerd en geen schades berekend.
	{
		container Kwetsbare_Objecten;
		container Rijksmonumenten;
		container IED_Installaties;
		container KRW_beschermde_gebieden;
	}
}