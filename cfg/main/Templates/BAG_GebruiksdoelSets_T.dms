Template BAG_GebruiksdoelSets_T
{
	parameter<string> name;
	unit<uint32> domain;
	
	unit<uint32> Select := ='select_with_org_rel(domain/gebruiksdoel_plus_rel == vbo_gebruiksdoel_plus/v/'+name+')'
	{

		attribute<rdc_meter>              geometry                          := org_rel -> geometry;
		// attribute<rdc_mm>              geometry_mm                          := org_rel -> geometry_mm;
		// attribute<rdc_meter>           geometry                             := geometry_mm[rdc_meter];
		attribute<m2_vbo>              oppervlakte_trunc                    := org_rel -> oppervlakte_trunc;
		// attribute<string>              identificatie                        := org_rel -> identificatie;
		attribute<m2_vbo>              oppervlakte                          := (org_rel -> oppervlakte)[m2_vbo];
		// attribute<string>              nummeraanduiding_id                  := org_rel -> nummeraanduiding_id;
		attribute<uint64>              pand_bag_nr                              := org_rel -> pand_bag_nr;
		attribute<uint64>              vbo_bag_nr                              := org_rel -> vbo_bag_nr;
		attribute<pand>                pand_rel                              := org_rel -> pand_rel;
		attribute<pand_alle_statussen> pand_alle_statussen_rel     := org_rel -> pand_alle_statussen_rel;
		attribute<Jaar>                bouwjaar_trunc                       := org_rel -> bouwjaar_trunc;
		
		attribute<WP1>                 WP1_rel                              := org_rel -> WP1_rel;
		attribute<WP2>                 WP2_rel                              := org_rel -> WP2_rel;
		attribute<WP4>                 WP4_rel                              := org_rel -> WP4_rel;
		attribute<bool>                LigtInCBSVerblijfsrecreatie          := org_rel -> LigtInCBSVerblijfsrecreatie;


		attribute<provincie>           Provincie_rel                        := point_in_polygon(geometry, Provincie/geometry);
		// attribute<RegioIndelingen/Gemeente2019_single> Gemeente2019_rel     := point_in_polygon(geometry, RegioIndelingen/Gemeente2019_single/geometry);
		// attribute<Buurt15>             buurt15_rel                          := point_in_polygon(geometry, Buurt15/geometry);
		// attribute<Wijk15>              wijk15_rel                           := point_in_polygon(geometry, Wijk15/geometry);
		// attribute<Buurt>               buurt_rel                            := point_in_polygon(geometry, Buurt/geometry);
		// attribute<Wijk>                wijk_rel                             := point_in_polygon(geometry, Wijk/geometry);
		// attribute<RegioIndelingen/LMSSubzone> LMSSubzone_rel                := point_in_polygon(geometry, RegioIndelingen/LMSSubzone/geometry);
		// attribute<NVM>                 NVM_rel                              := point_in_polygon(geometry, NVM/geometry); 
		// attribute<COROP>               COROP_rel                            := point_in_polygon(geometry, COROP/geometry); 
		// attribute<NL>                  NL_rel                               := point_in_polygon(geometry, NL/geometry); 

		// attribute<pand_domein>         pand_rel                             := rlookup(pand_id, pand_domein/identificatie);
		// attribute<pand_met_vbo_domein> pand_vbo_rel                         := rlookup(pand_id, pand_met_vbo_domein/identificatie);
		// attribute<m2_pand>             pand_vbo_opp (pand_met_vbo_domein)   := sum(oppervlakte_trunc, pand_vbo_rel) * 1[Verblijfsobject / PandUnit];
		attribute<AdminDomain>         AdminDomain_rel                      := geometry[AdminDomain];
		attribute<AllocDomain>         AllocDomain_rel                      := geometry[AllocDomain];
		attribute<rdc_100m>            rdc_100m_rel                         := geometry[rdc_100m];
		 
		container impl
		{
			unit<uint32>               Verblijfsrecreatie                                 := SourceData/Grondgebruik/VerblijfsrecreatieBuffer;
			attribute<bool>            LigtInCBSVerblijfsrecreatie                   (..) := IsDefined(point_in_polygon(geometry, Verblijfsrecreatie/geometry_rd));
			attribute<verblijfsobject> count_per_AdminDomain_inVerblijfsrec (AdminDomain) := sum_uint32(LigtInCBSVerblijfsrecreatie, AdminDomain_rel)[verblijfsobject];
		}
		
		container Oppervlaktes
		{
			container per_WP2_AllocDomain :=
				for_each_nedv(
					WP2/name
					,'mean(WP2_rel == ' + string(id(WP2)) + '[WP2] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AllocDomain])'
					, AllocDomain
					, m2_vbo
				);

			container per_WP4_AllocDomain :=
				for_each_nedv(
					WP4/name
					,'mean(WP4_rel == ' + string(id(WP4)) + '[WP4] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AllocDomain])'
					, AllocDomain
					, m2_vbo
				);

			container per_WP2_AdminDomain :=
				for_each_nedv(
					WP2/name
					,'mean(WP2_rel == ' + string(id(WP2)) + '[WP2] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AdminDomain])'
					, AdminDomain
					, m2_vbo
				);


			container per_WP4_AdminDomain :=
				for_each_nedv(
					WP4/name
					,'mean(WP4_rel == ' + string(id(WP4)) + '[WP4] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AdminDomain])'
					, AdminDomain
					, m2_vbo
				);
				
			// container Oppervlakte_2WP_per_AllocDomain :=
				// for_each_nedv(
					// WP2/name 
					// , 'sum(WP2_rel == ' + string(id(WP2)) + '[WP2] ? (oppervlakte_trunc * 1[verblijfsobject] / 1[ha]) : (0/0)[m2_ha], geometry[AllocDomain])'
					// , AllocDomain, m2_ha
				// );

			// container Oppervlakte_4WP_per_AllocDomain :=
				// for_each_nedv(
					// WP4/name 
					// , 'sum(WP4_rel == ' + string(id(WP4)) + '[WP4] ? (oppervlakte_trunc * 1[verblijfsobject] / 1[ha]) : (0/0)[m2_ha], geometry[AllocDomain])'
					// , AllocDomain
					// , m2_ha
				// );
		}
		
		container Counts 
		{
			attribute<verblijfsobject>     per_AdminDomain  (AdminDomain) := count(geometry, geometry[AdminDomain])[verblijfsobject];
			attribute<vbo_ha>              per_AllocDomain  (AllocDomain) := count(geometry, geometry[AllocDomain])[vbo_ha];
			attribute<vbo_ha>              in_100m_radius   (AllocDomain) := potential(per_AllocDomain, geography/Distmatrices_100m/pot100m/Flat2);
			attribute<vbo_ha>              in_500m_radius   (AllocDomain) := potential(per_AllocDomain, geography/Distmatrices_100m/pot500m/Flat2);
		
			container per_WP1_AllocDomain :=
				for_each_nedv(
					WP1/name
					, 'sum(WP1_rel == ' + string(id(WP1)) + '[WP1] ? 1 : 0, geometry[AllocDomain])'
					, AllocDomain, uint32
				)
			{
				attribute<uint32> totaal (AllocDomain) := ='add(' + AsItemList(WP1/name) + ')';
			}

			container per_WP2_AllocDomain :=
				for_each_nedv(
					WP2/name 
					, 'sum(WP2_rel == ' + string(id(WP2)) + '[WP2] ? 1 : 0, geometry[AllocDomain])'
					, AllocDomain, uint32
				)
			{
				attribute<uint32> totaal (AllocDomain) := ='add(' + AsItemList(WP2/name) + ')';
			}

			container per_WP2_AdminDomain :=
				for_each_nedv(
					WP2/name
					, 'sum(WP2_rel == ' + string(id(WP2)) + '[WP2] ? 1 : 0, geometry[AdminDomain])'
					, AdminDomain, uint32
				)
			{
				attribute<uint32> totaal (AdminDomain) := ='add(' + AsItemList(WP2/name) + ')';
			}

			container per_WP4_AllocDomain :=
				for_each_nedv(
					WP4/name 
					, 'sum(WP4_rel == ' + string(id(WP4)) + '[WP4] ? 1 : 0, geometry[AllocDomain])'
					, AllocDomain, uint32
				)
			{
				attribute<uint32> totaal (AllocDomain) := ='add(' + AsItemList(WP4/name) + ')';
			}

			container per_WP4_AdminDomain :=
				for_each_nedv(
					WP4/name 
					, 'sum(WP4_rel == ' + string(id(WP4)) + '[WP4] ? 1 : 0, geometry[AdminDomain])'
					, AdminDomain, uint32
				)
			{
				attribute<uint32> totaal (AdminDomain) := ='add(' + AsItemList(WP4/name) + ')';
			}
		}

		// attribute<eur_vbo> WOZ_buurt := name == "woon"
			// ? (SourceData/Vastgoed/WOZ/Y2015/Buurten/WON_2015[buurt15_rel])[eur_m2] * oppervlakte_trunc
			// : (SourceData/Vastgoed/WOZ/Y2015/Buurten/NIET_WON_2015[buurt15_rel])[eur_m2] * oppervlakte_trunc;

		// attribute<eur_vbo> WOZ_wijk := name == "woon"
			// ? (SourceData/Vastgoed/WOZ/Y2015/Wijken/WON_2015[wijk15_rel])[eur_m2] * oppervlakte_trunc
			// : (SourceData/Vastgoed/WOZ/Y2015/Wijken/NIET_WON_2015[wijk15_rel])[eur_m2] * oppervlakte_trunc;

		// attribute<eur_vbo> WOZ := WOZ_buurt > 0f ? WOZ_buurt : WOZ_wijk;

		// parameter<int32> total_sum_opp_trunc := sum(oppervlakte_trunc)[int32];

		// container PerWoningType := for_each_ne(WP4/name, 'PerWoningTypeT('+quote(WP4/name)+')');

		// Template PerWoningTypeT
		// {
			// parameter<string> woningtype;
			
			// unit<uint32> PerType := = 'select_with_org_rel(WP4_rel == WP4/V/'+woningtype+')'
			// {
				// attribute<rdc_meter>   geometry          := ..../geometry[org_rel];
				// attribute<m2_vbo>      oppervlakte_trunc := ..../oppervlakte_trunc[org_rel];
				// attribute<string>      identificatie     := ..../identificatie[org_rel];
				// attribute<Jaar>        bouwjaar_trunc    := ..../bouwjaar_trunc[org_rel];
				// attribute<AllocDomain> AllocDomain_rel   := geometry[AllocDomain];
			// }
		// }



		// parameter<string> WoningkenmerkenSrc := 'VariantData/RegionalAvgCharacteristics/ReadRegionalAvgCharacteristics';
		// parameter<string> RegiokenmerkenSrc  := 'VariantData/RegionalAvgCharacteristics/Overige_vars';
	}
}
