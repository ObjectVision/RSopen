Template BAG_GebruiksdoelSets_T
: using = "classifications/vastgoed"
{
	parameter<string> name;
	unit<uint32> domain;
	
	unit<uint32> Select := ='select_with_org_rel(domain/gebruiksdoel_plus_rel == vbo_gebruiksdoel_plus/v/'+name+')'
	{

		attribute<rdc_meter>              geometry                          := org_rel -> geometry;
		attribute<m2_vbo>              oppervlakte_trunc                    := org_rel -> oppervlakte_trunc;
		attribute<m2_vbo>              oppervlakte                          := (org_rel -> oppervlakte)[m2_vbo];
		attribute<uint64>              pand_bag_nr                              := org_rel -> pand_bag_nr;
		attribute<uint64>              vbo_bag_nr                              := org_rel -> vbo_bag_nr;
		attribute<pand>                pand_rel                              := org_rel -> pand_rel;
		attribute<pand_alle_statussen> pand_alle_statussen_rel     := org_rel -> pand_alle_statussen_rel;
		attribute<yr>                bouwjaar_trunc                       := org_rel -> bouwjaar_trunc;
		
		// attribute<WP1>                 WP1_rel                              := org_rel -> WP1_rel;
		// attribute<WP2>                 WP2_rel                              := org_rel -> WP2_rel;
		attribute<WP4>                 WP4_rel                              := org_rel -> WP4_rel;
		attribute<bool>                LigtInCBSVerblijfsrecreatie          := org_rel -> LigtInCBSVerblijfsrecreatie;
		attribute<provincie>           Provincie_rel                        := point_in_polygon(geometry, Provincie/geometry);
		attribute<AdminDomain>         AdminDomain_rel                      := geometry[AdminDomain];
		attribute<AllocDomain>         AllocDomain_rel                      := geometry[AllocDomain];
		attribute<rdc_100m>            rdc_100m_rel                         := geometry[rdc_100m];
		 
		container impl
		{
			unit<uint32>               Verblijfsrecreatie                                 := SourceData/Grondgebruik/VerblijfsrecreatieBuffer;
			attribute<bool>            LigtInCBSVerblijfsrecreatie                   (..) := IsDefined(point_in_polygon(geometry, Verblijfsrecreatie/geometry_rd));
			attribute<verblijfsobject> count_per_AdminDomain_inVerblijfsrec (AdminDomain) := sum_uint32(LigtInCBSVerblijfsrecreatie, AdminDomain_rel)[verblijfsobject];
		}
		
		container Oppervlaktes
		{
			container per_WP2_AllocDomain :=
				for_each_nedv(
					WP2/name
					,'mean(WP2_rel == ' + string(id(WP2)) + '[WP2] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AllocDomain])'
					, AllocDomain
					, m2_vbo
				);

			container per_WP4_AllocDomain :=
				for_each_nedv(
					WP4/name
					,'mean(WP4_rel == ' + string(id(WP4)) + '[WP4] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AllocDomain])'
					, AllocDomain
					, m2_vbo
				);

			container per_WP2_AdminDomain :=
				for_each_nedv(
					WP2/name
					,'mean(WP2_rel == ' + string(id(WP2)) + '[WP2] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AdminDomain])'
					, AdminDomain
					, m2_vbo
				);


			container per_WP4_AdminDomain :=
				for_each_nedv(
					WP4/name
					,'mean(WP4_rel == ' + string(id(WP4)) + '[WP4] ? oppervlakte_trunc : (0/0)[m2_vbo], geometry[AdminDomain])'
					, AdminDomain
					, m2_vbo
				);
		}
		
		container Counts 
		{
			attribute<verblijfsobject>     per_AdminDomain  (AdminDomain) := count(geometry, geometry[AdminDomain])[verblijfsobject];
			attribute<vbo_ha>              per_AllocDomain  (AllocDomain) := count(geometry, geometry[AllocDomain])[vbo_ha];
			attribute<vbo_ha>              in_100m_radius   (AllocDomain) := potential(per_AllocDomain, geography/Distmatrices_100m/pot100m/Flat2);
			attribute<vbo_ha>              in_500m_radius   (AllocDomain) := potential(per_AllocDomain, geography/Distmatrices_100m/pot500m/Flat2);
		
			container per_WP1_AllocDomain :=
				for_each_nedv(
					WP1/name
					, 'sum_uint32(WP1_rel == ' + string(id(WP1)) + '[WP1], geometry[AllocDomain])'
					, AllocDomain, uint32
				)
			{
				// attribute<uint32> totaal (AllocDomain) := ='add(' + AsItemList(WP1/name) + ')';
			}

			// container per_WP2_AllocDomain :=
				// for_each_nedv(
					// WP2/name 
					// , 'sum_uint32(WP2_rel == ' + string(id(WP2)) + '[WP2], geometry[AllocDomain])'
					// , AllocDomain, uint32
				// )
			// {
				// attribute<uint32> totaal (AllocDomain) := ='add(' + AsItemList(WP2/name) + ')';
			// }

			// container per_WP2_AdminDomain :=
				// for_each_nedv(
					// WP2/name
					// , 'sum_uint32(WP2_rel == ' + string(id(WP2)) + '[WP2], geometry[AdminDomain])'
					// , AdminDomain, uint32
				// )
			// {
				// attribute<uint32> totaal (AdminDomain) := ='add(' + AsItemList(WP2/name) + ')';
			// }

			// container per_WP4_AllocDomain :=
				// for_each_nedv(
					// WP4/name 
					// , 'sum_uint32(WP4_rel == ' + string(id(WP4)) + '[WP4], geometry[AllocDomain])'
					// , AllocDomain, uint32
				// )
			// {
				// attribute<uint32> totaal (AllocDomain) := ='add(' + AsItemList(WP4/name) + ')';
			// }

			// container per_WP4_AdminDomain :=
				// for_each_nedv(
					// WP4/name 
					// , 'sum_uint32(WP4_rel == ' + string(id(WP4)) + '[WP4], geometry[AdminDomain])'
					// , AdminDomain, uint32
				// )
			// {
				// attribute<uint32> totaal (AdminDomain) := ='add(' + AsItemList(WP4/name) + ')';
			// }
		}
	}
}
