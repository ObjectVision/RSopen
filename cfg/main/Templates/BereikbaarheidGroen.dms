Template BereikbaarheidGroen : using = "Classifications/actor"
{
	container SrcSrc;
	parameter<string> Ref;
	//
	
	container Src := .;
	
	parameter<Woning_ha> MaxWoningenInGroen: [5];
	parameter<ha>        MinimumOppervlakte: [1];
	
	unit<uint32> Regio := SourceData/RegioIndelingen/Provincie;
	
	unit<uint8> Indicator: NrOfRows = 3
	{
		attribute<string> name     : ['Aanwezig', 'Beschikbaar', 'Bereikbaar'];
		attribute<string> GroenSrc : ['1f', '(Potentiaal > 0[Woning])[float32]', 'Potentiaal[float32]'];
	}
	
	unit<uint8> GroenBlauwK : nrofrows = 3
	{
		attribute<string> name : ['Natuur','Extensieve_landbouw','Water'];
		attribute<string> label := name;
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	attribute<LU_ModelType> LU             (AdminDomain) := SrcSrc/Landgebruikskaart/Result_SA;
	attribute<GroenBlauwK>  GroenBlauw_rel (AdminDomain) := switch(
		  case(LU == LU_ModelType/v/landbouw_gg_vee_extensief, GroenBlauwK/v/Extensieve_landbouw)
		, case(LU == LU_ModelType/v/landbouw_rijst, GroenBlauwK/v/Extensieve_landbouw)
		, case(LU == LU_ModelType/v/landbouw_rietteelt, GroenBlauwK/v/Extensieve_landbouw)
		, case(LU == LU_ModelType/v/Water_totaal, GroenBlauwK/v/Water)
		, case(LU == LU_ModelType/v/Natuur_totaal, GroenBlauwK/v/Natuur)
		, case(Ref != 'Basisjaar' && VariantData/ExogeenOpleggen/RetentieGebied == LU_ModelType/v/water_totaal, GroenBlauwK/v/Water)
		, null_b
	);
	
	attribute<Woning> Woningen0 (AdminDomain) := SrcSrc/Stand/Aantal_Woningen_Totaal[Woning];
	
	attribute<bool> Range (AdminDomain) := =  Ref == 'Groen/InZichtjaar' ? 'IsDefined(Stand/subsector_rel)' : 'const(true, AdminDomain)';
	
	attribute<Woning> Woningen (AdminDomain) := Woningen0 * float32(Range);
	
	container Afstanden := for_each_ne(Bereikbaarheid/AfstandGroen/name, 'Per_Afstand_T('+string(id(Bereikbaarheid/AfstandGroen))+'[Bereikbaarheid/AfstandGroen], Woningen, Src)');
	
	Template Per_Afstand_T //fka T2
	{
		parameter<Bereikbaarheid/AfstandGroen> id;
		attribute<Woning> Woningen (AdminDomain);
		container Src;
		//
		
		container AggrGroenKlassen := 
			for_each_ne(
				GroenBlauwK/name
				, 'Per_GroenBlauwK_T(Src/GroenBlauw_rel == GroenBlauwK/V/'+GroenBlauwK/name+', id, Woningen, Src)');
	}
	
	Template Per_GroenBlauwK_T // fka T3
	{
		//
		attribute<bool> IsGroenKlasse (AdminDomain);
		parameter<Bereikbaarheid/AfstandGroen> AfstandGroen_id;
		attribute<Woning> Woningen (AdminDomain);
		container Src;
		//
		
		parameter<meter> Bovengrens := Bereikbaarheid/AfstandGroen/Bovengrens[AfstandGroen_id];
		
		attribute<Woning> WoningenInThisStRegio (AdminDomain) := Woningen
		{
			parameter<Woning> Aggregated := sum(.);
		}
		
		attribute<bool> Extent0 (AdminDomain) := Woningen <= Src/MaxWoningenInGroen * AdminDomain/NrHaPerCell && IsGroenKlasse;
		
		unit<uint32> ExtentDistrict := district(uint32(Extent0))
		{
			attribute<.> per_AdminDomain (AdminDomain):= Districts;
			attribute<ha> Oppervlakte := pcount(per_AdminDomain)[float32] * AdminDomain/NrHaPerCell;
		}
		
		attribute<bool> Extent (AdminDomain) := Extent0 && ExtentDistrict/Oppervlakte[ExtentDistrict/per_AdminDomain] >= Src/MinimumOppervlakte;
		
		attribute<Woning> Potentiaal (AdminDomain) :=
			= 'potential(
				WoningenInThisStRegio,
				geography/Distmatrices/Impl_25m/pot'+string(Bovengrens)+'m/potrange/Flat2
			)[Woning]';
		
		container Indicatoren := for_each_ne(Indicator/name, 'Indicatoren_T('+quote(Indicator/GroenSrc)+', ..)');
	}
	
	Template Indicatoren_T // fka T4
	{
		//
		parameter<string> GroenSrc;
		container Src;
		//
		
		attribute<ha> Groen (AdminDomain) := = GroenSrc+' * Src/Extent[float32] * AdminDomain/NrHaPerCell'
		{
			parameter<ha> Aggregated := sum(.)
			{
				parameter<m2_Woning> PerWoning := .[meter2] / Src/WoningenInThisStRegio/Aggregated;
			}
		}
	}
}