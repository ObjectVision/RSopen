container Allocatie: using = "Classifications/Actor;VariantData;CaseClassifications/Vastgoed;Classifications/modellering"
{
	//debug
	// container FirstIter := /Allocatie/Zichtjaren/Y2030/Sequences/Seq_0/SectorAllocRegios/Wonen_NVM/Iters_Normaal/Iter_0;
	container FirstIter_Landbouw := ='Allocatie/Zichtjaren/'+first(Time/Zichtjaar/name)+'/Sequences/Seq_0/SectorAllocRegios/Landbouw_Provincie/Iters_Landbouw/Iter_0';
	container FirstIter_wonen    := ='Allocatie/Zichtjaren/'+first(Time/Zichtjaar/name)+'/Sequences/Seq_0/SectorAllocRegios/Wonen_NVM/Iters_Normaal/Iter_0';
	
	
	container StartState := VariantData/StateBasisjaar
	{
		attribute<Actor/Sector/XSubsector> Subsector_rel                  (CompactedAdminDomain) := const(value(0/0, Actor/Sector/XSubsector), CompactedAdminDomain);
		attribute<OP>                      OP_rel                         (CompactedAdminDomain) := const(0b/0b, CompactedAdminDomain, OP);
		attribute<float32>                 Max                            (CompactedAdminDomain) := = 'Max_Elem('+AsItemList(Sector/XSubsector/name+'[float32]')+')';
		attribute<bool>                    MaxIsNul                       (CompactedAdminDomain) := Max == 0f;
		attribute<Sector/XSubsector>       Subsector_rel_dominant_landuse (CompactedAdminDomain) := = '(ArgMax('+AsItemList(Sector/XSubsector/name+'[float32]')+') / uint32(!MaxIsNul))[Sector/XSubsector]';
	}
	
	#include<StartState_metBAGnieuwbouw.dms>
	
	container Zichtjaren := 
		for_each_ne(
			Time/Zichtjaar/name
			,'Templates/Allocatie/Zichtjaar_T('
				+quote(Time/Zichtjaar/name)+
				','+Time/Zichtjaar/PrevState+
				',Impl'
			')'
		);
	
	container Impl
	{
		parameter<string> Update_expr            := 'float32(!ThisIter/IsNuGealloceerd) * ThisIter/StateVoorAllocatie/@S@/@SS@'                  // waar geen subsector is gealloceerd van betreffende sector (bijv werken) houden we tav alle subsectoren (ook van andere sectoren) de state v贸贸r alloc aan
														'+ float32( ThisIter/Allocatie/per_SectorXSubSector == Sector/xSubSector/V/@S@_@SS@)'   // waar betreffende subsector wel is gealloceerd (bijv detailhandel)  nemen we de PotStateNaAlloc van betreffende subsector over
														'* Subsectoren/@SS@/CompactedAdminDomain/PotentieleStateNaAllocatie';                   // als een andere subsector (bijv nijverheid en logistiek) dan betreffende subsector is gealloceerd dan wordt betreffende subsector gesloopt. 
		parameter<string> Update_expr_DiscrAlloc   := 'float32( ThisIter/Allocatie/per_SectorXSubSector == Sector/xSubSector/V/@S@_@SS@)'    // waar betreffende subsector wel is gealloceerd (bijv detailhandel)  nemen we de PotStateNaAlloc van betreffende subsector over
														'* const(CompactedAdminDomain/NrHaPerCell, CompactedAdminDomain )';                   // als een andere subsector (bijv nijverheid en logistiek) dan betreffende subsector is gealloceerd dan wordt betreffende subsector gesloopt. 
		
		parameter<string> Verdring_expr := 'float32(!Context/ThisIter/IsNuGealloceerd) * Context/ThisIter/StateVoorAllocatie/@S@/@SS@'; // waar geen subsector van de andere sector gealloceerd is (bijv wonen) houden we tav alle subsectoren van betreffende sector de state v贸贸r alloc aan.
																																		// Waar wel een subsector vd andere sector gealloceerd is worden alle eenheden van betreffende secorx subsectoren gesloopt.
		parameter<string> Update_Pandfootprint_expr :=
			'float32(!Context/ThisIter/IsNuGealloceerd) * Context/ThisIter/StateVoorAllocatie/PandFootprint/@SS@'
			'+ float32(Context/ThisIter/Allocatie/per_SectorXSubSector == Sector/xSubSector/V/Werken_@SS@)'
				'* VariantData/Density/Per_CompactedAllocDomain/@Y@/src/Werken/PandFootprint_perJob/Subsectoren/@SS@[CompactedAdminDomain/CompactedAllocDomain_rel]'
				'* Werken/@SS@/Result';
	}
}