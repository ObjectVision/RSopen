////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Dit is RSOpen, de open source versie van het model RuimteScanner. Het scipt wordt uitgegeven onder GNU-GPL licentie.
//
// RSOpen is ontwikkeld door PBL Planbureau voor de Leefomgeving, i.s.m Object Vision B.V. en VU Vrije Universiteit Amsterdam.
// Opdrachtgever/ontwikkelaar PBL: Bart Rijken
// Contactpersoon/ontwikkelaar Object Vision B.V.: Jip Claassens (jclaassens@objectvision.nl)
// Contacpersoon PBL: Bas van Bemmel (Bas.vanBemmel@pbl.nl)
//
// Deze file specificeert de verschillende grid domains die kunnen worden gebruikt in het model, regioindelingen, en afstandsmatrices.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

container Geography: Using = "Units"
{
	unit<fpoint> rdc_meter_base   : DialogData = "ngr_layer", SpatialReference = "EPSG:28992";
	unit<fpoint> rdc_meter_NL     := range(rdc_meter_base, point_xy(min_max/x_min_Nederland, min_max/y_min_Nederland,rdc_meter_base), point_xy(min_max/x_max_Nederland, min_max/y_max_Nederland,rdc_meter_base));
	
	// unit<ipoint> rdc_cm_base      := gridset(rdc_meter_NL,  point_yx(0.01, 0.01), point_yx(0.0, 0.0), ipoint); 
	unit<ipoint> rdc_mm_base      := gridset(rdc_meter_NL,  point_yx(0.001, 0.001), point_yx(0.0, 0.0), ipoint); // fka point_rd_mm
	unit<wpoint> rdc_km_base      := gridset(rdc_meter_NL,  point_yx(1000, 1000), point_yx(0.0, 0.0), wpoint); 

	unit<fpoint> rdc_meter        := ='StudyAreas/rdc_'+ModelParameters/StudyArea;
	unit<ipoint> rdc_mm           := gridset(rdc_meter,  point_yx(0.001, 0.001), point_yx(0.0, 0.0), ipoint); // fka point_rd_mm
	// unit<ipoint> rdc_cm           := gridset(rdc_meter,  point_yx(0.01, 0.01), point_yx(0.0, 0.0), ipoint); 
	

	unit<fpoint> LambertEA_base   : SpatialReference = "EPSG:3035", DialogData = "ngr_layer_lea"; 
	unit<fpoint> LambertEA        := range(LambertEA_base, point_yx(2500000f, 1300000f), point_yx(4900000f, 4300000f));
	unit<dpoint> wgs84_base       : SpatialReference = "EPSG:4326";
	
	container StudyAreas
	{
		unit<fpoint> rdc_Nederland             := rdc_meter_NL
		{
			parameter<rdc_meter_base> geometry_base                  (poly) := SourceData/RegioIndelingen/NL/geometry_base[SourceData/RegioIndelingen/NL/V/Nederland];
			attribute<rdc_meter>      geometry          (poly, UnityDomain) := union_data(UnityDomain, geometry_base[rdc_meter]);
			attribute<bool>           IsStudyArea_AdminDomain (AdminDomain) := IsDefined(poly2grid(geometry, AdminDomain));
			attribute<bool>           IsStudyArea_AllocDomain (AllocDomain) := IsDefined(poly2grid(geometry, AllocDomain));
			attribute<string>         name                    (UnityDomain) := const('Nederland',UnityDomain);
			container BoundingBoxPlus := Make_BoundingBoxPlus_T(geometry, 5000[meter]);
		}
		
		unit<fpoint> rdc_Friesland             := range(rdc_meter_base
															, Lower_Bound(SourceData/RegioIndelingen/Provincie/Per_Prov/Friesland/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Friesland]])[rdc_km_base][rdc_meter_NL]
															, (Upper_Bound(SourceData/RegioIndelingen/Provincie/Per_Prov/Friesland/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Friesland]])[rdc_km_base] + point_xy(1w,1w,rdc_km_base))[rdc_meter_NL]
													)  
		{
			parameter<rdc_meter_base> geometry_base                  (poly) := SourceData/RegioIndelingen/Provincie/Per_Prov/Friesland/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Friesland]];
			attribute<rdc_meter>      geometry          (poly, UnityDomain) := union_data(UnityDomain, geometry_base[rdc_meter]);
			attribute<bool>           IsStudyArea_AdminDomain (AdminDomain) := IsDefined(poly2grid(geometry, AdminDomain));
			attribute<bool>           IsStudyArea_AllocDomain (AllocDomain) := IsDefined(poly2grid(geometry, AllocDomain));
			
			parameter<Ha>             Areaal                                := area(geometry[0], meter2)[ha];
			attribute<string>         name                    (UnityDomain) := const('Friesland',UnityDomain);
			container BoundingBoxPlus := Make_BoundingBoxPlus_T(geometry, 5000[meter]);
		}
		
		unit<fpoint> rdc_Noord_Holland         := range(rdc_meter_base, Upper_Bound(SourceData/RegioIndelingen/Provincie/Per_Prov/Noord_Holland/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Noord_Holland]]), Lower_Bound(SourceData/RegioIndelingen/Provincie/Per_Prov/Noord_Holland/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Noord_Holland]]))  
		{  
			parameter<rdc_meter_base> geometry_base                  (poly) := SourceData/RegioIndelingen/Provincie/Per_Prov/Noord_Holland/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Noord_Holland]];
			attribute<rdc_meter>      geometry          (poly, UnityDomain) := union_data(UnityDomain, geometry_base[rdc_meter]);
			attribute<bool>           IsStudyArea_AdminDomain (AdminDomain) := IsDefined(poly2grid(geometry, AdminDomain));
			attribute<bool>           IsStudyArea_AllocDomain (AllocDomain) := IsDefined(poly2grid(geometry, AllocDomain));
			attribute<string>         name                    (UnityDomain) := const('Noord_Holland',UnityDomain);
			container BoundingBoxPlus := Make_BoundingBoxPlus_T(geometry, 5000[meter]);
		}
		unit<fpoint> rdc_Utrecht               := range(rdc_meter_base, Upper_Bound(SourceData/RegioIndelingen/Provincie/Per_Prov/Utrecht/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Utrecht]]), Lower_Bound(SourceData/RegioIndelingen/Provincie/Per_Prov/Utrecht/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Utrecht]]))  
		{  
			parameter<rdc_meter_base> geometry_base                  (poly) := SourceData/RegioIndelingen/Provincie/Per_Prov/Utrecht/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Utrecht]];
			attribute<rdc_meter>      geometry          (poly, UnityDomain) := union_data(UnityDomain, geometry_base[rdc_meter]);
			attribute<bool>           IsStudyArea_AdminDomain (AdminDomain) := IsDefined(poly2grid(geometry, AdminDomain));
			attribute<bool>           IsStudyArea_AllocDomain (AllocDomain) := IsDefined(poly2grid(geometry, AllocDomain));
			attribute<string>         name                    (UnityDomain) := const('Utrecht',UnityDomain);
			container BoundingBoxPlus := Make_BoundingBoxPlus_T(geometry, 5000[meter]);
		}
		
		unit<uint32> UnityDomain : nrofrows = 1;
		
		Template Make_BoundingBoxPlus_T
		{
			attribute<rdc_meter> geometry (poly, UnityDomain);
			parameter<meter>     PlusSize;
			///
			attribute<rdc_meter> polygon (poly, UnityDomain) := points2sequence(BoundingBoxPlus/point_set/point, BoundingBoxPlus/point_set/sequence_rel, BoundingBoxPlus/point_set/ordinal);
			
			unit<uint32> BoundingBoxPlus := UnityDomain
			{
				attribute<rdc_meter> LB := Lower_Bound(geometry);
				attribute<rdc_meter> UB := Upper_Bound(geometry);
				
				attribute<rdc_meter> top_left     := point_xy(Get_X(LB)[meter] - PlusSize, Get_Y(UB)[meter] + PlusSize, rdc_meter); 
				attribute<rdc_meter> top_right    := point_xy(Get_X(UB)[meter] + PlusSize, Get_Y(UB)[meter] + PlusSize, rdc_meter);
				attribute<rdc_meter> bottom_left  := point_xy(Get_X(LB)[meter] - PlusSize, Get_Y(LB)[meter] - PlusSize, rdc_meter);
				attribute<rdc_meter> bottom_right := point_xy(Get_X(UB)[meter] + PlusSize, Get_Y(LB)[meter] - PlusSize, rdc_meter);
				
				unit<uint32> point_set : nrofrows = 5
				{
					attribute<rdc_meter>  point        := union_data(., top_left, top_right, bottom_right, bottom_left, top_left);
					attribute<..>         sequence_rel := const(0, .);
					attribute<.>          ordinal      := id(.);
				}
			}
		}
	}
	
	unit<uint32> Gridsizes : nrofrows = 7
	{
		attribute<string>  size_str : ['2.5', '5', '10', '25', '100', '250', '500'];
		attribute<Meter>   size     := size_str[Meter];
		
		attribute<string>  name0    := 'size_'+string(size)+'m';
		attribute<string>  name     := replace(name0, '2.5', '2_5');
	}
	
	unit<ipoint> rdc_2_5m  := perGridsize/size_2_5m/domain;
	unit<ipoint> rdc_5m    := perGridsize/size_5m/domain;
	unit<ipoint> rdc_10m   := perGridsize/size_10m/domain;
	unit<ipoint> rdc_25m   := perGridsize/size_25m/domain;
	unit<ipoint> rdc_100m  := perGridsize/size_100m/domain;
	unit<ipoint> rdc_250m  := perGridsize/size_250m/domain;
	unit<ipoint> rdc_500m  := perGridsize/size_500m/domain;
	
	container min_max 
	{
		parameter<Meter> x_min_Nederland     := 0[meter];
		parameter<Meter> x_max_Nederland     := 280000[meter];
		parameter<Meter> y_min_Nederland     := 300000[meter];
		parameter<Meter> y_max_Nederland     := 625000[meter];
		
		parameter<Meter> x_min_Noord_Holland := PointCol(LowerBound(StudyAreas/rdc_Noord_Holland))[Meter];
		parameter<Meter> x_max_Noord_Holland := PointCol(UpperBound(StudyAreas/rdc_Noord_Holland))[Meter];
		parameter<Meter> y_min_Noord_Holland := PointRow(LowerBound(StudyAreas/rdc_Noord_Holland))[Meter];
		parameter<Meter> y_max_Noord_Holland := PointRow(UpperBound(StudyAreas/rdc_Noord_Holland))[Meter];
		
		parameter<Meter> x_min_Friesland     := PointCol(Lower_Bound(SourceData/RegioIndelingen/Provincie/Per_Prov/Friesland/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Friesland]]))[Meter];
		parameter<Meter> x_max_Friesland     := PointCol(Upper_Bound(SourceData/RegioIndelingen/Provincie/Per_Prov/Friesland/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Friesland]]))[Meter];
		parameter<Meter> y_min_Friesland     := PointRow(Lower_Bound(SourceData/RegioIndelingen/Provincie/Per_Prov/Friesland/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Friesland]]))[Meter];
		parameter<Meter> y_max_Friesland     := PointRow(Upper_Bound(SourceData/RegioIndelingen/Provincie/Per_Prov/Friesland/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Friesland]]))[Meter];
		
		parameter<Meter> x_min_Utrecht     := PointCol(Lower_Bound(SourceData/RegioIndelingen/Provincie/Per_Prov/Utrecht/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Utrecht]]))[Meter];
		parameter<Meter> x_max_Utrecht     := PointCol(Upper_Bound(SourceData/RegioIndelingen/Provincie/Per_Prov/Utrecht/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Utrecht]]))[Meter];
		parameter<Meter> y_min_Utrecht     := PointRow(Lower_Bound(SourceData/RegioIndelingen/Provincie/Per_Prov/Utrecht/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Utrecht]]))[Meter];
		parameter<Meter> y_max_Utrecht     := PointRow(Upper_Bound(SourceData/RegioIndelingen/Provincie/Per_Prov/Utrecht/geometry_base[0[SourceData/RegioIndelingen/Provincie/Per_Prov/Utrecht]]))[Meter];
	}
	
	parameter<Meter> x_min := ='min_max/x_min_'+/ModelParameters/StudyArea;
	parameter<Meter> x_max := ='min_max/x_max_'+/ModelParameters/StudyArea;
	parameter<Meter> y_min := ='min_max/y_min_'+/ModelParameters/StudyArea;
	parameter<Meter> y_max := ='min_max/y_max_'+/ModelParameters/StudyArea;
	
	container perGridsize := for_each_ne(Gridsizes/name, 'Create_GridDomain_T('+string(Gridsizes/size)+'[Meter])');
	
	unit<uint8> Matrix : nrofrows = 26
	{
		attribute<meter> Size : [ 0, 17, 25, 50, 100, 150, 200, 300, 400, 500, 600, 625, 700, 1000, 1250, 1500, 2000, 2250, 2500, 3250, 5000, 5250, 10000, 10250, 20000, 20250 ];
		attribute<string> name := 'pot'+string(size)+'m';
	}
	
	container Distmatrices_25m  := for_each_nex(Matrix/name, 'Distmatrices/Impl_25m/'+Matrix/name+'/PotRange', spoint);
	container Distmatrices_100m := for_each_nex(Matrix/name, 'Distmatrices/Impl_100m/'+Matrix/name+'/PotRange', spoint);
	
	unit<uint32> TileDomain := ='union_unit('+AsItemList('CreateTiles/LoopPolygons/'+string(CreateTiles/TileSet/name)+'/shape')+')'
	{
		attribute<rdc_meter>    geometry (poly) := ='union_data(.,'+AsItemList('CreateTiles/LoopPolygons/'+string(CreateTiles/TileSet/name)+'/shape/geometry')+')';
		attribute<string> name            := ='union_data(.,'+AsItemList('CreateTiles/LoopPolygons/'+string(CreateTiles/TileSet/name)+'/shape/name')+')';
	}
	
	#include<CreateTiles.dms>
	#include<Distmatrices.dms>
	#include<Create_GridDomain_T.dms>
	#include<ngr_layer.dms> // reference WMS layer
	
	
	parameter<string> AllocDomain_ref       := 'rdc_'+AllocDomain_ref_short;
	parameter<string> AdminDomain_ref       := 'rdc_'+AdminDomain_ref_short;
	parameter<string> AllocDomain_ref_short := ModelParameters/Advanced/AllocDomain_ref;
	parameter<string> AdminDomain_ref_short := ModelParameters/Advanced/AdminDomain_ref;

	unit<ipoint> AdminDomain := =ModelParameters/Advanced/AdminDomain_ref == '100m' ? 'Geography/rdc_100m' : 'Geography/rdc_25m' // Ruimtelijke resolutie waarop de allocatieresultaten worden geadminstreerd
	{
		parameter<string> name              := 'AdminDomain';
		attribute<bool>   IsCompactedDomain := AllocDomain/IsCompactedDomain[AllocDomain_rel];
		parameter<uint32> nr_cols           := ='uint32(/geography/perGridsize/size_'+(ModelParameters/Advanced/AdminDomain_ref == '100m' ? '100m' : '25m')+'/nr_cols)';
	}
	
	unit<ipoint> AllocDomain := =ModelParameters/Advanced/AllocDomain_ref == '100m' ? 'Geography/rdc_100m' : 'Geography/rdc_25m' // Ruimtelijke resolutie waarop de allocatie plaatsvindt (keuze-eenheid)
	{
		parameter<string> name              := 'AllocDomain';
		attribute<bool>   IsCompactedDomain := ./IsStudyArea;
		parameter<uint32> nr_cols           := ='uint32(/geography/perGridsize/size_'+(ModelParameters/Advanced/AllocDomain_ref == '100m' ? '100m' : '25m')+'/nr_cols)';
	}
	
	unit<uint64> CompactedAllocDomain := select_with_attr_by_org_rel(AllocDomain, AllocDomain/IsCompactedDomain), DialogType = "map", DialogData = "per_AllocDomain" // Subset van het AllocDomain, om rekentijd en geheugengebruik te beperken
	{
		parameter<string>               name                          := 'CompactedAllocDomain';
		parameter<units/Ha>             NrHaPerCell                   := AllocDomain/NrHaPerCell;
		attribute<.>                    per_AllocDomain (AllocDomain) := invert(AllocDomain_rel), KeepData = "true";
		
		attribute<AllocDomain>          AllocDomain_rel               := org_rel;
		attribute<AdminDomain>          AdminDomain_rel               := AllocDomain/AdminDomain_rel[AllocDomain_rel]; 
		attribute<CompactedAdminDomain> CompactedAdminDomain_rel      := rlookup(AdminDomain_rel, CompactedAdminDomain/AdminDomain_rel);
		attribute<.>                    CompactedAllocDomain_rel      := id(.);
	}
	
	unit<uint64> CompactedAdminDomain := select_with_attr_by_org_rel(AdminDomain, AdminDomain/IsCompactedDomain), DialogType = "map", DialogData = "per_AdminDomain" // Subset van het AdminDomain, om rekentijd en geheugengebruik te beperken
	{
		parameter<string>               name                          := 'CompactedAdminDomain';
		parameter<units/Ha>             NrHaPerCell                   := AdminDomain/NrHaPerCell;
		attribute<.>                    per_AdminDomain (AdminDomain) := invert(AdminDomain_rel), KeepData = "true";
		attribute<AdminDomain>          AdminDomain_rel               := org_rel; 
		attribute<AllocDomain>          AllocDomain_rel               := AdminDomain/AllocDomain_rel[AdminDomain_rel]; 
		attribute<CompactedAllocDomain> CompactedAllocDomain_rel      := rlookup(AllocDomain_rel, CompactedAllocDomain/AllocDomain_rel), KeepData = "true";
		attribute<.>                    CompactedAdminDomain_rel      := id(.);
		attribute<geography/rdc_meter>  point                         := AdminDomain/point[org_rel];
	}
	
}