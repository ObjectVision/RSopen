////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Dit is RSOpen, de open source versie van het model RuimteScanner. Het scipt wordt uitgegeven onder GNU-GPL licentie.
//
// RSOpen is ontwikkeld door PBL Planbureau voor de Leefomgeving, i.s.m Object Vision B.V. en VU Vrije Universiteit Amsterdam.
// Opdrachtgever/ontwikkelaar PBL: Bart Rijken
// Contactpersoon/ontwikkelaar Object Vision B.V.: Jip Claassens (jclaassens@objectvision.nl)
// Contacpersoon PBL: Bas van Bemmel (Bas.vanBemmel@pbl.nl)
//
// Deze file specificeert de verschillende grid domains die kunnen worden gebruikt in het model, regioindelingen, en afstandsmatrices.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

container Geography: Using = "Units"
{
	unit<fpoint> rdc_meter_base   : DialogData = "ngr_layer", SpatialReference = "EPSG:28992";
	unit<fpoint> rdc_meter        := range(rdc_meter_base, point(y_min, x_min), point(y_max, x_max));
	unit<dpoint> rdc_meter_64     := range(rdc_meter_base, point(float64(y_min), float64(x_min)), point(float64(y_max), float64(x_max)));
	unit<ipoint> rdc_mm_i32       := gridset(rdc_meter_64,  point(0.001, 0.001), point(0.0, 0.0), ipoint); // fka point_rd_mm
	unit<fpoint> LambertEA_base   : SpatialReference = "EPSG:3035", DialogData = "ngr_layer_lea"; 
	unit<fpoint> LambertEA        := range(LambertEA_base, point(2500000f, 1300000f), point(4900000f, 4300000f));
	unit<dpoint> wgs84_base       : SpatialReference = "EPSG:4326";
	
	unit<uint32> Gridsizes : nrofrows = 7
	{
		attribute<string>  size_str : ['2.5', '5', '10', '25', '100', '250', '500'];
		attribute<Meter>   size     := size_str[Meter];
		
		attribute<string>  name0    := 'size_'+string(size)+'m';
		attribute<string>  name     := replace(name0, '2.5', '2_5');
	}
	
	unit<ipoint> rdc_2_5m  := perGridsize/size_2_5m/domain;
	unit<ipoint> rdc_5m    := perGridsize/size_5m/domain;
	unit<ipoint> rdc_10m   := perGridsize/size_10m/domain;
	unit<ipoint> rdc_25m   := perGridsize/size_25m/domain;
	unit<ipoint> rdc_100m  := perGridsize/size_100m/domain;
	unit<ipoint> rdc_250m  := perGridsize/size_250m/domain;
	unit<ipoint> rdc_500m  := perGridsize/size_500m/domain;
	
	parameter<Meter> x_min := 0[Meter];
	parameter<Meter> x_max := 280000[Meter];
	parameter<Meter> y_min := 300000[Meter];
	parameter<Meter> y_max := 625000[Meter];
	
	container perGridsize := for_each_ne(Gridsizes/name, 'Create_GridDomain_T('+string(Gridsizes/size)+'[Meter])');
	
	unit<uint8> Matrix : nrofrows = 23
	{
		attribute<meter> Size : [ 0, 17, 25, 50, 100, 150, 200, 300, 500, 625, 1000, 1250, 1500, 2000, 2250, 2500, 3250, 5000, 5250, 10000, 10250, 20000, 20250 ];
		attribute<string> name := 'pot'+string(size)+'m';
	}
	
	container Distmatrices_25m  := for_each_nex(Matrix/name, 'Distmatrices/Impl_25m/'+Matrix/name+'/PotRange', spoint);
	container Distmatrices_100m := for_each_nex(Matrix/name, 'Distmatrices/Impl_100m/'+Matrix/name+'/PotRange', spoint);
	
	unit<uint32> TileDomain := ='union_unit('+AsItemList('CreateTiles/LoopPolygons/'+string(CreateTiles/TileSet/name)+'/shape')+')'
	{
		attribute<rdc_meter>    geometry (poly) := ='union_data(.,'+AsItemList('CreateTiles/LoopPolygons/'+string(CreateTiles/TileSet/name)+'/shape/geometry')+')';
		attribute<string> name            := ='union_data(.,'+AsItemList('CreateTiles/LoopPolygons/'+string(CreateTiles/TileSet/name)+'/shape/name')+')';
	}
	
	#include<CreateTiles.dms>
	#include<Distmatrices.dms>
	#include<RegioIndelingen.dms>
	#include<Create_GridDomain_T.dms>
	#include<ngr_layer.dms> // reference WMS layer
}