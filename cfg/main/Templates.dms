////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Dit is RSOpen, de open source versie van het model RuimteScanner. Het scipt wordt uitgegeven onder GNU-GPL licentie.
//
// RSOpen is ontwikkeld door PBL Planbureau voor de Leefomgeving, i.s.m Object Vision B.V. en VU Vrije Universiteit Amsterdam.
// Opdrachtgever/ontwikkelaar PBL: Bart Rijken
// Contactpersoon/ontwikkelaar Object Vision B.V.: Jip Claassens (jclaassens@objectvision.nl)
// Contacpersoon PBL: Bas van Bemmel (Bas.vanBemmel@pbl.nl)
//
// Deze file bevat templates ofwel rekenschema's: stukken script die in verschillende contexten worden gebruikt
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

container Templates: Using = "Units;Geography;SourceData/RegioIndelingen;Classifications;Classifications/Vastgoed;Classifications/Actor" 
{
	container Allocatie
	{
		#include<Allocatie/Zichtjaar_T.dms>
		#include<Allocatie/Sequence_T.dms>
		#include<Allocatie/SectorAllocRegio_T.dms>
		#include<Allocatie/Iter_T.dms>
		#include<Allocatie/IterSubsector_T.dms>
		#include<Allocatie/IterSubsector_T_Wonen.dms>
		#include<Allocatie/IterSubsector_T_Wind.dms>
		#include<Allocatie/StatePrep_T.dms>
	}

	#include<Indicatoren.dms>
	
	container Suitabilities
	{
		#include<Suitabilities/Woningwaarde.dms>
		#include<Suitabilities/Woningwaarde_perWoningType.dms> //voor verwervingskosten
		#include<Suitabilities/Suitability_Zichtjaar_T.dms>
		#include<Suitabilities/Suitability_Wonen_perSubsector_T.dms>
		#include<Suitabilities/Suitability_Wonen_perOP_T.dms>
	}
	
	container Beschikbaarheden
	{
		#include<Beschikbaarheden/Wind_BepaalGeschikteCellenPerStempel_T.dms>
		#include<Beschikbaarheden/Zeef_T.dms>
		#include<Beschikbaarheden/Zeef_Basisjaar_T.dms>
		#include<Beschikbaarheden/Zeef_Wonen_perOP_T.dms>
		#include<Beschikbaarheden/Zeef_Wonen_perSubsector_T.dms>
		#include<Beschikbaarheden/Zeef_Zichtjaar_T.dms>
	}
	
	container Landgebruikskaart
	{
		#include<Landgebruikskaart/GetNieuwGrouped_T.dms>
		#include<Landgebruikskaart/LU_Zichtjaar_T.dms>
		#include<Landgebruikskaart/Make_Landgebruikskaart_Basisjaar_T.dms>
	}

	#include<Claims.dms>
	#include<Trede.dms>
	#include<Densities.dms>
	#include<CaseClassifications.dms>
	#include<BereikbaarheidGroen.dms>
	#include<SSM2017_Overstromingsschades.dms>
	#include<SimplifyT.dms>
	#include<BAG_GebruiksdoelSets_T.dms> 
	
	
	
	Template MaakRestrictieCombinaties_T
	{
		parameter<string> Sector; 
		
		parameter<string> CombinatieRef := ='VariantParameters/VariantK/RestrictiesVariant_'+Sector+'[Variant_rel]';
		container         src           := ='SourceData/Restricties/'+Sector;
		
		parameter<string> ZeerHardHardMiddelZacht := 'src/ZeerHard || src/Hard     || src/Middel   || src/Zacht';
		parameter<string> ZeerHardHardMiddel      := 'src/ZeerHard || src/Hard     || src/Middel';
		parameter<string> HardMiddelZacht         :=                 'src/Hard     || src/Middel   || src/Zacht';
		parameter<string> ZeerHardHard            := 'src/ZeerHard || src/Hard';
		parameter<string> HardMiddel              :=                 'src/Hard     || src/Middel';
		parameter<string> MiddelZacht             :=                                 'src/Middel   || src/Zacht';
		parameter<string> ZeerHard                := 'src/ZeerHard';
		parameter<string> Hard                    :=                 'src/Hard';
		parameter<string> Middel                  :=                                 'src/Middel';
		parameter<string> Zacht                   :=                                                 'src/Zacht';
		
		attribute<bool>   Result (AdminDomain) := =switch(
													  case(CombinatieRef == 'ZeerHardHardMiddelZacht', ZeerHardHardMiddelZacht)
													, case(CombinatieRef == 'ZeerHardHardMiddel'     , ZeerHardHardMiddel)
													, case(CombinatieRef == 'ZeerHardHard'           , ZeerHardHard)
													, case(CombinatieRef == 'ZeerHard'               , ZeerHard)
													, case(CombinatieRef == 'HardMiddelZacht'        , HardMiddelZacht)
													, case(CombinatieRef == 'HardMiddel'             , HardMiddel)
													, case(CombinatieRef == 'Hard'                   , Hard)
													, case(CombinatieRef == 'MiddelZacht'            , MiddelZacht)
													, case(CombinatieRef == 'Middel'                 , Middel)
													, case(CombinatieRef == 'Zacht'                  , Zacht)
													, 'const(FALSE, AdminDomain)'
												);
	}
	
	Template MaakStimuliCombinaties_T
	{
		parameter<string> Sector;
		//
		parameter<string> CombinatieRef := ='VariantParameters/VariantK/StimuliVariant_'+Sector+'[Variant_rel]';
		container         src           := ='SourceData/Stimuli/'+Sector;
		
		parameter<string> HardMiddelZacht         :=                 'src/Hard     || src/Middel   || src/Zacht';
		parameter<string> HardMiddel              :=                 'src/Hard     || src/Middel';
		parameter<string> MiddelZacht             :=                                 'src/Middel   || src/Zacht';
		parameter<string> Hard                    :=                 'src/Hard';
		parameter<string> Middel                  :=                                 'src/Middel';
		parameter<string> Zacht                   :=                                                 'src/Zacht';
		
		attribute<bool>   Result (AdminDomain) := =switch(
													  case(CombinatieRef == 'HardMiddelZacht'        , HardMiddelZacht)
													, case(CombinatieRef == 'HardMiddel'             , HardMiddel)
													, case(CombinatieRef == 'Hard'                   , Hard)
													, case(CombinatieRef == 'MiddelZacht'            , MiddelZacht)
													, case(CombinatieRef == 'Middel'                 , Middel)
													, case(CombinatieRef == 'Zacht'                  , Zacht)
													, 'const(FALSE, AdminDomain)'
												);
	}
	
	Template PotentieleState_T
	{
		//
		parameter<string> Zichtjaar_name;
		// container Zeef;
		container Density;
		//
		
		container Per_SectorXSubsectoren := 
			for_each_ne(
				Sector/XSubsector/name
				, 'PotentieleState_SectorXSubsectoren_T('+string(id(Sector/XSubsector))+'[Sector/XSubsector], Zichtjaar_name, Density)'
			)
		{
			container Landbouw
			{
				container NonLandbouw 
				{
					attribute<bool>    Beschikbaar_zichtjaar   (CompactedAdminDomain) := const(true,CompactedAdminDomain);
					attribute<float32> Zichtjaar               (CompactedAdminDomain) := AdminDomain/NrHaPerCell * float32(Beschikbaar_zichtjaar);
				}
			}
		}
		container Per_Sector := for_each_ne(Sector/name, 'PotentieleState_Sector_T('+string(id(Sector))+'[Sector], Per_SectorXSubsectoren)');
	}
	
	Template PotentieleState_SectorXSubsectoren_T
	{
		//
		parameter<Sector/XSubsector> id;
		parameter<string> Zichtjaar_name;
		// container Zeef;
		container Density;
		//
		
		attribute<bool>    IsBeschikbaar_basisjaar   (CompactedAdminDomain) := = 'Zeef/Basisjaar/'+Sector/XSubsector/name[id]+'/IsBeschikbaar';
		attribute<bool>    IsBeschikbaar_zichtjaar   (CompactedAdminDomain) := = 'Zeef/'+Zichtjaar_name+'/SectorXSubsectoren/'+Sector/XSubsector/name[id]+'/IsBeschikbaar';
		attribute<float32> BAG_nieuwbouw (CompactedAdminDomain) := ='collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, BaseData/StartState/BAG_nieuwbouw/'+Sector/XSubsector/name[id]+')';
		
		attribute<float32> Basisjaar     (CompactedAdminDomain) := ='StateBasisjaar/'+Sector/XSubsector/name[id]+ ' * float32(IsBeschikbaar_basisjaar)'
		{
			attribute<float32> SubSectorShare (CompactedAllocDomain) := = 'sum(., CompactedAdminDomain/CompactedAllocDomain_rel) / sum(Per_Sector/'+Sector/XSubsector/Sector_name[id]+'/Basisjaar, CompactedAdminDomain/CompactedAllocDomain_rel)';
		}
		
		attribute<float32> Zichtjaar                          (CompactedAdminDomain) := ='Density/Per_CompactedAllocDomain/'+Zichtjaar_name+'/SectorXSubsectoren/'+Sector/XSubsector/name[id]+'/Zichtjaar[CompactedAdminDomain/CompactedAllocDomain_rel] * AdminDomain/NrHaPerCell * float32(IsBeschikbaar_zichtjaar)';
		attribute<float32> Zichtjaar_BeschikbaarheidBasisjaar (CompactedAdminDomain) := ='Density/Per_CompactedAllocDomain/'+Zichtjaar_name+'/SectorXSubsectoren/'+Sector/XSubsector/name[id]+'/Zichtjaar[CompactedAdminDomain/CompactedAllocDomain_rel] * AdminDomain/NrHaPerCell * float32(IsBeschikbaar_basisjaar)';
		attribute<float32> Result_CompactedAdminDomain        (CompactedAdminDomain) := = 'Zichtjaar_BeschikbaarheidBasisjaar - Per_Sector/'+Sector/XSubsector/Sector_name[id]+'/Basisjaar';
		
		attribute<float32> Result                      (CompactedAllocDomain) := sum(Result_CompactedAdminDomain, CompactedAdminDomain/CompactedAllocDomain_rel);
		attribute<float32> TovStateVoorAllocatie       (CompactedAllocDomain) := = 'Result / sum(Per_Sector/'+Sector/XSubsector/Sector_name[id]+'/Basisjaar, CompactedAdminDomain/CompactedAllocDomain_rel)';
	}
	
	Template PotentieleState_Sector_T
	{
		//
		parameter<Sector> id;
		container Per_SectorXSubsectoren;
		//
		
		unit<uint8> SubSector := = Sector/Subsector_ref[id];
		
		attribute<float32> Basisjaar (CompactedAdminDomain) := = 'add('+AsItemList('Per_SectorXSubsectoren/'+Sector/name[id]+'/'+SubSector/name+'/Basisjaar')+')';
		attribute<float32> Zichtjaar (CompactedAdminDomain) := = 'value(add('+AsItemList('Per_SectorXSubsectoren/'+Sector/name[id]+'/'+SubSector/name+'/Zichtjaar')+'), float32)';
	}
	
	Template SectorXSubSector_T : using = "/Classifications/Vastgoed;classifications/actor"
	{
		//
		parameter<string> sector_name;
		parameter<string> subsector_name0;
		//
		parameter<sector> sector_rel         := rlookup(sector_name, sector/name);
		
		unit<uint8> CBSAggrKlasse := Grondgebruik/CBSKlasse/Aggr;
		unit<uint8> SubSector := = subsector_name0
		{
			attribute<string> Sector_name               := const(../sector_name,.);
			attribute<string> Subsector_name            := =subsector_name0+'/name';
			attribute<string> SrcRefGeschiktheid        := replace(Sector/SrcRefGeschiktheid[sector_rel], '@SS@', SubSector_name);
			attribute<string> SrcRefRestricties         := Sector/SrcRefRestricties[sector_rel];
			attribute<string> SubSector_ref             := Sector/Subsector_ref[sector_rel];
			attribute<string> ValUnit_ref               := Sector/ValUnit_ref[sector_rel];
			attribute<string> ValUnitDens_ref           := Sector/ValUnitDens_ref[sector_rel];
			attribute<string> name                      := Sector_name+'/'+SubSector_name;
			attribute<string> Label                     := Sector_name+'_'+SubSector_name;
			attribute<string> SectorAllocRegio_name     := rjoin(Sector_name, CaseClassifications/Actor/SectorAllocRegio/Sector_name, CaseClassifications/Actor/SectorAllocRegio/name);
			attribute<string> ClaimRegio_path           := rjoin(Sector_name, CaseClassifications/Actor/SectorAllocRegio/Sector_name, CaseClassifications/Actor/SectorAllocRegio/AllocRegio_path);
			attribute<Jobs6>  Jobs6_rel                 :=  =subsector_name0+'/jobs6_rel';
			
			attribute<string> StandVar_name             := replace(Sector/StandVar_name[sector_rel], '@SS@', SubSector_name);
			attribute<string> StandVar_valuetype        := Sector/StandVar_valuetype[sector_rel];
			attribute<string> StandVar_PF_name          := = ../sector_name == 'Werken' ? 'replace(WerkenK/StandVar_PF_name[0[WerkenK]], ''@SS@'', SubSector_name)' : 'const(null_str,.)';
			attribute<string> StandVar_PF_path          := = ../sector_name == 'Werken' ? '''PandFootprint/'' +SubSector_name' : 'const(null_str,.)';
			attribute<string> StandVar_PF_valuetype     := = ../sector_name == 'Werken' ? 'const(''float32'',.)' : 'const(null_str,.)';
			attribute<string> StandVar_PF_unit          := = ../sector_name == 'Werken' ? 'const(''meter2'',.)' : 'const(null_str,.)';
			
			attribute<bool>   HasClaims                 := Sector/HasClaims[sector_rel];
			attribute<bool>   HasAlloc                  := Sector/HasAlloc[sector_rel];
			attribute<bool>   IsVastgoed                := Sector/IsVastgoed[sector_rel];
			attribute<bool>   UseForLeegstandCorr       := Sector/UseForLeegstandCorr[sector_rel];
			
			attribute<bool>   HasClaims_PF              := = ../sector_name == 'Werken' ? 'const(WerkenK/HasClaims_PF[0[WerkenK]],.)' : 'const(null_bool,.)';
			attribute<bool>   HasAlloc_PF               := = ../sector_name == 'Werken' ? 'const(WerkenK/HasAlloc_PF[0[WerkenK]],.)' : 'const(FALSE,.)';
			attribute<bool>   IsVastgoed_PF             := = ../sector_name == 'Werken' ? 'const(WerkenK/IsVastgoed_PF[0[WerkenK]],.)' : 'const(FALSE,.)';
			attribute<bool>   UseForLeegstandCorr_PF    := = ../sector_name == 'Werken' ? 'const(WerkenK/UseForLeegstandCorr_PF[0[WerkenK]],.)' : 'const(FALSE,.)';
		}
	}
	
	Template Zonneladder_Union_T
	{
		//
		unit<uint32> domain;
		attribute<rdc_meter> geometry (domain, poly);
		parameter<classifications/Zonneladder/LadderTreden> Laddertrede_rel;
		//
	
		unit<uint32> unioned_domain := bp_split_union_polygon(geometry[rdc_cm])
		{
			attribute<classifications/Zonneladder/LadderTreden> Laddertrede_rel := const(../Laddertrede_rel, ., classifications/Zonneladder/LadderTreden);
			attribute<bool> Defined_per_rdc_10m           (rdc_10m) := IsDefined(poly2grid(geometry[rdc_meter], rdc_10m));
			attribute<bool> Defined_per_AllocDomain0 (AllocDomain) := sum_uint32(Defined_per_rdc_10m, /Geography/rdc_10m/AllocDomain_rel) > 0;
			attribute<bool> Defined_per_AllocDomain  (AllocDomain) := Defined_per_AllocDomain0 && !BaseData/Omgeving/GrootWater1500mBuffer;
		}
		
		attribute<rdc_meter> unioned_geometry (unioned_domain, poly) := unioned_domain/geometry[rdc_meter];
	}
	
	Template Zonneladder_Isoperimetrisch_quotient_T
	{
		attribute<meter2> area (domain);
		attribute<meter> length (domain);
		
		unit<uint32> domain;
		parameter<float32> paramPi := pi()[float32];
		
		attribute<float32> Isoperimetrisch_quotient (domain) := (4f*paramPi*area)/sqr(length);//https://nl.wikipedia.org/wiki/Isoperimetrisch_quoti%C3%ABnt	IQ={4pi Area}/{arc_length^{2}
	}
	
	template Zonneladder_ProcessTilesT
	{
		// begin case parameters
		parameter<string> TileName;
		unit<uint32> targetdomain;
		parameter<float32> minimum_opp;
		// end case parameters
		
		unit<uint32> Tile_selection := select_with_org_rel(geography/TileDomain/name == TileName)
		{
			attribute<rdc_meter>  geometry (poly) := geography/tiledomain/geometry[org_rel];
			
			unit<uint32> target_geom_in_tile := bp_overlay_polygon(geometry[rdc_cm], targetdomain/geometry[rdc_cm])
			{
				parameter<meter2>    area := sum(area(geometry[rdc_meter], meter2));
				unit<uint32> Multi_to_singlepart_polygons := bp_split_union_polygon(geometry)
				{
					parameter<bool>   check_p := area <= target_geom_in_tile/area * 1.01f;
					parameter<bool>   check_m := area >= target_geom_in_tile/area * 0.99f;
					parameter<meter2> area    := sum(area(geometry[rdc_meter], meter2));
					attribute<rdc_meter> geometry_checked (poly) := geometry[rdc_meter], IntegrityCheck = "check_p && check_m";
				}
			}
		}
	}
	
	Template PointBuffer
	{
		//
		unit<uint32> centre_point_set;
		parameter<float32> radius; //in meter
		//
		
		unit<uint32> Circle : nrofrows = 65
		{
			attribute<float32> angle := float32(id(.)) * 2f * float32(pi()) / 64f;
			attribute<float32> x     := cos(angle);
			attribute<float32> y     := sin(angle);
		}
		
		unit<uint32> pointset := combine(centre_point_set, Circle)
		{
			attribute<rdc_meter> point :=
				point_yx(
					 pointrow(centre_point_set/geometry[first_rel][rdc_meter]) + radius * float32(Circle/x[second_rel])
					,pointcol(centre_point_set/geometry[first_rel][rdc_meter]) + radius * float32(Circle/y[second_rel])
					,rdc_meter
				);
			
			attribute<uint32> ordinal  := second_rel;
			attribute<uint32> sequence := first_rel;
		}
		
		attribute<rdc_meter> geometry (poly, centre_point_set) := points2sequence(pointset/point, pointset/sequence, pointset/ordinal);
	}
	
	Template Buffer_gridcel_T // voor buffer points bepaling 
	{
		attribute<bool> TeBufferen_src (CompactedAdminDomain);
		parameter<float32> buffersize;
		attribute<bool> TeBufferen (AdminDomain) := TeBufferen_src[invert(CompactedAdminDomain/AdminDomain_rel)];
		
		parameter<int16> gridbuffersize := roundup(buffersize / AdminDomain/gridsize)[int16];
		
		unit<spoint> kernel_buffer  := range(spoint, point_yx(-(gridbuffersize -1s), -(gridbuffersize -1s)), point_yx(gridbuffersize,gridbuffersize))
		{
			attribute<uint32>  dist     := dist2(point_yx(0s, 0s, .), uint32);
			attribute<float32> distMatr := dist <= 5 ? 1f : 0f;
		}
		attribute<float32> proximity_arg          (AdminDomain) := float32(TeBufferen);
		parameter<bool> IsErIetsTeBufferen                      := sum_uint32(TeBufferen) != 0;
		attribute<bool> proximity_res_AdminDomain (AdminDomain) := IsErIetsTeBufferen ? potential(proximity_arg, kernel_buffer/distMatr)  > 0.5f : const(FALSE, AdminDomain);
		attribute<bool> proximity_res    (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, proximity_res_AdminDomain);
	}
	
	Template OV_halte_bereikbaarheid_T
	{
		//
		parameter<Classifications/bereikbaarheid/OV_halte_bereikbaarheidK/CombiK> id;
		unit<ipoint> domain;
		//
		
		parameter<string> SrcRef: ['%RSo_DataDir%/Omgeving/OV_halte_bereikbaarheid/OD_korste_@Maat@_@HHMod@_eerstehaltevan_@OVMod@_@OVInt@.tif'];
		
		attribute<sec> Resultaat (domain): StorageName =
			"= replace(SrcRef,
				'@Maat@',  Classifications/Bereikbaarheid/OV_halte_bereikbaarheidK/CombiK/MaatK_SrcRef[id],
				'@HHMod@', Classifications/Bereikbaarheid/OV_halte_bereikbaarheidK/CombiK/HhModK_SrcRef[id],
				'@OVMod@', Classifications/Bereikbaarheid/OV_halte_bereikbaarheidK/CombiK/OVModK_SrcRef[id],
				'@OVInt@', Classifications/Bereikbaarheid/OV_halte_bereikbaarheidK/CombiK/OVIntK_SrcRef[id]
			)";
	}
	
	#include <combine2bestanden.dms>
}