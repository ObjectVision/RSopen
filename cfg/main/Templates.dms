////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Dit is RSOpen, de open source versie van het model RuimteScanner. Het scipt wordt uitgegeven onder GNU-GPL licentie.
//
// RSOpen is ontwikkeld door PBL Planbureau voor de Leefomgeving, i.s.m Object Vision B.V. en VU Vrije Universiteit Amsterdam.
// Opdrachtgever/ontwikkelaar PBL: Bart Rijken
// Contactpersoon/ontwikkelaar Object Vision B.V.: Jip Claassens (jclaassens@objectvision.nl)
// Contacpersoon PBL: Bas van Bemmel (Bas.vanBemmel@pbl.nl)
//
// Deze file bevat templates ofwel rekenschema's: stukken script die in verschillende contexten worden gebruikt
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

container Templates: using = "Units;Geography;SourceData/RegioIndelingen;Classifications;Classifications/Vastgoed;Classifications/Actor" 
{
	container Allocatie
	{
		#include<Allocatie/Zichtjaar_T.dms>
		#include<Allocatie/Sequence_T.dms>
		#include<Allocatie/SectorAllocRegio_T.dms>
		#include<Allocatie/Iter_T.dms>
		#include<Allocatie/Iter_Landbouw_T.dms>
		#include<Allocatie/IterSubsector_T.dms>
		#include<Allocatie/IterSubsector_T_Landbouw.dms>
		#include<Allocatie/IterSubsector_T_Wonen.dms>
		#include<Allocatie/IterSubsector_T_Wind.dms>
		#include<Allocatie/StatePrep_T.dms>
	}

	#include<Indicatoren.dms>
	
	container Suitabilities
	{
		#include<Suitabilities/Woningwaarde.dms>
		#include<Suitabilities/Woningwaarde_perWoningType.dms> //voor verwervingskosten
		#include<Suitabilities/Suitability_Zichtjaar_T.dms>
		#include<Suitabilities/Suitability_Wonen_perSubsector_T.dms>
		#include<Suitabilities/Suitability_Wonen_perOP_T.dms>
	}
	
	container Beschikbaarheden
	{
		#include<Beschikbaarheden/Wind_BepaalGeschikteCellenPerStempel_T.dms>
		#include<Beschikbaarheden/Zeef_T.dms>
		#include<Beschikbaarheden/Zeef_Basisjaar_T.dms>
		#include<Beschikbaarheden/Zeef_Wonen_perOP_T.dms>
		#include<Beschikbaarheden/Zeef_Wonen_perSubsector_T.dms>
		#include<Beschikbaarheden/Zeef_Zichtjaar_T.dms>
	}
	
	container Landgebruikskaart
	{
		#include<Landgebruikskaart/GetNieuwGrouped_T.dms>
		#include<Landgebruikskaart/LU_Zichtjaar_T.dms>
		#include<Landgebruikskaart/Make_Landgebruikskaart_Basisjaar_T.dms>
	}
	
	#include<Landbouw.dms>
	#include<Claims.dms>
	#include<Trede.dms>
	#include<Densities.dms>
	#include<CaseClassifications.dms>
	#include<BereikbaarheidGroen.dms>
	#include<SSM2017_Overstromingsschades.dms>
	#include<simplifyT.dms>
	#include<BAG_GebruiksdoelSets_T.dms> 
	#include<SOMERS_CO2_T.dms> 
	
	
	
	Template MaakRestrictieCombinaties_T
	{
		parameter<string> Sector; 
		
		parameter<string> CombinatieRef := ='lowercase(VariantParameters/VariantK/RestrictiesVariant_'+Sector+'[Variant_rel])';
		container         src           := ='SourceData/Restricties/'+Sector;
		
		parameter<string> ZeerHardHardMiddelZacht := 'src/ZeerHard || src/Hard     || src/Middel   || src/Zacht';
		parameter<string> ZeerHardHardMiddel      := 'src/ZeerHard || src/Hard     || src/Middel';
		parameter<string> HardMiddelZacht         :=                 'src/Hard     || src/Middel   || src/Zacht';
		parameter<string> ZeerHardHard            := 'src/ZeerHard || src/Hard';
		parameter<string> HardMiddel              :=                 'src/Hard     || src/Middel';
		parameter<string> MiddelZacht             :=                                 'src/Middel   || src/Zacht';
		parameter<string> ZeerHard                := 'src/ZeerHard';
		parameter<string> Hard                    :=                 'src/Hard';
		parameter<string> Middel                  :=                                 'src/Middel';
		parameter<string> Zacht                   :=                                                 'src/Zacht';
		
		attribute<bool>   Result (AdminDomain) := =switch(
													  case(CombinatieRef == lowercase('ZeerHardHardMiddelZacht'), ZeerHardHardMiddelZacht)
													, case(CombinatieRef == lowercase('ZeerHardHardMiddel')     , ZeerHardHardMiddel)
													, case(CombinatieRef == lowercase('ZeerHardHard')           , ZeerHardHard)
													, case(CombinatieRef == lowercase('ZeerHard')               , ZeerHard)
													, case(CombinatieRef == lowercase('HardMiddelZacht')        , HardMiddelZacht)
													, case(CombinatieRef == lowercase('HardMiddel')             , HardMiddel)
													, case(CombinatieRef == lowercase('Hard')                   , Hard)
													, case(CombinatieRef == lowercase('MiddelZacht')            , MiddelZacht)
													, case(CombinatieRef == lowercase('Middel')                 , Middel)
													, case(CombinatieRef == lowercase('Zacht')                  , Zacht)
													, 'const(FALSE, AdminDomain)'
												);
	}
	
	Template MaakStimuliCombinaties_T
	{
		parameter<string> Sector;
		//
		parameter<string> CombinatieRef := ='lowercase(VariantParameters/VariantK/StimuliVariant_'+Sector+'[Variant_rel])';
		container         src           := ='SourceData/Stimuli/'+Sector;
		
		parameter<string> HardMiddelZacht         :=                 'src/Hard     || src/Middel   || src/Zacht';
		parameter<string> HardMiddel              :=                 'src/Hard     || src/Middel';
		parameter<string> MiddelZacht             :=                                 'src/Middel   || src/Zacht';
		parameter<string> Hard                    :=                 'src/Hard';
		parameter<string> Middel                  :=                                 'src/Middel';
		parameter<string> Zacht                   :=                                                 'src/Zacht';
		
		attribute<bool>   Result (AdminDomain) := =switch(
													  case(CombinatieRef == lowercase('HardMiddelZacht')        , HardMiddelZacht)
													, case(CombinatieRef == lowercase('HardMiddel')             , HardMiddel)
													, case(CombinatieRef == lowercase('Hard')                   , Hard)
													, case(CombinatieRef == lowercase('MiddelZacht')            , MiddelZacht)
													, case(CombinatieRef == lowercase('Middel')                 , Middel)
													, case(CombinatieRef == lowercase('Zacht')                  , Zacht)
													, 'const(FALSE, AdminDomain)'
												);
	}
	
	Template PotentieleState_T
	{
		//
		parameter<string> Zichtjaar_name;
		// container Zeef;
		container Density;
		//
		
		container Per_SectorxSubsectoren := 
			for_each_ne(
				Sector/xSubsector/name
				, 'PotentieleState_SectorxSubsectoren_T('+string(id(Sector/xSubsector))+'[Sector/xSubsector], Zichtjaar_name, Density)'
			)
		{
			container Landbouw
			{
				container NonLandbouw 
				{
					attribute<bool>    IsBeschikbaar_zichtjaar   (CompactedAdminDomain) := const(TRUE,CompactedAdminDomain);
					attribute<float32> Zichtjaar               (CompactedAdminDomain) := AdminDomain/NrHaPerCell * float32(Beschikbaar_zichtjaar);
				}
			}
		}
		container Per_Sector := for_each_ne(Sector/name, 'PotentieleState_Sector_T('+string(id(Sector))+'[Sector], Per_SectorxSubsectoren)');
	}
	
	Template PotentieleState_SectorxSubsectoren_T
	{
		//
		parameter<Sector/xSubsector> id;
		parameter<string> Zichtjaar_name;
		// container Zeef;
		container Density;
		//
		
		attribute<bool>    IsBeschikbaar_basisjaar   (CompactedAdminDomain) := = 'Zeef/Basisjaar/'+Sector/xSubsector/name[id]+'/IsBeschikbaar';
		attribute<bool>    IsBeschikbaar_zichtjaar   (CompactedAdminDomain) := = 'Zeef/'+Zichtjaar_name+'/SectorxSubsectoren/'+Sector/xSubsector/name[id]+'/IsBeschikbaar';
		attribute<float32> BAG_nieuwbouw (CompactedAdminDomain) := ='collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, BaseData/StartState/BAG_nieuwbouw/'+Sector/xSubsector/name[id]+')';
		
		attribute<float32> Basisjaar     (CompactedAdminDomain) := ='StateBasisjaar/'+Sector/xSubsector/name[id]+ ' * float32(IsBeschikbaar_basisjaar)'
		{
			attribute<float32> SubsectorShare (CompactedAllocDomain) := = 'sum(., CompactedAdminDomain/CompactedAllocDomain_rel) / sum(Per_Sector/'+Sector/xSubsector/Sector_name[id]+'/Basisjaar, CompactedAdminDomain/CompactedAllocDomain_rel)';
		}
		
		attribute<float32> Zichtjaar                          (CompactedAdminDomain) := ='Density/Per_CompactedAllocDomain/'+Zichtjaar_name+'/SectorxSubsectoren/'+Sector/xSubsector/name[id]+'/Zichtjaar[CompactedAdminDomain/CompactedAllocDomain_rel] * AdminDomain/NrHaPerCell * float32(IsBeschikbaar_zichtjaar)';
		attribute<float32> Zichtjaar_BeschikbaarheidBasisjaar (CompactedAdminDomain) := ='Density/Per_CompactedAllocDomain/'+Zichtjaar_name+'/SectorxSubsectoren/'+Sector/xSubsector/name[id]+'/Zichtjaar[CompactedAdminDomain/CompactedAllocDomain_rel] * AdminDomain/NrHaPerCell * float32(IsBeschikbaar_basisjaar)';
		attribute<float32> Result_CompactedAdminDomain        (CompactedAdminDomain) := = 'Zichtjaar_BeschikbaarheidBasisjaar - Per_Sector/'+Sector/xSubsector/Sector_name[id]+'/Basisjaar';
		
		attribute<float32> Result                      (CompactedAllocDomain) := sum(Result_CompactedAdminDomain, CompactedAdminDomain/CompactedAllocDomain_rel);
		attribute<float32> TovStateVoorAllocatie       (CompactedAllocDomain) := = 'Result / sum(Per_Sector/'+Sector/xSubsector/Sector_name[id]+'/Basisjaar, CompactedAdminDomain/CompactedAllocDomain_rel)';
	}
	
	Template PotentieleState_Sector_T
	{
		//
		parameter<Sector> id;
		container Per_SectorxSubsectoren;
		//
		
		unit<uint8> Subsector := = Sector/Subsector_ref[id];
		
		attribute<float32> Basisjaar (CompactedAdminDomain) := = 'add('+AsItemList('Per_SectorxSubsectoren/'+Sector/name[id]+'/'+Subsector/name+'/Basisjaar')+')';
		attribute<float32> Zichtjaar (CompactedAdminDomain) := = 'value(add('+AsItemList('Per_SectorxSubsectoren/'+Sector/name[id]+'/'+Subsector/name+'/Zichtjaar')+'), float32)';
	}
	
	Template SectorxSubsector_T : using = "/Classifications/Vastgoed;Classifications/Actor"
	{
		//
		parameter<string> Sector_name;
		parameter<string> Subsector_name0;
		//
		// parameter<sector> Sector_rel         := rlookup(Sector_name, sector/name);
		
		unit<uint8> CBSAggrKlasse := Grondgebruik/CBSKlasse/Aggr;
		unit<uint8> Subsector := = Subsector_name0
		{
			attribute<string> Sector_name               := const(../Sector_name,.);
			attribute<string> Subsector_name            := =Subsector_name0+'/name';
			// attribute<string> Subsector_name_short      := =Subsector_name0+'/name_short';
			attribute<string> SrcRefGeschiktheid        := replace(Sector/SrcRefGeschiktheid[Sector_rel], '@SS@', Subsector_name);
			attribute<string> SrcRefRestricties         := Sector/SrcRefRestricties[Sector_rel];
			attribute<string> Subsector_ref             := Sector/Subsector_ref[Sector_rel];
			attribute<string> ValUnit_ref               := Sector/ValUnit_ref[Sector_rel];
			attribute<string> ValUnitDens_ref           := Sector/ValUnitDens_ref[Sector_rel];
			attribute<string> name                      := Sector_name+'/'+Subsector_name;
			// attribute<string> name_short                := Sector_name+'/'+Subsector_name_short;
			attribute<string> Label                     := Sector_name+'_'+Subsector_name;
			attribute<string> SectorAllocRegio_name     := rjoin(lowercase(Sector_name), lowercase(CaseClassifications/Actor/SectorAllocRegio/Sector_name), CaseClassifications/Actor/SectorAllocRegio/name);
			attribute<string> ClaimRegio_path           := rjoin(lowercase(Sector_name), lowercase(CaseClassifications/Actor/SectorAllocRegio/Sector_name), CaseClassifications/Actor/SectorAllocRegio/AllocRegio_path);
			attribute<Jobs6>  Jobs6_rel                 :=  =Subsector_name0+'/Jobs6_rel';
			
			attribute<string> StandVar_name             := replace(Sector/StandVar_name[Sector_rel], '@SS@', Subsector_name);
			attribute<string> StandVar_valueType        := Sector/StandVar_valueType[Sector_rel];
			attribute<string> StandVar_PF_name          := = lowercase(../Sector_name) == lowercase('Werken') ? 'replace(WerkenK/StandVar_PF_name[0[WerkenK]], ''@SS@'', Subsector_name)' : 'const(null_str,.)';
			attribute<string> StandVar_PF_path          := = lowercase(../Sector_name) == lowercase('Werken') ? '''PandFootprint/'' +Subsector_name' : 'const(null_str,.)';
			attribute<string> StandVar_PF_valueType     := = lowercase(../Sector_name) == lowercase('Werken') ? 'const(''float32'',.)' : 'const(null_str,.)';
			attribute<string> StandVar_PF_unit          := = lowercase(../Sector_name) == lowercase('Werken') ? 'const(''meter2'',.)' : 'const(null_str,.)';
			
			attribute<bool>   HasClaims                 := Sector/HasClaims[Sector_rel];
			attribute<bool>   HasAlloc                  := Sector/HasAlloc[Sector_rel];
			attribute<bool>   IsVastgoed                := Sector/IsVastgoed[Sector_rel];
			attribute<bool>   UseForLeegstandCorr       := Sector/UseForLeegstandCorr[Sector_rel];
			
			attribute<bool>   HasClaims_PF              := = lowercase(../Sector_name) == lowercase('Werken') ? 'const(WerkenK/HasClaims_PF[0[WerkenK]],.)' : 'const(FALSE,.)';
			attribute<bool>   HasAlloc_PF               := = lowercase(../Sector_name) == lowercase('Werken') ? 'const(WerkenK/HasAlloc_PF[0[WerkenK]],.)' : 'const(FALSE,.)';
			attribute<bool>   IsVastgoed_PF             := = lowercase(../Sector_name) == lowercase('Werken') ? 'const(WerkenK/IsVastgoed_PF[0[WerkenK]],.)' : 'const(FALSE,.)';
			attribute<bool>   UseForLeegstandCorr_PF    := = lowercase(../Sector_name) == lowercase('Werken') ? 'const(WerkenK/UseForLeegstandCorr_PF[0[WerkenK]],.)' : 'const(FALSE,.)';
		}
	}
	
	Template Zonneladder_Union_T
	{
		//
		unit<uint32> domain;
		attribute<rdc_meter> geometry (domain, poly);
		parameter<Classifications/Zonneladder/LadderTreden> Laddertrede_rel;
		//
	
		unit<uint32> unioned_domain := geos_split_union_polygon(geometry)
		{
			attribute<Classifications/Zonneladder/LadderTreden> Laddertrede_rel := const(../Laddertrede_rel, ., Classifications/Zonneladder/LadderTreden);
			attribute<bool> Defined_per_rdc_10m           (rdc_10m) := IsDefined(poly2grid(geometry, rdc_10m));
			attribute<bool> Defined_Per_AllocDomain0 (AllocDomain) := sum_uint32(Defined_per_rdc_10m, /Geography/rdc_10m/AllocDomain_rel) > 0;
			attribute<bool> Defined_Per_AllocDomain  (AllocDomain) := Defined_Per_AllocDomain0 && !BaseData/Omgeving/GrootWater1500mBuffer;
		}
		
		attribute<rdc_meter> unioned_geometry (unioned_domain, poly) := unioned_domain/geometry;
	}
	
	Template Zonneladder_Isoperimetrisch_quotient_T
	{
		attribute<meter2> area (domain);
		attribute<meter> Length (domain);
		
		unit<uint32> domain;
		parameter<float32> paramPi := pi()[float32];
		
		attribute<float32> Isoperimetrisch_quotient (domain) := (4f*paramPi*area)/sqr(Length);//https://nl.wikipedia.org/wiki/Isoperimetrisch_quoti%C3%ABnt	IQ={4pi area}/{arc_length^{2}
	}
	
	template Zonneladder_ProcessTilesT
	{
		// begin case Parameters
		parameter<string> Tilename;
		unit<uint32> TargetDomain;
		parameter<float32> minimum_opp;
		// end case Parameters
		
		unit<uint32> Tile_selection := select_with_org_rel(lowercase(Geography/TileDomain/name) == lowercase(Tilename))
		{
			attribute<rdc_meter>  geometry (poly) := Geography/tiledomain/geometry[org_rel];
			
			unit<uint32> target_geom_in_tile := geos_overlay_polygon(geometry, TargetDomain/geometry)
			{
				parameter<meter2>    area := sum(area(geometry, meter2_f64)[meter2]);
				unit<uint32> Multi_to_singlepart_polygons := geos_split_union_polygon(geometry)
				{
					parameter<bool>   check_p := area <= target_geom_in_tile/area * 1.01f;
					parameter<bool>   check_m := area >= target_geom_in_tile/area * 0.99f;
					parameter<meter2> area    := sum(area(geometry, meter2_f64)[meter2]);
					attribute<rdc_meter> geometry_checked (poly) := geometry, IntegrityCheck = "check_p && check_m", Descr = "Check om ervoor te zorgen areas kloppen en dus de geometrische operaties plausibele resultaten geven. Voornamelijk ingevoerd om kinderziektes uit geos/bg te detecteren." ;
				}
			}
		}
	}
	
	Template PointBuffer
	{
		//
		unit<uint32> centre_point_set;
		parameter<float32> radius; //in meter
		//
		
		unit<uint32> Circle : NrOfRows = 65
		{
			attribute<float32> angle := float32(id(.)) * 2f * float32(pi()) / 64f;
			attribute<float32> x     := cos(angle);
			attribute<float32> y     := sin(angle);
		}
		
		unit<uint32> pointset := combine(centre_point_set, Circle)
		{
			attribute<rdc_meter> point :=
				point_yx(
					 PointRow(centre_point_set/geometry[first_rel][rdc_meter]) + radius[float64] * float64(Circle/x[second_rel])
					,PointCol(centre_point_set/geometry[first_rel][rdc_meter]) + radius[float64] * float64(Circle/y[second_rel])
					,rdc_meter
				);
			
			attribute<uint32> ordinal  := second_rel;
			attribute<uint32> sequence := first_rel;
		}
		
		attribute<rdc_meter> geometry (poly, centre_point_set) := points2sequence(pointset/point, pointset/sequence, pointset/ordinal);
	}
	
	Template Buffer_gridcel_T // voor buffer points bepaling 
	{
		attribute<bool> TeBufferen_src (CompactedAdminDomain);
		parameter<float64> buffersize;
		attribute<bool> TeBufferen (AdminDomain) := TeBufferen_src[invert(CompactedAdminDomain/AdminDomain_rel)];
		
		parameter<int16> gridbuffersize := roundup(buffersize / AdminDomain/gridsize)[int16];
		
		unit<spoint> kernel_buffer  := range(spoint, point_yx(-(gridbuffersize -1s), -(gridbuffersize -1s)), point_yx(gridbuffersize,gridbuffersize))
		{
			attribute<uint32>  dist     := dist2(point_yx(0s, 0s, .), uint32);
			attribute<float32> distMatr := dist <= uint32(sqr(gridbuffersize)) ? 1f : 0f;
		}
		attribute<float32> proximity_arg          (AdminDomain) := float32(TeBufferen);
		parameter<bool> IsErIetsTeBufferen                      := sum_uint32(TeBufferen) != 0;
		attribute<bool> proximity_res_AdminDomain (AdminDomain) := IsErIetsTeBufferen ? potential(proximity_arg, kernel_buffer/distMatr)  > 0.5f : const(FALSE, AdminDomain);
		attribute<bool> proximity_res    (CompactedAdminDomain) := collect_by_cond(CompactedAdminDomain, AdminDomain/IsCompactedDomain, proximity_res_AdminDomain);
	}
	
	Template OV_halte_bereikbaarheid_T
	{
		//
		parameter<Classifications/bereikbaarheid/OV_halte_bereikbaarheidK/CombiK> id;
		unit<ipoint> domain;
		//
		
		parameter<string> SrcRef: ['%RSo_DataDir%/Omgeving/OV_halte_bereikbaarheid/OD_korste_@Maat@_@HHMod@_eerstehaltevan_@OVMod@_@OVInt@.tif'];
		
		attribute<sec> Resultaat (domain): StorageName =
			"= replace(SrcRef,
				'@Maat@',  Classifications/Bereikbaarheid/OV_halte_bereikbaarheidK/CombiK/MaatK_SrcRef[id],
				'@HHMod@', Classifications/Bereikbaarheid/OV_halte_bereikbaarheidK/CombiK/HhModK_SrcRef[id],
				'@OVMod@', Classifications/Bereikbaarheid/OV_halte_bereikbaarheidK/CombiK/OVModK_SrcRef[id],
				'@OVInt@', Classifications/Bereikbaarheid/OV_halte_bereikbaarheidK/CombiK/OVIntK_SrcRef[id]
			)";
	}
	
	#include <combine2bestanden.dms>
}