////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Dit is RSOpen, de open source versie van het model RuimteScanner. Het scipt wordt uitgegeven onder GNU-GPL licentie.
//
// RSOpen is ontwikkeld door PBL Planbureau voor de Leefomgeving, i.s.m Object Vision B.V. en VU Vrije Universiteit Amsterdam.
// Opdrachtgever/ontwikkelaar PBL: Bart Rijken
// Contactpersoon/ontwikkelaar Object Vision B.V.: Jip Claassens (jclaassens@objectvision.nl)
// Contacpersoon PBL: Bas van Bemmel (Bas.vanBemmel@pbl.nl)
//
// Deze file specificeert de fracties verharding en groen (per Type) op nieuw te ontwikkelen werklocaties.
// Bron: expert judgement PBL
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

container FractiesGroenInWerken // Voor gebruik op 100x100m resolutie. 100% (1) = Totaaloppervlak vd gridcel minus pandFootprint.
{
	// container Default
	// {
		// parameter<Float32> Verhard: [0.5]; // Verharde wegen, paden, parkeerplaatsen
		// parameter<Float32> GroenTotaal := 1f- Verhard; // inclusief groene infra (parkeerplaatsen)
	// }
	
	// container SW
	// {
		// parameter<Float32> Verhard := min_elem(Default/Verhard * VariantK/VerhardingTovDefault[VariantParameters/VariantK/V/SW], 1f);
		// parameter<Float32> GroenTotaal := 1f- Verhard;
	// }
	
	// container GL
	// {
		// parameter<Float32> Verhard := min_elem(Default/Verhard * VariantK/VerhardingTovDefault[VariantParameters/VariantK/V/GL], 1f);
		// parameter<Float32> GroenTotaal := 1f- Verhard;
	// }
	
	// container MO
	// {
		// parameter<Float32> Verhard := min_elem(Default/Verhard * VariantK/VerhardingTovDefault[VariantParameters/VariantK/V/MO], 1f);
		// parameter<Float32> GroenTotaal := 1f- Verhard;
	// }
	
	// container RG
	// {
		// parameter<Float32> Verhard := min_elem(Default/Verhard * VariantK/VerhardingTovDefault[VariantParameters/VariantK/V/RG], 1f);
		// parameter<Float32> GroenTotaal := 1f- Verhard;
	// }
	
	// container BAU
	// {
		// parameter<Float32> Verhard := min_elem(Default/Verhard * VariantK/VerhardingTovDefault[VariantParameters/VariantK/V/BAU], 1f);
		// parameter<Float32> GroenTotaal := 1f- Verhard;
	// }
	
	// container FractiesGrasBoomStruikInGroen // 100% (1) = Totaaloppervlak groen vd gridcel (zie hierboven)
	// {
		// container Default
		// {
			// parameter<Float32> Gras:   [0.6];
			// parameter<Float32> Boom:   [0.2];
			// parameter<Float32> Struik: [0.2];
		// }
		
		// container SW  := Default;
		// container GL  := Default;
		// container MO  := Default;
		// container RG  := Default;
		// container BAU := Default;
	// }
}