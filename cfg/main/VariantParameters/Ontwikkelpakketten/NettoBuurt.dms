////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Dit is RSOpen, de open source versie van het model RuimteScanner. Het scipt wordt uitgegeven onder GNU-GPL licentie.
//
// RSOpen is ontwikkeld door PBL Planbureau voor de Leefomgeving, i.s.m Object Vision B.V. en VU Vrije Universiteit Amsterdam.
// Opdrachtgever/ontwikkelaar PBL: Bart Rijken
// Contactpersoon/ontwikkelaar Object Vision B.V.: Jip Claassens (jclaassens@objectvision.nl)
// Contacpersoon PBL: Bas van Bemmel (Bas.vanBemmel@pbl.nl)
//
// Deze file specificeert een selectie aan default opties die virtuele projectontwikkelaars hebben t.a.v. de stedenbouwkiundige inrichting van gridcellen (AlocDomain) nieuw woongebied 
// Bron: expert judgement PBL
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

container NettoBuurt
{
	#include<Default_src.dms>
	
	unit<UInt8> Default := Default_src
	{
		container InUitgeefbaarExPandfootprint := T(/Variant_name, Default_src/InUitgeefbaarExPandfootprint, .);
		container InOpenbaar                   := T(/Variant_name, Default_src/InOpenbaar, .);
		container InNettoBuurt                 := InNettoBuurt_T(., InUitgeefbaarExPandfootprint, InOpenbaar);
		container InDezeBuurt                  := InNettoBuurt;
	}
	
	Template T: Descr = "Hier voeren we variant-specifieke factoren door op de default"
	{
		parameter<String> Variant_name;
		container Src;
		unit<UInt8> SrcUnit;
		
		attribute<Float32> Verhard      (SrcUnit) := = 'min_elem(Src/Verhard * VariantK/VerhardingTovDefault[VariantParameters/VariantK/V/'+Variant_name+'], 1f)';
		attribute<Float32> GroenEnWater (SrcUnit) := 1f - Verhard;
		attribute<Float32> Groen        (SrcUnit) := Src/Groen / add(Src/Groen, Src/Water) * GroenEnWater;
		attribute<Float32> Water        (SrcUnit) := 1f - Verhard - Groen;
		
		attribute<Float32> Gras    (SrcUnit) := MakeDefined(Src/Gras   / Src/Groen * Groen, 0f);
		attribute<Float32> Struik  (SrcUnit) := MakeDefined(Src/Struik / Src/Groen * Groen, 0f);
		attribute<Float32> Boom    (SrcUnit) := MakeDefined(Src/Boom   / Src/Groen * Groen, 0f);
	}
	
	Template InNettoBuurt_T: Descr = "Hier zetten we de fracties om in meter2"
	{
		//
		unit<UInt8> SrcUnit;
		container InUitgeefbaarExPandFootprint;
		container InOpenbaar;
		//
		
		attribute<Terreinoppervlak> Terreinoppervlakte (SrcUnit) := const(Ontwikkelpakketten/Terreinoppervlakte, SrcUnit)
		{
			attribute<Terreinoppervlak> Uitgeefbaar (SrcUnit) := . * SrcUnit/FractieUitgeefbaar
			{
				attribute<Terreinoppervlak> GebouwVoetafdruk (SrcUnit) := .. * SrcUnit/GroundSpaceIndex; // is per definitie de fractie voetafdruk van terreinopp nettobuurt; mag niet hoger zijn dan FractieUitgeefbaar
				attribute<Terreinoppervlak> Buitenruimte     (SrcUnit) := . - GebouwVoetafdruk
				{
					attribute<Terreinoppervlak> Verhard (SrcUnit) := . * InUitgeefbaarExPandFootprint/Verhard;
					attribute<Terreinoppervlak> Water   (SrcUnit) := . * InUitgeefbaarExPandFootprint/Water;
					attribute<Terreinoppervlak> Groen   (SrcUnit) := . * InUitgeefbaarExPandFootprint/Groen
					{
						attribute<Terreinoppervlak> Gras   (SrcUnit) := .. * InUitgeefbaarExPandFootprint/Gras;
						attribute<Terreinoppervlak> Boom   (SrcUnit) := .. * InUitgeefbaarExPandFootprint/Boom;
						attribute<Terreinoppervlak> Struik (SrcUnit) := .. * InUitgeefbaarExPandFootprint/Struik;
					}
				}
			}
			
			attribute<Terreinoppervlak> Openbaar (SrcUnit):= . * (1f - SrcUnit/FractieUitgeefbaar)
			{
				attribute<Terreinoppervlak> Verhard (SrcUnit) := . * InOpenbaar/Verhard;
				attribute<Terreinoppervlak> Water   (SrcUnit) := . * InOpenbaar/Water;
				attribute<Terreinoppervlak> Groen   (SrcUnit) := . * InOpenbaar/Groen
				{
					attribute<Terreinoppervlak> Gras   (SrcUnit) := .. * InOpenbaar/Gras;
					attribute<Terreinoppervlak> Boom   (SrcUnit) := .. * InOpenbaar/Boom;
					attribute<Terreinoppervlak> Struik (SrcUnit) := .. * InOpenbaar/Struik;
				}
			}
			
			attribute<Terreinoppervlak> Totaal (SrcUnit) := add(Uitgeefbaar, Openbaar)
			{
				attribute<Terreinoppervlak> GebouwVoetafdruk            (SrcUnit) := Uitgeefbaar/GebouwVoetafdruk; // is per definitie de fractie voetafdruk van terreinopp nettobuurt; mag niet hoger zijn dan FractieUitgeefbaar
				attribute<Terreinoppervlak> Verhard                     (SrcUnit) := add(Uitgeefbaar/Buitenruimte/Verhard, Openbaar/Verhard);
				attribute<Terreinoppervlak> GebouwVoetafdrukPlusVerhard (SrcUnit) := add(GebouwVoetafdruk, Verhard); // Deze gebruiken voor soil sealing
				
				attribute<Terreinoppervlak> Water (SrcUnit) := add(Uitgeefbaar/Buitenruimte/Water, Openbaar/Water);
				attribute<Terreinoppervlak> Groen (SrcUnit) := add(Uitgeefbaar/Buitenruimte/Groen, Openbaar/Groen)
				{
					attribute<Terreinoppervlak> Gras   (SrcUnit) := add(Uitgeefbaar/Buitenruimte/Groen/Gras, Openbaar/Groen/Gras);
					attribute<Terreinoppervlak> Boom   (SrcUnit) := add(Uitgeefbaar/Buitenruimte/Groen/Boom, Openbaar/Groen/Boom);
					attribute<Terreinoppervlak> Struik (SrcUnit) := add(Uitgeefbaar/Buitenruimte/Groen/Struik, Openbaar/Groen/Struik);
				}
			}
		}
		
		container PerWoning
		{
			container Src := InNettoBuurt;
			
			attribute<m2_Woning> Terreinoppervlakte (SrcUnit) := Src/Terreinoppervlakte[meter2] / (SrcUnit/Dichtheid * 1[ha])
			{
				attribute<m2_Woning> Uitgeefbaar (SrcUnit) := Src/Terreinoppervlakte/Uitgeefbaar[meter2] / (SrcUnit/Dichtheid * 1[ha])
				{
					attribute<m2_Woning> GebouwVoetafdruk (SrcUnit) := Src/Terreinoppervlakte/Uitgeefbaar/GebouwVoetafdruk[meter2] / (SrcUnit/Dichtheid * 1[ha]);
					attribute<m2_Woning> Buitenruimte     (SrcUnit) := Src/Terreinoppervlakte/Uitgeefbaar/Buitenruimte[meter2]     / (SrcUnit/Dichtheid * 1[ha])
					{
						attribute<m2_Woning> Verhard (SrcUnit) := Src/Terreinoppervlakte/Uitgeefbaar/Buitenruimte/Verhard[meter2] / (SrcUnit/Dichtheid * 1[ha]);
						attribute<m2_Woning> Water   (SrcUnit) := Src/Terreinoppervlakte/Uitgeefbaar/Buitenruimte/Water[meter2]   / (SrcUnit/Dichtheid * 1[ha]);
						attribute<m2_Woning> Groen   (SrcUnit) := Src/Terreinoppervlakte/Uitgeefbaar/Buitenruimte/Groen[meter2]   / (SrcUnit/Dichtheid * 1[ha])
						{
							attribute<m2_Woning> Gras   (SrcUnit) := Src/Terreinoppervlakte/Uitgeefbaar/Buitenruimte/Groen/Gras[meter2]   / (SrcUnit/Dichtheid * 1[ha]);
							attribute<m2_Woning> Boom   (SrcUnit) := Src/Terreinoppervlakte/Uitgeefbaar/Buitenruimte/Groen/Boom[meter2]   / (SrcUnit/Dichtheid * 1[ha]);
							attribute<m2_Woning> Struik (SrcUnit) := Src/Terreinoppervlakte/Uitgeefbaar/Buitenruimte/Groen/Struik[meter2] / (SrcUnit/Dichtheid * 1[ha]);
						}
					}
				}
				
				attribute<m2_Woning> Openbaar (SrcUnit) := Src/Terreinoppervlakte/Openbaar[meter2] / (SrcUnit/Dichtheid * 1[ha])
				{
					attribute<m2_Woning> Verhard (SrcUnit) := Src/Terreinoppervlakte/Openbaar/Verhard[meter2] / (SrcUnit/Dichtheid * 1[ha]);
					attribute<m2_Woning> Water   (SrcUnit) := Src/Terreinoppervlakte/Openbaar/Water[meter2]   / (SrcUnit/Dichtheid * 1[ha]);
					attribute<m2_Woning> Groen   (SrcUnit) := Src/Terreinoppervlakte/Openbaar/Groen[meter2]   / (SrcUnit/Dichtheid * 1[ha])
					{
						attribute<m2_Woning> Gras   (SrcUnit) := Src/Terreinoppervlakte/Openbaar/Groen/Gras[meter2]   / (SrcUnit/Dichtheid * 1[ha]);
						attribute<m2_Woning> Boom   (SrcUnit) := Src/Terreinoppervlakte/Openbaar/Groen/Boom[meter2]   / (SrcUnit/Dichtheid * 1[ha]);
						attribute<m2_Woning> Struik (SrcUnit) := Src/Terreinoppervlakte/Openbaar/Groen/Struik[meter2] / (SrcUnit/Dichtheid * 1[ha]);
					}
				}
				
				attribute<m2_Woning> Totaal (SrcUnit) := Src/Terreinoppervlakte/Totaal[meter2] / (SrcUnit/Dichtheid * 1[ha])
				{
					attribute<m2_Woning> GebouwVoetafdruk            (SrcUnit) := Src/Terreinoppervlakte/Totaal/GebouwVoetafdruk[meter2]            / (SrcUnit/Dichtheid * 1[ha]);
					attribute<m2_Woning> Verhard                     (SrcUnit) := Src/Terreinoppervlakte/Totaal/Verhard[meter2]                     / (SrcUnit/Dichtheid * 1[ha]);
					attribute<m2_Woning> GebouwVoetafdrukPlusVerhard (SrcUnit) := Src/Terreinoppervlakte/Totaal/GebouwVoetafdrukPlusVerhard[meter2] / (SrcUnit/Dichtheid * 1[ha]);
					
					attribute<m2_Woning> Water (SrcUnit) := Src/Terreinoppervlakte/Totaal/Water[meter2] / (SrcUnit/Dichtheid * 1[ha]);
					attribute<m2_Woning> Groen (SrcUnit) := Src/Terreinoppervlakte/Totaal/Groen[meter2] / (SrcUnit/Dichtheid * 1[ha])
					{
						attribute<m2_Woning> Gras   (SrcUnit) := Src/Terreinoppervlakte/Totaal/Groen/Gras[meter2]   / (SrcUnit/Dichtheid * 1[ha]);
						attribute<m2_Woning> Boom   (SrcUnit) := Src/Terreinoppervlakte/Totaal/Groen/Boom[meter2]   / (SrcUnit/Dichtheid * 1[ha]);
						attribute<m2_Woning> Struik (SrcUnit) := Src/Terreinoppervlakte/Totaal/Groen/Struik[meter2] / (SrcUnit/Dichtheid * 1[ha]);
					}
				}
			}
		}
		
		container FractiesGroen // tov Terreinoppervlakt
		{
			attribute<Float32> Gras   (SrcUnit) := div(add(Terreinoppervlakte/Uitgeefbaar/Buitenruimte/Groen/Gras,   Terreinoppervlakte/Openbaar/Groen/Gras),   Terreinoppervlakte);
			attribute<Float32> Boom   (SrcUnit) := div(add(Terreinoppervlakte/Uitgeefbaar/Buitenruimte/Groen/Boom,   Terreinoppervlakte/Openbaar/Groen/Boom),   Terreinoppervlakte);
			attribute<Float32> Struik (SrcUnit) := div(add(Terreinoppervlakte/Uitgeefbaar/Buitenruimte/Groen/Struik, Terreinoppervlakte/Openbaar/Groen/Struik), Terreinoppervlakte);
			
			attribute<Float32> Totaal (SrcUnit) := add(Gras, Boom, Struik);
		}
		
		attribute<Perceeloppervlak>        PerceeloppervlakteTotaal (SrcUnit) := Terreinoppervlakte/Uitgeefbaar[Perceeloppervlak], Descr = "De totale perceeloppervlakte in m2, inclusief de footprint van de woning en het aandeel van de buitenruimte dat bij de woning hoort"; //Nog in template stoppen. Wordt nu twee keer berekend op zelfde manier, voor netto en bruto buurt
		attribute<Perceeloppervlak_Woning> Perceeloppervlakte       (SrcUnit) := PerceeloppervlakteTotaal / (SrcUnit/Dichtheid * 1[ha])[Woning], Descr = "De totale perceeloppervlakte per woning in m2, inclusief de footprint van de woning en het aandeel van de buitenruimte dat bij de woning hoort"; //Nog in template stoppen. Wordt nu twee keer berekend op zelfde manier, voor netto en bruto buurt
		
		attribute<m2_Woning>               Tuinoppervlakte          (SrcUnit) := Terreinoppervlakte/Uitgeefbaar/Buitenruimte / (SrcUnit/Dichtheid * 1[ha])[Woning], Descr = "De tuinoppervlakte per woning in m2, dus exclusief de footprint van de woning.";
	}
	
	Template perWP2xVSSH_T
	{
		parameter<String> name;
		unit<UInt8> OP;
		//
		
		parameter<Vastgoed/WP2xVSSH> WP2xVSSH_rel := rlookup(lowercase(name), lowercase(Vastgoed/WP2xVSSH/name));
		
		unit<UInt8> OP_sub := select_with_org_rel(WP2xVSSH_rel == OP/WP2xVSSH_rel)
		{
			attribute<String>        name            := OP/name[org_rel];
			attribute<String>        Label           := name, DialogType = "LabelText";
			attribute<Bool>          IsHoogbouw      := OP/IsHoogbouw[org_rel];
			attribute<Woning_ha>     Dichtheid       := OP/Dichtheid[org_rel];
			attribute<m2BVO_Woning>  BVOPerWoning    := OP/BVOPerWoning[org_rel];
			attribute<Vastgoed/WP2>  WP2_rel         := const(Vastgoed/WP2xVSSH/first_rel[WP2xVSSH_rel], .);
			attribute<String>        WP2_name        := Vastgoed/WP2/name[WP2_rel];
			attribute<String>        WP2xVSSH_name   := OP/WP2xVSSH_name[org_rel];
			
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		
		unit<UInt8> NoData: NrOfRows = 1
		{
			attribute<String> name: ['NoData'];
			attribute<String> Label := name, DialogType = "LabelText";
		}
		
		unit<UInt8> OP_sub_noData := union_unit_uint8(NoData, OP_sub)
		{
			attribute<String>   name         := union_data(., NoData/name, OP_sub/name);
			attribute<String>   Label        := union_data(., NoData/Label, OP_sub/Label), DialogType = "LabelText";
			attribute<OP_sub>   org_rel      := rlookup(lowercase(name), lowercase(OP_sub/name));
		}
	}
	
	Template perWP2_T
	{
		parameter<String> name;
		unit<UInt8> OP;
		//
		
		parameter<Vastgoed/WP2> WP2_rel := rlookup(lowercase(name), lowercase(Vastgoed/WP2/name));
		
		unit<UInt8> OP_sub := select_with_org_rel(WP2_rel == OP/WP2_rel)
		{
			attribute<String>    name := OP/name[org_rel];
			attribute<String>    Label := name, DialogType = "LabelText";
			attribute<Bool>      IsHoogbouw := OP/IsHoogbouw[org_rel];
			attribute<Woning_ha> Dichtheid := OP/Dichtheid[org_rel];
			
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
	}
}