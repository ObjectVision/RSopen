////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Dit is RSOpen, de open source versie van het model RuimteScanner. Het scipt wordt uitgegeven onder GNU-GPL licentie.
//
// RSOpen is ontwikkeld door PBL Planbureau voor de Leefomgeving, i.s.m Object Vision B.V. en VU Vrije Universiteit Amsterdam.
// Opdrachtgever/ontwikkelaar PBL: Bart Rijken
// Contactpersoon/ontwikkelaar Object Vision B.V.: Jip Claassens (jclaassens@objectvision.nl)
// Contacpersoon PBL: Bas van Bemmel (Bas.vanBemmel@pbl.nl)
//
// Deze file specificeert een selectie aan default opties die virtuele projectontwikkelaars hebben t.a.v. de stedenbouwkiundige inrichting van gridcellen (AlocDomain) nieuw woongebied 
// Bron: expert judgement PBL
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

unit<UInt8> Default : NrOfRows = 27
{
	unit<Uint32> Elements := Range(uint32, 0, nrAttr * #.)
	{
		attribute<String> Text: [       // Verblijfsobject-kenmerken  Weging locatiekenm. FSI      GSI     WP4_ref     Fractie verhard         Groen in uitgeefbaar Groen in openbaar
	 // name                 , WP2, vssh, Opp ,#Kam,#Bad,Park,  Nat,  OV,Amenit,Groen,  NetBuurt,NetBuurt,             Uitgeefbaar , Openbaar, Boom,  Gras,Struik,  Boom, Gras, Struik
		 'SuperStedelijkMGVS','MG','VS',  '75', '3', '1', '0' ,'1.0','1.0','1.0','1.0', '2.80'  ,'0.40',  'Appartement'     ,'0.80', '0.90', '0.05','0.15','0.05','0.08','0.07','0.03',
		 'HoogStedelijkMGVS' ,'MG','VS',  '85', '3', '1', '0' ,'1.0','1.0','1.0','1.0', '1.50'  ,'0.30',  'Appartement'     ,'0.80', '0.80', '0.05','0.15','0.05','0.08','0.15','0.05',
		 'StedelijkerMGVS'   ,'MG','VS',  '90', '3', '1', '1' ,'1.0','1.0','1.0','1.0', '0.90'  ,'0.30',  'Appartement'     ,'0.80', '0.75', '0.05','0.15','0.05','0.12','0.15','0.10',
		 'StedelijkMGVS'     ,'MG','VS',  '95', '3', '1', '1' ,'1.0','1.0','1.0','1.0', '0.75'  ,'0.25',  'Appartement'     ,'0.80', '0.75', '0.05','0.15','0.05','0.12','0.15','0.10',
		 'LaagStedelijkMGVS' ,'MG','VS', '100', '3', '1', '1' ,'1.0','1.0','1.0','1.0', '0.60'  ,'0.30',  'Appartement'     ,'0.60', '0.70', '0.20','0.30','0.10','0.15','0.18','0.12',
		 'LagerStedelijkMGVS','MG','VS', '105', '4', '1', '1' ,'1.0','1.0','1.0','1.0', '0.50'  ,'0.25',  'Appartement'     ,'0.60', '0.70', '0.20','0.30','0.10','0.15','0.18','0.12',
		 'DorpsMGVS'         ,'MG','VS', '105', '4', '1', '1' ,'1.0','1.0','1.0','1.0', '0.40'  ,'0.20',  'Appartement'     ,'0.60', '0.70', '0.20','0.30','0.10','0.15','0.18','0.12',
		 
		 'StedelijkerEGVS'   ,'EG','VS', '115', '4', '1', '1' ,'1.0','1.0','1.0','1.0', '1.00'  ,'0.40',  'rijtjesWoning'   ,'0.50', '0.65', '0.25','0.40','0.10','0.15','0.25','0.10',
		 'StedelijkEGVS'     ,'EG','VS', '125', '5', '1', '1' ,'1.0','1.0','1.0','1.0', '0.88'  ,'0.35',  'rijtjesWoning'   ,'0.50', '0.65', '0.25','0.40','0.10','0.15','0.25','0.10',
		 'LaagStedelijkEGVS' ,'EG','VS', '140', '5', '1', '1' ,'1.0','1.0','1.0','1.0', '0.63'  ,'0.25',  'rijtjesWoning'   ,'0.40', '0.60', '0.25','0.50','0.10','0.15','0.30','0.10',
		 'LagerStedelijkEGVS','EG','VS', '150', '5', '1', '1' ,'1.0','1.0','1.0','1.0', '0.50'  ,'0.20',  'rijtjesWoning'   ,'0.40', '0.60', '0.25','0.50','0.10','0.15','0.30','0.10',
		 'DorpsLandelijkEGVS','EG','VS', '160', '6', '2', '1' ,'1.0','1.0','1.0','1.0', '0.38'  ,'0.15',  'Twee_onder_1_kap','0.10', '0.15', '0.35','0.80','0.10','0.40','0.60','0.25',
		 'DorpsLandLaagEGVS' ,'EG','VS', '160', '6', '2', '1' ,'1.0','1.0','1.0','1.0', '0.16'  ,'0.08',  'vrijstaand'      ,'0.10', '0.15', '0.45','0.80','0.10','0.40','0.60','0.25',
		 'TinyHousesEGVS'    ,'EG','VS',  '25', '2', '1', '1' ,'1.0','1.0','1.0','1.0', '0.05'  ,'0.05',  'vrijstaand'      ,'0.05', '0.10', '0.45','0.80','0.15','0.50','0.65','0.25',
		 'TinyHousesLaagEGVS','EG','VS',  '25', '2', '1', '1' ,'1.0','1.0','1.0','1.0', '0.03'  ,'0.03',  'vrijstaand'      ,'0.05', '0.10', '0.45','0.80','0.15','0.50','0.65','0.25',
		 
		 'SuperStedelijkMGSH','MG','SH',  '65', '1', '1', '0' ,'0.5','0.5','0.5','0.5', '2.80'  ,'0.40',  'Appartement'     ,'0.90', '0.90', '0.03','0.08','0.02','0.08','0.07','0.03',
		 'HoogStedelijkMGSH' ,'MG','SH',  '75', '1', '1', '0' ,'0.5','0.5','0.5','0.5', '1.50'  ,'0.30',  'Appartement'     ,'0.90', '0.80', '0.03','0.08','0.02','0.08','0.15','0.05',
		 'StedelijkerMGSH'   ,'MG','SH',  '80', '2', '1', '0' ,'0.5','0.5','0.5','0.5', '0.90'  ,'0.30',  'Appartement'     ,'0.90', '0.75', '0.03','0.08','0.02','0.12','0.15','0.10',
		 'StedelijkMGSH'     ,'MG','SH',  '85', '2', '1', '0' ,'0.5','0.5','0.5','0.5', '0.75'  ,'0.25',  'Appartement'     ,'0.90', '0.75', '0.03','0.08','0.02','0.12','0.15','0.10',
		 'LaagStedelijkMGSH' ,'MG','SH',  '90', '3', '1', '0' ,'0.5','0.5','0.5','0.5', '0.60'  ,'0.30',  'Appartement'     ,'0.70', '0.70', '0.15','0.25','0.05','0.15','0.18','0.12',
		 'LagerStedelijkMGSH','MG','SH',  '95', '3', '1', '0' ,'0.5','0.5','0.5','0.5', '0.50'  ,'0.25',  'Appartement'     ,'0.70', '0.70', '0.15','0.25','0.05','0.15','0.18','0.12',
		 'DorpsMGSH'         ,'MG','SH',  '95', '3', '1', '0' ,'0.5','0.5','0.5','0.5', '0.40'  ,'0.20',  'Appartement'     ,'0.70', '0.70', '0.15','0.25','0.05','0.15','0.18','0.12',
		 
		 'StedelijkerEGSH'   ,'EG','SH', '100', '3', '1', '0' ,'0.5','0.5','0.5','0.5', '1.00'  ,'0.40',  'rijtjesWoning'   ,'0.60', '0.65', '0.20','0.35','0.05','0.15','0.25','0.10',
		 'StedelijkEGSH'     ,'EG','SH', '105', '3', '1', '0' ,'0.5','0.5','0.5','0.5', '0.88'  ,'0.35',  'rijtjesWoning'   ,'0.60', '0.65', '0.20','0.35','0.05','0.15','0.25','0.10',
		 'LaagStedelijkEGSH' ,'EG','SH', '115', '3', '1', '0' ,'0.5','0.5','0.5','0.5', '0.63'  ,'0.25',  'rijtjesWoning'   ,'0.50', '0.60', '0.20','0.45','0.05','0.15','0.30','0.10',
		 'LagerStedelijkEGSH','EG','SH', '120', '3', '1', '0' ,'0.5','0.5','0.5','0.5', '0.50'  ,'0.20',  'rijtjesWoning'   ,'0.50', '0.60', '0.20','0.45','0.05','0.15','0.30','0.10',
		 'DorpsLandelijkSH'  ,'EG','SH', '130', '4', '1', '1' ,'0.5','0.5','0.5','0.5', '0.38'  ,'0.15',  'Twee_onder_1_kap','0.10', '0.15', '0.35','0.80','0.10','0.40','0.60','0.25'
		];
	}
	
	attribute<String>               name               := Elements/Text[value(uint32(id(.))* nrAttr +  0, Elements)], Descr = "De naam van het ontwikkelpakket";
	attribute<String>               WP2_name_short     := Elements/Text[value(uint32(id(.))* nrAttr +  1, Elements)], Descr = "De WP2 classificatie van het ontwikkelpakket, verkorte naam";
	attribute<String>               VSSH_name_short    := Elements/Text[value(uint32(id(.))* nrAttr +  2, Elements)], Descr = "De VSSH classificatie van het ontwikkelpakket, verkorte naam";
	attribute<Woonoppervlak_Woning> Woonoppervlakte    := Elements/Text[value(uint32(id(.))* nrAttr +  3, Elements)][Woonoppervlak_Woning], Descr = "De gemiddelde woonoppervlakte per woning in m2 BVO";
	attribute<UInt32>               Aant_kamers        := Elements/Text[value(uint32(id(.))* nrAttr +  4, Elements)][uint32], Descr = "Het gemiddelde aantal kamers per woning";
	attribute<UInt32>               Aant_badkamers     := Elements/Text[value(uint32(id(.))* nrAttr +  5, Elements)][uint32], Descr = "Het gemiddelde aantal badkamers per woning";
	attribute<Bool>                 HeeftPriveParkeren := Elements/Text[value(uint32(id(.))* nrAttr +  6, Elements)][bool], Descr = "Geeft aan of er bij de woningen in dit ontwikkelpakket sprake is van privé parkeermogelijkheden (op eigen terrein)";
	
	// Wegingsfactoren ten aanzien van centraliteit/bereikbaarheid,  de nabijheid van amenities (Voorzieningen) en de nabijheid van groen.
	attribute<Float32>              Weging_NatNiv      := Elements/Text[value(uint32(id(.))* nrAttr +  7, Elements)][float32], Descr = "Wegingsfactor voor de invloed van nationale niveaus (proxy voor Randstad-NietRandstad) op de woningprijs";
	attribute<Float32>              Weging_NatOV       := Elements/Text[value(uint32(id(.))* nrAttr +  8, Elements)][float32], Descr = "Wegingsfactor voor de invloed van nationale OV (proxy voor grotere steden) op de woningprijs";
	attribute<Float32>              Weging_Amenities   := Elements/Text[value(uint32(id(.))* nrAttr +  9, Elements)][float32], Descr = "Wegingsfactor voor de invloed van de nabijheid van amenities (voorzieningen) op de woningprijs";
	attribute<Float32>              Weging_GroenNabij  := Elements/Text[value(uint32(id(.))* nrAttr + 10, Elements)][float32], Descr = "Wegingsfactor voor de invloed van de nabijheid van groen op de woningprijs";
	attribute<FSI>                  FSINettoBuurt      := Elements/Text[value(uint32(id(.))* nrAttr + 11, Elements)][float32], Descr = "De Floor Space Index (FSI) van het ontwikkelpakket, oftewel de verhouding tussen de totale vloeroppervlakte van alle gebouwen en de terreinoppervlakte van de netto buurt";
	attribute<GSI>                  GSINettoBuurt      := Elements/Text[value(uint32(id(.))* nrAttr + 12, Elements)][float32], Descr = "De Ground Space Index (GSI) van het ontwikkelpakket, oftewel de verhouding tussen de footprint van alle gebouwen en de terreinoppervlakte van de netto buurt";
	attribute<String>               WP4_name           := Elements/Text[value(uint32(id(.))* nrAttr + 13, Elements)], Descr = "De WP4 classificatie van het ontwikkelpakket, volledige naam";
	
	attribute<Classifications/Vastgoed/WP4> WP4_rel := rlookup(lowercase(WP4_name), lowercase(/Classifications/Vastgoed/WP4/name)), Descr = "De WP4 classificatie van het ontwikkelpakket";
	
	parameter<UInt32> nrAttr := 22;
	
	container InUitgeefbaarExPandFootprint
	: Descr = "De inrichting van het uitgeefbaar deel van de netto buurt exclusief de footprint van de panden"
	{
		attribute<Float32> Verhard      (..) := Elements/Text[value(uint32(id(..))* nrAttr + 14, Elements)][float32];
		attribute<Float32> GroenTotaal  (..) := 1f - Verhard;
		attribute<Float32> Boom0        (..) := Elements/Text[value(uint32(id(..))* nrAttr + 16, Elements)][float32];
		attribute<Float32> Gras0        (..) := Elements/Text[value(uint32(id(..))* nrAttr + 17, Elements)][float32];
		attribute<Float32> Struik0      (..) := Elements/Text[value(uint32(id(..))* nrAttr + 18, Elements)][float32];
		attribute<Float32> GroenTotaal0 (..) := add(Boom0, Gras0, Struik0);
		
		//Schalen omdat groen Totaal bij nader inzien moest optellen tot 1 - fractie verhard
		attribute<Float32> Boom         (..) := Boom0   / GroenTotaal0 * GroenTotaal;
		attribute<Float32> Gras         (..) := Gras0   / GroenTotaal0 * GroenTotaal;
		attribute<Float32> Struik       (..) := Struik0 / GroenTotaal0 * GroenTotaal;
	}
	
	container InOpenbaar
	: Descr = "De inrichting van het openbare deel van de netto buurt"
	{
		attribute<Float32> Verhard      (..) := Elements/Text[value(uint32(id(..))* nrAttr + 15, Elements)][float32];
		attribute<Float32> GroenTotaal  (..) := 1f - Verhard;
		attribute<Float32> Boom0        (..) := Elements/Text[value(uint32(id(..))* nrAttr + 19, Elements)][float32];
		attribute<Float32> Gras0        (..) := Elements/Text[value(uint32(id(..))* nrAttr + 20, Elements)][float32];
		attribute<Float32> Struik0      (..) := Elements/Text[value(uint32(id(..))* nrAttr + 21, Elements)][float32];
		attribute<Float32> GroenTotaal0 (..) := add(Boom0, Gras0, Struik0);
		
		//Schalen omdat groen Totaal bij nader inzien moest optellen tot 1 - Fractie verhard
		attribute<Float32> Boom         (..) := Boom0   / GroenTotaal0 * GroenTotaal;
		attribute<Float32> Gras         (..) := Gras0   / GroenTotaal0 * GroenTotaal;
		attribute<Float32> Struik       (..) := Struik0 / GroenTotaal0 * GroenTotaal;
	}
	
	attribute<Bool>                    IsHoogbouw                   := Bouwlagen * ModelParameters/Wonen/Bouwlaaghoogte > ModelParameters/Wonen/Hoogbouwgrens, Descr = "Geeft aan of het ontwikkelpakket als hoogbouw wordt beschouwd (meer dan X bouwlagen)";
	
	// is per definitie de fractie uitgeefbaar van terreinopp nettobuurt,
	parameter<Float32>                 FractieUitgeefbaar           := /ModelParameters/Wonen/FractieUitgeefbaar, Descr = "De fractie van de terreinoppervlakte die uitgeefbaar wordt gemaakt";
	attribute<Float32>                 Bouwlagen                    := FSINettoBuurt / GSINettoBuurt, Descr = "Het gemiddeld aantal bouwlagen van de woningen in het ontwikkelpakket";
	attribute<Woonoppervlak_m2BVO>     Vormfactor                   := WP2_rel == Classifications/Vastgoed/WP2/V/Eengezins ? ModelParameters/Wonen/VormfactorEengezins: IsHoogbouw ? ModelParameters/Wonen/VormfactorHoogbouw: ModelParameters/Wonen/VormfactorMeergezins, Descr = "De vormfactor die aangeeft hoeveel m2 BVO er per m2 footprint is, afhankelijk van het woningtype en of het hoogbouw betreft";
	attribute<m2BVO_Woning>            BVOPerWoning                 := Woonoppervlakte / Vormfactor, Descr = "De gemiddelde footprint van een woning in m2, afgeleid van de woonoppervlakte en de vormfactor";
	attribute<Woning_ha>               DichtheidNettoBuurt          := (FSINettoBuurt * TerreinoppervlakteNettoBuurt) / BVOPerWoning / TerreinoppervlakteNettoBuurt[ha], Descr = "De dichtheid van het ontwikkelpakket in woningen per hectare, afgeleid van de FSI en de footprint per woning";
	attribute<Woning_ha>               Dichtheid                    := DichtheidNettoBuurt, Descr = "De dichtheid van het ontwikkelpakket in woningen per hectare, afgeleid van de FSI en de footprint per woning";
	attribute<Woonoppervlak>           WoonoppervlakNettoBuurt      := (DichtheidNettoBuurt[float32] * Woonoppervlakte[float32])[Woonoppervlak], Descr = "De woonoppervlakte per hectare in de netto buurt, afgeleid van de dichtheid en de woonoppervlakte per woning";
	attribute<Terreinoppervlak>        TerreinoppervlakteNettoBuurt := const((1[ha])[Terreinoppervlak], .), Descr = "De terreinoppervlakte van de netto buurt, standaard 1 hectare";
	
	container InNettoBuurt := Ontwikkelpakketten/InNettoBuurt_T(., InUitgeefbaarExPandFootprint, InOpenbaar), Descr = "De inrichting van de netto buurt, zowel het uitgeefbaar deel als het openbare deel";
	
	attribute<Perceeloppervlak>        PerceeloppervlakteTotaal     := InNettoBuurt/TerreinoppervlakteNettoBuurt/Uitgeefbaar/Buitenruimte[Perceeloppervlak], Descr = "De totale perceeloppervlakte per woning in m2, inclusief de footprint van de woning en het aandeel van de buitenruimte dat bij de woning hoort";
	attribute<Perceeloppervlak_Woning> Perceeloppervlakte           := PerceeloppervlakteTotaal / (Dichtheid * 1[ha])[Woning], Descr = "De totale perceeloppervlakte per woning in m2, inclusief de footprint van de woning en het aandeel van de buitenruimte dat bij de woning hoort";
	
	container Checks
	{
		attribute<Bool> GSIIsNietGroterDanFractieUitgeefbaar (..) := !(GSINettoBuurt > FractieUitgeefbaar);
	}
	
	// overzicht van relevante aangrijpingspunten voor invoer en uitkomsten van de instellingen
	container Dashboard
	{
		container Wegingskaarten
		{
			attribute<min>        NatNiv (Geography/rdc_100m) := SourceData/Diversen/Impl/Reistijden/tt_500kinhab_min_2020;
			attribute<min>         NatOV (Geography/rdc_100m) := SourceData/Diversen/Impl/Reistijden/tt_Trainstation_2006_min;
			attribute<Float32> Amenities (Geography/rdc_100m) := SourceData/Diversen/Impl/UAI_2021;
			attribute<Bool>   GroenNabij (Geography/rdc_10m)  := SourceData/Diversen/Impl/BBG_groen_buff;
		}
		
		// container Geschiktheden := BaseData/Geschiktheden/Wonen;
		
		container OPKenmerken
		{
			attribute<String>    name       (...) := .../name;
			attribute<Float32>   Bouwlagen  (...) := .../Bouwlagen;
			attribute<Bool>      IsHoogbouw (...) := .../IsHoogbouw;
			attribute<Woning_ha> Dichtheid  (...) := .../Dichtheid;
		}
	}
	 
	attribute<String>            Label                := name, DialogType = "LabelText";
	attribute<Vastgoed/WP2>      WP2_rel              := lowercase(WP2_name_short) == lowercase('EG') ? rlookup(lowercase('eengezins'), lowercase(Vastgoed/WP2/name)) : rlookup(lowercase('meergezins'), lowercase(Vastgoed/WP2/name));
	attribute<String>            WP2_name             := Vastgoed/WP2/name[WP2_rel];
	attribute<Vastgoed/VSSH>     VSSH_rel             := lowercase(VSSH_name_short) == lowercase('VS') ? rlookup(lowercase('vrijeSector'), lowercase(Vastgoed/VSSH/name)) : rlookup(lowercase('SocialeHuur'), lowercase(Vastgoed/VSSH/name));
	attribute<String>            VSSH_name            := Vastgoed/VSSH/name[VSSH_rel];
	attribute<String>            WP2xVSSH_name        := WP2_name+'_'+VSSH_name;
	attribute<Vastgoed/WP2xVSSH> WP2xVSSH_rel         := rlookup(lowercase(WP2xVSSH_name), lowercase(Vastgoed/WP2xVSSH/name));
	attribute<Sector/xSubsector> SectorxSubSector_rel := Vastgoed/WP2xVSSH/SectorxSubSector_rel[WP2xVSSH_rel];
	
	container perWP2xVSSH := for_each_ne(Vastgoed/WP2xVSSH/name,'perWP2xVSSH_T('+quote(Vastgoed/WP2xVSSH/name)+', ..)');
	container perWP2      := for_each_ne(Vastgoed/WP2/name,'perWP2_T('+quote(Vastgoed/WP2/name)+', ..)');
	
	attribute<UInt32> BrushColor:
	[
		rgb(102,   0, 102),
		rgb(153,   0, 153),
		rgb(204,   0, 204),
		rgb(255,   0, 255),
		rgb(204,   0,   0),
		rgb(255,   0,   0),
		rgb(255,  51,  51),
		rgb(255, 102, 102),
		rgb(255, 153, 153),
		rgb(255, 204, 204),
		rgb(102,   0,  51),
		rgb(153,   0,  76),
		rgb(204,   0, 102),
		rgb(255,   0, 127),
		rgb(153,  76,   0),
		rgb(155, 128,   0),
		rgb(255,  51,  51),
		
		rgb(255, 102, 102),
		rgb(255, 153, 153),
		rgb(255, 204, 204),
		rgb(102,   0,  51),
		rgb(153,   0,  76),
		rgb(204,   0, 102),
		rgb(255,   0, 127),
		rgb(153,  76,   0),
		rgb(155, 128,   0),
		rgb(255,  51,  51)
	], DialogType = "BrushColor";
	
	container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
}