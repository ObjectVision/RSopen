////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Dit is RSOpen, de open source versie van het model RuimteScanner. Het scipt wordt uitgegeven onder GNU-GPL licentie.
//
// RSOpen is ontwikkeld door PBL Planbureau voor de Leefomgeving, i.s.m Object Vision B.V. en VU Vrije Universiteit Amsterdam.
// Opdrachtgever/ontwikkelaar PBL: Bart Rijken
// Contactpersoon/ontwikkelaar Object Vision B.V.: Jip Claassens (jclaassens@objectvision.nl)
// Contacpersoon PBL: Bas van Bemmel (Bas.vanBemmel@pbl.nl)
//
// Deze file specificeert een selectie aan default opties die virtuele projectontwikkelaars hebben t.a.v. de stedenbouwkiundige inrichting van gridcellen (AlocDomain) nieuw woongebied 
// Bron: expert judgement PBL
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

unit<uint8> Default : NrOfRows = 27
{
	unit<Uint32> Elements := Range(uint32, 0, nrAttr * #.)
	{
		attribute<string> Text: [       // Verblijfsobject-kenmerken  Weging locatiekenm. FSI      GSI     WP4_ref     Fractie verhard         Groen in uitgeefbaar Groen in openbaar
	 // name                 , WP2, vssh, Opp ,#Kam,#Bad,Park,  Nat,  OV,Amenit,Groen,  NetBuurt,NetBuurt,             Uitgeefbaar , Openbaar, Boom,  Gras,Struik,  Boom, Gras, Struik
		 'SuperStedelijkMGVS','MG','VS',  '75', '3', '1', '0' ,'1.0','1.0','1.0','1.0', '2.80'  ,'0.40',  'Appartement'     ,'0.80', '0.90', '0.05','0.15','0.05','0.08','0.07','0.03',
		 'HoogStedelijkMGVS' ,'MG','VS',  '85', '3', '1', '0' ,'1.0','1.0','1.0','1.0', '1.50'  ,'0.30',  'Appartement'     ,'0.80', '0.80', '0.05','0.15','0.05','0.08','0.15','0.05',
		 'StedelijkerMGVS'   ,'MG','VS',  '90', '3', '1', '1' ,'1.0','1.0','1.0','1.0', '0.90'  ,'0.30',  'Appartement'     ,'0.80', '0.75', '0.05','0.15','0.05','0.12','0.15','0.10',
		 'StedelijkMGVS'     ,'MG','VS',  '95', '3', '1', '1' ,'1.0','1.0','1.0','1.0', '0.75'  ,'0.25',  'Appartement'     ,'0.80', '0.75', '0.05','0.15','0.05','0.12','0.15','0.10',
		 'LaagStedelijkMGVS' ,'MG','VS', '100', '3', '1', '1' ,'1.0','1.0','1.0','1.0', '0.60'  ,'0.30',  'Appartement'     ,'0.60', '0.70', '0.20','0.30','0.10','0.15','0.18','0.12',
		 'LagerStedelijkMGVS','MG','VS', '105', '4', '1', '1' ,'1.0','1.0','1.0','1.0', '0.50'  ,'0.25',  'Appartement'     ,'0.60', '0.70', '0.20','0.30','0.10','0.15','0.18','0.12',
		 'DorpsMGVS'         ,'MG','VS', '105', '4', '1', '1' ,'1.0','1.0','1.0','1.0', '0.40'  ,'0.20',  'Appartement'     ,'0.60', '0.70', '0.20','0.30','0.10','0.15','0.18','0.12',
		 
		 'StedelijkerEGVS'   ,'EG','VS', '115', '4', '1', '1' ,'1.0','1.0','1.0','1.0', '1.00'  ,'0.40',  'rijtjesWoning'   ,'0.50', '0.65', '0.25','0.40','0.10','0.15','0.25','0.10',
		 'StedelijkEGVS'     ,'EG','VS', '125', '5', '1', '1' ,'1.0','1.0','1.0','1.0', '0.88'  ,'0.35',  'rijtjesWoning'   ,'0.50', '0.65', '0.25','0.40','0.10','0.15','0.25','0.10',
		 'LaagStedelijkEGVS' ,'EG','VS', '140', '5', '1', '1' ,'1.0','1.0','1.0','1.0', '0.63'  ,'0.25',  'rijtjesWoning'   ,'0.40', '0.60', '0.25','0.50','0.10','0.15','0.30','0.10',
		 'LagerStedelijkEGVS','EG','VS', '150', '5', '1', '1' ,'1.0','1.0','1.0','1.0', '0.50'  ,'0.20',  'rijtjesWoning'   ,'0.40', '0.60', '0.25','0.50','0.10','0.15','0.30','0.10',
		 'DorpsLandelijkEGVS','EG','VS', '160', '6', '2', '1' ,'1.0','1.0','1.0','1.0', '0.38'  ,'0.15',  'Twee_onder_1_kap','0.10', '0.15', '0.35','0.80','0.10','0.40','0.60','0.25',
		 'DorpsLandLaagEGVS' ,'EG','VS', '160', '6', '2', '1' ,'1.0','1.0','1.0','1.0', '0.16'  ,'0.08',  'vrijstaand'      ,'0.10', '0.15', '0.45','0.80','0.10','0.40','0.60','0.25',
		 'TinyHousesEGVS'    ,'EG','VS',  '25', '2', '1', '1' ,'1.0','1.0','1.0','1.0', '0.05'  ,'0.05',  'vrijstaand'      ,'0.05', '0.10', '0.45','0.80','0.15','0.50','0.65','0.25',
		 'TinyHousesLaagEGVS','EG','VS',  '25', '2', '1', '1' ,'1.0','1.0','1.0','1.0', '0.03'  ,'0.03',  'vrijstaand'      ,'0.05', '0.10', '0.45','0.80','0.15','0.50','0.65','0.25',
		 
		 'SuperStedelijkMGSH','MG','SH',  '65', '1', '1', '0' ,'0.5','0.5','0.5','0.5', '2.80'  ,'0.40',  'Appartement'     ,'0.90', '0.90', '0.03','0.08','0.02','0.08','0.07','0.03',
		 'HoogStedelijkMGSH' ,'MG','SH',  '75', '1', '1', '0' ,'0.5','0.5','0.5','0.5', '1.50'  ,'0.30',  'Appartement'     ,'0.90', '0.80', '0.03','0.08','0.02','0.08','0.15','0.05',
		 'StedelijkerMGSH'   ,'MG','SH',  '80', '2', '1', '0' ,'0.5','0.5','0.5','0.5', '0.90'  ,'0.30',  'Appartement'     ,'0.90', '0.75', '0.03','0.08','0.02','0.12','0.15','0.10',
		 'StedelijkMGSH'     ,'MG','SH',  '85', '2', '1', '0' ,'0.5','0.5','0.5','0.5', '0.75'  ,'0.25',  'Appartement'     ,'0.90', '0.75', '0.03','0.08','0.02','0.12','0.15','0.10',
		 'LaagStedelijkMGSH' ,'MG','SH',  '90', '3', '1', '0' ,'0.5','0.5','0.5','0.5', '0.60'  ,'0.30',  'Appartement'     ,'0.70', '0.70', '0.15','0.25','0.05','0.15','0.18','0.12',
		 'LagerStedelijkMGSH','MG','SH',  '95', '3', '1', '0' ,'0.5','0.5','0.5','0.5', '0.50'  ,'0.25',  'Appartement'     ,'0.70', '0.70', '0.15','0.25','0.05','0.15','0.18','0.12',
		 'DorpsMGSH'         ,'MG','SH',  '95', '3', '1', '0' ,'0.5','0.5','0.5','0.5', '0.40'  ,'0.20',  'Appartement'     ,'0.70', '0.70', '0.15','0.25','0.05','0.15','0.18','0.12',
		 
		 'StedelijkerEGSH'   ,'EG','SH', '100', '3', '1', '0' ,'0.5','0.5','0.5','0.5', '1.00'  ,'0.40',  'rijtjesWoning'   ,'0.60', '0.65', '0.20','0.35','0.05','0.15','0.25','0.10',
		 'StedelijkEGSH'     ,'EG','SH', '105', '3', '1', '0' ,'0.5','0.5','0.5','0.5', '0.88'  ,'0.35',  'rijtjesWoning'   ,'0.60', '0.65', '0.20','0.35','0.05','0.15','0.25','0.10',
		 'LaagStedelijkEGSH' ,'EG','SH', '115', '3', '1', '0' ,'0.5','0.5','0.5','0.5', '0.63'  ,'0.25',  'rijtjesWoning'   ,'0.50', '0.60', '0.20','0.45','0.05','0.15','0.30','0.10',
		 'LagerStedelijkEGSH','EG','SH', '120', '3', '1', '0' ,'0.5','0.5','0.5','0.5', '0.50'  ,'0.20',  'rijtjesWoning'   ,'0.50', '0.60', '0.20','0.45','0.05','0.15','0.30','0.10',
		 'DorpsLandelijkSH'  ,'EG','SH', '130', '4', '1', '1' ,'0.5','0.5','0.5','0.5', '0.38'  ,'0.15',  'Twee_onder_1_kap','0.10', '0.15', '0.35','0.80','0.10','0.40','0.60','0.25'
		];
	}
	
	attribute<string>               name               := Elements/Text[value(uint32(id(.))* nrAttr +  0, Elements)];
	attribute<string>               WP2_name_short     := Elements/Text[value(uint32(id(.))* nrAttr +  1, Elements)];
	attribute<string>               VSSH_name_short    := Elements/Text[value(uint32(id(.))* nrAttr +  2, Elements)];
	attribute<Woonoppervlak_Woning> Woonoppervlakte    := Elements/Text[value(uint32(id(.))* nrAttr +  3, Elements)][Woonoppervlak_Woning];
	attribute<uint32>               Aant_kamers        := Elements/Text[value(uint32(id(.))* nrAttr +  4, Elements)][uint32];
	attribute<uint32>               Aant_badkamers     := Elements/Text[value(uint32(id(.))* nrAttr +  5, Elements)][uint32];
	attribute<bool>                 HeeftPriveParkeren := Elements/Text[value(uint32(id(.))* nrAttr +  6, Elements)][bool];
	
	// WegingsfActoren ten aanzien van centraliteit/bereikbaarheid,  de nabijheid van amenities (Voorzieningen) en de nabijheid van groen.
	attribute<float32>              Weging_NatNiv      := Elements/Text[value(uint32(id(.))* nrAttr +  7, Elements)][float32];
	attribute<float32>              Weging_NatOV       := Elements/Text[value(uint32(id(.))* nrAttr +  8, Elements)][float32];
	attribute<float32>              Weging_Amenities   := Elements/Text[value(uint32(id(.))* nrAttr +  9, Elements)][float32];
	attribute<float32>              Weging_GroenNabij  := Elements/Text[value(uint32(id(.))* nrAttr + 10, Elements)][float32];
	
	attribute<FSI>                  FSINettoBuurt      := Elements/Text[value(uint32(id(.))* nrAttr + 11, Elements)][float32]; // FLoor Space Index
	attribute<GSI>                  GSINettoBuurt      := Elements/Text[value(uint32(id(.))* nrAttr + 12, Elements)][float32]; // Ground Space Index
	attribute<string>               WP4_name           := Elements/Text[value(uint32(id(.))* nrAttr + 13, Elements)];
	
	attribute<Classifications/Vastgoed/WP4> WP4_rel := rlookup(WP4_name, /Classifications/Vastgoed/WP4/name);
	
	parameter<uint32> nrAttr := 22;
	
	container InUitgeefbaarExPandFootprint
	{
		attribute<float32> Verhard      (..) := Elements/Text[value(uint32(id(..))* nrAttr + 14, Elements)][float32];
		attribute<float32> GroenTotaal  (..) := 1f - Verhard;
		attribute<float32> Boom0        (..) := Elements/Text[value(uint32(id(..))* nrAttr + 16, Elements)][float32];
		attribute<float32> Gras0        (..) := Elements/Text[value(uint32(id(..))* nrAttr + 17, Elements)][float32];
		attribute<float32> Struik0      (..) := Elements/Text[value(uint32(id(..))* nrAttr + 18, Elements)][float32];
		attribute<float32> GroenTotaal0 (..) := add(Boom0, Gras0, Struik0);
		
		//Schalen omdat groen Totaal bij nader inzien moest optellen tot 1 - fractie verhard
		attribute<float32> Boom         (..) := Boom0   / GroenTotaal0 * GroenTotaal;
		attribute<float32> Gras         (..) := Gras0   / GroenTotaal0 * GroenTotaal;
		attribute<float32> Struik       (..) := Struik0 / GroenTotaal0 * GroenTotaal;
	}
	
	container InOpenbaar
	{
		attribute<float32> Verhard      (..) := Elements/Text[value(uint32(id(..))* nrAttr + 15, Elements)][float32];
		attribute<float32> GroenTotaal  (..) := 1f - Verhard;
		attribute<float32> Boom0        (..) := Elements/Text[value(uint32(id(..))* nrAttr + 19, Elements)][float32];
		attribute<float32> Gras0        (..) := Elements/Text[value(uint32(id(..))* nrAttr + 20, Elements)][float32];
		attribute<float32> Struik0      (..) := Elements/Text[value(uint32(id(..))* nrAttr + 21, Elements)][float32];
		attribute<float32> GroenTotaal0 (..) := add(Boom0, Gras0, Struik0);
		
		//Schalen omdat groen Totaal bij nader inzien moest optellen tot 1 - Fractie verhard
		attribute<float32> Boom         (..) := Boom0   / GroenTotaal0 * GroenTotaal;
		attribute<float32> Gras         (..) := Gras0   / GroenTotaal0 * GroenTotaal;
		attribute<float32> Struik       (..) := Struik0 / GroenTotaal0 * GroenTotaal;
	}
	
	attribute<bool>                    IsHoogbouw                   := Bouwlagen * ModelParameters/wonen/Bouwlaaghoogte > ModelParameters/wonen/Hoogbouwgrens;
	parameter<float32>                 FractieUitgeefbaar           := /ModelParameters/wonen/FractieUitgeefbaar; // is per definitie de fractie uitgeefbaar van terreinopp nettobuurt
	attribute<float32>                 Bouwlagen                    := FSINettoBuurt / GSINettoBuurt;
	attribute<Woonoppervlak_m2BVO>     VormfActor                   := WP2_rel == Classifications/Vastgoed/WP2/V/Eengezins ? ModelParameters/wonen/VormfActorEengezins: IsHoogbouw ? ModelParameters/wonen/VormfActorHoogbouw: ModelParameters/wonen/VormfActorMeergezins;
	attribute<m2BVO_Woning>            BVOPerWoning                 := Woonoppervlakte / VormfActor;
	attribute<Woning_ha>               DichtheidNettoBuurt          := (FSINettoBuurt * TerreinoppervlakteNettoBuurt) / BVOPerWoning / TerreinoppervlakteNettoBuurt[ha];
	attribute<Woning_ha>               Dichtheid                    := DichtheidNettoBuurt;
	attribute<Woonoppervlak>           WoonoppervlakNettoBuurt      := (DichtheidNettoBuurt[float32] * Woonoppervlakte[float32])[Woonoppervlak];
	attribute<Terreinoppervlak>        TerreinoppervlakteNettoBuurt := const((1[ha])[Terreinoppervlak], .);
	
	container InNettoBuurt := Ontwikkelpakketten/InNettoBuurt_T(., InUitgeefbaarExPandFootprint, InOpenbaar);
	
	attribute<Perceeloppervlak>        PerceeloppervlakteTotaal     := InNettoBuurt/TerreinoppervlakteNettoBuurt/Uitgeefbaar/Buitenruimte[Perceeloppervlak];
	attribute<Perceeloppervlak_Woning> Perceeloppervlakte           := PerceeloppervlakteTotaal / (Dichtheid * 1[ha])[Woning];
	
	container Checks
	{
		attribute<bool> GSIIsNietGroterDanFractieUitgeefbaar (..) := !(GSINettoBuurt > FractieUitgeefbaar);
	}
	
	// overzicht van relevante aangrijpingspunten voor invoer en uitkomsten van de instellingen
	container Dashboard
	{
		container Wegingskaarten
		{
			attribute<min>        NatNiv (Geography/rdc_100m) := SourceData/Diversen/Impl/Reistijden/tt_500kinhab_min_2020;
			attribute<min>         NatOV (Geography/rdc_100m) := SourceData/Diversen/Impl/Reistijden/tt_Trainstation_2006_min;
			attribute<float32> Amenities (Geography/rdc_100m) := SourceData/Diversen/Impl/UAI_2021;
			attribute<bool>   GroenNabij (Geography/rdc_10m)  := SourceData/Diversen/Impl/BBG_groen_buff;
		}
		
		// container Geschiktheden := BaseData/Geschiktheden/Wonen;
		
		container OPKenmerken
		{
			attribute<string>    name       (...) := .../name;
			attribute<float32>   Bouwlagen  (...) := .../Bouwlagen;
			attribute<bool>      IsHoogbouw (...) := .../IsHoogbouw;
			attribute<Woning_ha> Dichtheid  (...) := .../Dichtheid;
		}
	}
	 
	attribute<string>            Label                := name, DialogType = "LabelText";
	attribute<Vastgoed/WP2>      WP2_rel              := WP2_name_short == 'EG' ? rlookup('eengezins', Vastgoed/WP2/name) : rlookup('meergezins', Vastgoed/WP2/name);
	attribute<string>            WP2_name             := Vastgoed/WP2/name[WP2_rel];
	attribute<Vastgoed/VSSH>     VSSH_rel             := VSSH_name_short == 'VS' ? rlookup('VrijeSector', Vastgoed/VSSH/name) : rlookup('SocialeHuur', Vastgoed/VSSH/name);
	attribute<string>            VSSH_name            := Vastgoed/VSSH/name[VSSH_rel];
	attribute<string>            WP2xVSSH_name        := WP2_name+'_'+VSSH_name;
	attribute<Vastgoed/WP2xVSSH> WP2xVSSH_rel         := rlookup(WP2xVSSH_name, Vastgoed/WP2xVSSH/name);
	attribute<Sector/xSubsector> SectorxSubSector_rel := Vastgoed/WP2xVSSH/SectorxSubSector_rel[WP2xVSSH_rel];
	
	container perWP2xVSSH := for_each_ne(Vastgoed/WP2xVSSH/name,'perWP2xVSSH_T('+quote(Vastgoed/WP2xVSSH/name)+', ..)');
	container perWP2      := for_each_ne(Vastgoed/WP2/name,'perWP2_T('+quote(Vastgoed/WP2/name)+', ..)');
	
	attribute<uint32> BrushColor:
	[
		rgb(102,   0, 102),
		rgb(153,   0, 153),
		rgb(204,   0, 204),
		rgb(255,   0, 255),
		rgb(204,   0,   0),
		rgb(255,   0,   0),
		rgb(255,  51,  51),
		rgb(255, 102, 102),
		rgb(255, 153, 153),
		rgb(255, 204, 204),
		rgb(102,   0,  51),
		rgb(153,   0,  76),
		rgb(204,   0, 102),
		rgb(255,   0, 127),
		rgb(153,  76,   0),
		rgb(155, 128,   0),
		rgb(255,  51,  51),
		
		rgb(255, 102, 102),
		rgb(255, 153, 153),
		rgb(255, 204, 204),
		rgb(102,   0,  51),
		rgb(153,   0,  76),
		rgb(204,   0, 102),
		rgb(255,   0, 127),
		rgb(153,  76,   0),
		rgb(155, 128,   0),
		rgb(255,  51,  51)
	], DialogType = "BrushColor";
	
	container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
}