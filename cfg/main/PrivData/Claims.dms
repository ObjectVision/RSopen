container Claims : using = "Geography"
{
	container WonenEnWerken // Bron: Berekeningen van Significance B.V. in opdracht van PBL in het kader van het project Ruimtelijke Verkenningen 2023. Zie https://www.pbl.nl/publicaties/ruimtelijke-verkenning-2023-vier-scenarios-voor-de-inrichting-van-nederland-in-2050
	{
		parameter<String> ClaimSrcRef  := '%PrivDataDir%/Claims/TXL_'+ModelParameters/TIGRIS_filedate;
		parameter<String> ClaimSrcDir  := ClaimSrcRef+'/@S@';
		parameter<String> ClaimRef     := '%RSo_DataDir%/Claims/TXL_'+ModelParameters/TIGRIS_filedate;
		parameter<String> ClaimDir     := ClaimRef+'/@S@';
		parameter<String> SrcRegioRef  := 'LMSSubzone';
		
		unit<UInt32> SrcRegio       := ='SourceData/RegioIndelingen/'+SrcRegioRef;
		unit<UInt32> COROP_Regio    := SourceData/RegioIndelingen/CBS/last/COROP;
		
		container MetaInfo
		: Descr = "In de map MetaInfo staan csv bestanden met informatie over de kolommen in de verschillende TXL claim bestanden. Deze worden hier ingelezen om te gebruiken bij het inlezen van de TXL claim bestanden."
		{
			unit<UInt32> Labour
			: StorageName = "=ClaimSrcRef+'/MetaInfo/Labour.csv'"
			, StorageType = "gdal.vect"
			, StorageReadOnly = "TRUE"
			{
				attribute<String> name     := variable;
				attribute<UInt32> EndPos   := cumulate(Length[uint32]);
				attribute<UInt32> Startpos := EndPos - Length[uint32];
			}
			unit<UInt32> Landuse
			: StorageName = "=ClaimSrcRef+'/MetaInfo/Landuse.csv'"
			, StorageType = "gdal.vect"
			, StorageReadOnly = "TRUE"
			{
				attribute<String> name     := variable;
				attribute<UInt32> EndPos   := cumulate(Length[uint32]);
				attribute<UInt32> Startpos := EndPos - Length[uint32];
			}
		}
		
		container Cases := for_each_ne(Modellering/AllCases/name, 'CaseT('+quote(Modellering/AllCases/Scenario_name)+','+quote(Modellering/AllCases/Variant_name)+')');
		
		Template CaseT
		: Descr = "Voor een combinatie van scenario en variant worden alle TXL claim bestanden ingelezen."
		{
			//
			parameter<String> Scenario;
			parameter<String> Variant;
			//
			
			container Tables := for_each_ne(TigrisXL/Table/name, 'DatasetT(TigrisXL/Table/V/'+TigrisXL/Table/name+','+quote(Scenario)+','+quote(Variant)+')');
		}
		
		Template DatasetT
		: Descr = "Voor een TXL claim bestand (table) worden de zichtjaren ingelezen."
		{
			//
			parameter<TigrisXL/Table> table_id;
			parameter<String> Scenario;
			parameter<String> Variant;
			//
			
			container Zichtjaren := for_each_ne(Time/Tigrisjaar/name, 'Per_Zichtjaar_T(table_id, '+string(Time/Tigrisjaar/jaar)+'[YearRange],'+quote(Scenario)+','+quote(Variant)+')');
		}
		
		Template Per_Zichtjaar_T
		: Descr = "Voor een zichtjaar wordt het bijbehorende TXL claim bestand ingelezen."
		{
			//
			parameter<TigrisXL/Table> table_id;
			parameter<YearRange> Jaar;
			parameter<String> Scenario;
			parameter<String> Variant;
			//
			
			parameter<String> Filename_bare := TigrisXL/Table/name[table_id];
			
			parameter<String>  File_dat
			:	StorageName = "=replace(ClaimSrcDir, '@S@', Scenario)+'_LMS/'+string(Jaar)+'/'+Variant+'_'+Filename_bare+'.dat'"
			,	StorageType = "str";
			
			unit<UInt32> SrcDomain := range(uint32,0,StrCount(File_dat, '\n'))
			{
				attribute<String> FullLine (SrcDomain) := ReadLines(File_dat, .,0);
				attribute<UInt32> EK := ReadElems(FullLine, ., const(0, .));
			}
			
			parameter<String> Validator := '\\s*-?\\d+(\\.\\d+)?\\s*'; // 0 of meer spaties, 0 of 1 min-teken, een of meer digits, optioneel een punt gevolg door 1 of meer digits, gevolgd door 0 of meer spaties
			
			unit<UInt32> SrcAttribute := ='MetaInfo/'+Classifications/TigrisXL/Table/name[table_id] +'' 
			{
				attribute<Bool> is_oke := ='union_data(., '+asItemList('all(regex_match(substr(SrcDomain/FullLine,'+string(SrcAttribute/StartPos)+','+string(SrcAttribute/Length)+'), Validator))')+')', Descr = "Controleer of de waarden in de kolom voldoen aan het verwachte formaat (zie Validator parameter).";
			}
			
			unit<UInt32>  TargetDomain := SourceData/RegioIndelingen/LMSSubzone;
			unit<Float32> TargetValues;
			
			container SrcAttributes_strings := 
				for_each_nedv(
					SrcAttribute/name
					, 'substr(SrcDomain/FullLine,' + string(SrcAttribute/StartPos) +',' + string(SrcAttribute/Length) + ')'
					, SrcDomain 
					, string
				), Descr = "Haal de kolommen op als strings."
			{
				attribute<UInt32> EK(SrcDomain) := uint32(LmsSubzone);
			}
			
			container SrcAttributes_oke := 
				for_each_nedv(
					SrcAttribute/name
					, 'regex_match(SrcAttributes_strings/'+SrcAttribute/name+', Validator)'
					, SrcDomain
					, bool
				), Descr = "Haal de kolommen op als booleans (of de waarde in de kolom voldoet aan het verwachte formaat)."
			{
				attribute<UInt32> EK (SrcDomain) := uint32(LmsSubzone);
			}
			
			container SrcAttributes := 
				for_each_neidv(
					SrcAttribute/name
					, 'value(SrcAttributes_strings/'+SrcAttribute/name+', TargetValues)'
					, 'SrcAttributes_oke/'+SrcAttribute/name
					, SrcDomain
					, TargetValues
				), Descr = "Haal de kolommen op als floats, maar alleen als de waarde in de kolom voldoet aan het verwachte formaat (anders wordt er een missing value gezet)."
			{
				attribute<UInt32> EK(SrcDomain) := uint32(LmsSubzone);
			}
			
			container Attributes := 
				for_each_nedv(
					SrcAttribute/name
					, SrcAttribute/is_oke
						? 'rjoin(TargetDomain/LmsSubF, SrcAttributes/EK, SrcAttributes/'+ SrcAttribute/name +')'
						: 'Formatting Error: MetaInfo defined a column with an unexpected number format: '
					, TargetDomain
					, TargetValues
				), Descr = "Koppel de waarden aan de doelgebieden (LMSSubzone).";
		}
	}
	
	container AggregateToRegions :=
		for_each_ne(
			CaseClassifications/ZichtjaarxTXLClaimsxCase/name
			, 'Templates/Claims/Claims_TargetUnits_T('+string(id(CaseClassifications/ZichtjaarxTXLClaimsxCase))+'[CaseClassifications/ZichtjaarxTXLClaimsxCase], CaseClassifications/ZichtjaarxTXLClaimsxCase)'
		), Descr = "Agregeer de claims van LMSSubzone naar de doelgebieden zoals gedefinieerd in CaseClassifications/ZichtjaarxTXLClaimsxCase";
}