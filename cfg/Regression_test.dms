////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Dit is RSOpen, de open source versie van het model RuimteScanner. Het scipt wordt uitgegeven onder GNU-GPL licentie.
//
// RSOpen is ontwikkeld door PBL Planbureau voor de Leefomgeving, i.s.m Object Vision B.V. en VU Vrije Universiteit Amsterdam.
// Opdrachtgever/ontwikkelaar PBL: Bart Rijken
// Contactpersoon/ontwikkelaar Object Vision B.V.: Jip Claassens (jclaassens@objectvision.nl)
// Contacpersoon PBL: Bas van Bemmel (Bas.vanBemmel@pbl.nl)
//
// Deze file specificeert:
// - het te evalueren (omgevings)scenario, de (beleids)variant en daarmee de casus (= combinatie van scenario en variant);
// - De ruimtelijke resolutie waarop wordt gerekend
// - de dms files die nodig zijn om betreffende caus te evalueren (met 'includes')
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

container RSOpen
{
	parameter<string>                     Scenario_name := replace_value(expand(., '%env:RSL_SCENARIO_NAME%'), 'env:RSL_SCENARIO_NAME', 'WLO_hoog');   // Omgevingsscenario: WLO_laag,WLO_hoog
	parameter<string>                     Variant_name  := replace_value(expand(., '%env:RSL_VARIANT_NAME%' ), 'env:RSL_VARIANT_NAME', 'BAU');        // (Beleids)variant: BAU,WBSA,WBSB,Verdichting,Uitleg
	parameter<string>                     Casus_name    := Scenario_name+'_'+Variant_name;
	parameter<VariantParameters/VariantK> Variant_rel   := ='/VariantParameters/VariantK/V/'+Variant_name;
	
	#include <../main/Units.dms>
	#include <../main/Geography.dms>
	
	#include <../main/ModelParameters.dms>
	#include <../main/VariantParameters.dms>
	
	#include <../main/Classifications.dms>
	container CaseClassifications := Templates/CaseClassificationsT(scenario_name, variant_name);

	// #include <../main/CaseParameters.dms>
	
	#include <../main/PrivData.dms>
	#include <../main/SourceData.dms>
	#include <../main/BaseData.dms>

	#include <../main/VariantData.dms>
	#include <../main/Allocatie.dms>
	
	#include <../main/Indicatoren.dms>
	#include <../main/Templates.dms>
	#include <../main/Output.dms>
	
	#include <../main/WritePrivdata.dms>
	#include <../main/WriteBasedata.dms>
	#include <../main/WriteVariantData.dms>
	
	container AllFinalItems
	{
		parameter<string> ActivateAll := BaseData + VariantData + Allocatie;
		
		parameter<string> BaseData    := /WriteBasedata/Generate_Run1;
		parameter<string> VariantData := /WriteVariantdata/Generate_Run1;
		parameter<string> Allocatie   := AsList('Allocatie/Zichtjaren/'+/Classifications/Time/Zichtjaar/name+'/Impl/Generate',' + ');
	}
	

	#include <../main/ConfigSettings.dms>
	#include <../main/ExportSettings.dms>
	
	container t641_1_RSopen_prepare_base_data
	{
		parameter<string> TempDir                  := '%LocalDataDir%/Regression/log';
		parameter<string> results_folder_filename  := TempDir + '/results_folder.txt';
		parameter<string> results_folder           :  Storagename =  "= results_folder_filename", StorageType = "str";

		parameter<string> result_html := 
			'<description>RSopen prepare base data, BAU, 2060 <br><I> git revision: b8246c2, git repo: https://github.com/ObjectVision/RSopen; branch: RegressieTest </I></description>' + 
			'<result>prepare base data: OK</result>'
		,	StorageType = "str"
		,	storagename = "= results_folder + '/t641_1_RSopen_prepare_base_data.txt'";
	}
	
	container t641_2_RSopen_MakeVariantData
	{
		parameter<string> TempDir                  := '%LocalDataDir%/Regression/log';
		parameter<string> results_folder_filename  := TempDir + '/results_folder.txt';
		parameter<string> results_folder           :  Storagename =  "= results_folder_filename", StorageType = "str";

		parameter<string> result_html := 
			'<description>RSopen make variant data, BAU, 2060 <br><I> git revision: b8246c2, git repo: https://github.com/ObjectVision/RSopen; branch: RegressieTest </I></description>' + 
			'<result>maak variant data: OK</result>'
		,	StorageType = "str"
		,	storagename = "= results_folder + '/t641_2_RSopen_MakeVariantData.txt'";
	}
	
	container t641_3_RSopen_indicator_results_test
	{
		parameter<string> TempDir                  := '%LocalDataDir%/Regression/log';
		parameter<string> results_folder_filename  := TempDir + '/results_folder.txt';
		parameter<string> results_folder           :  Storagename =  "= results_folder_filename", StorageType = "str";

		parameter<string> result := 
			'<description>RSopen results, BAU, 2060 <br><I> git revision: b8246c2, git repo: https://github.com/ObjectVision/RSopen; branch: RegressieTest </I></description>' + 
			'<result>' + 
			'<br><b>BasisJaar</b>' +
			'<br>Woningen: ' + replace(string(RegressieTestIndicatoren/Basisjaar/Aantal_kilo_Woningen),'.',',') +' kilo woningen <br>' + 
			'Banen: ' + replace(string(RegressieTestIndicatoren/Basisjaar/Aantal_kilo_Banen),'.',',') +' kilo banen <br>' + 
			'Pand Footprint : ' + replace(string(RegressieTestIndicatoren/Basisjaar/haPandFootprint_Totaal),'.',',') +' ha <br>' + 
			'Objecten Verblijfsrecreatie : ' + replace(string(sum(RegressieTestIndicatoren/Basisjaar/Objecten_Verblijfsrecreatie)),'.',',') +' objecten<br>'  + 
			'Vermogen Wind : ' + replace(string(sum(RegressieTestIndicatoren/Basisjaar/Vermogen_Wind)),'.',',') +' mega watt<br>'  + 
			'Vermogen Zon : ' + replace(string(sum(RegressieTestIndicatoren/Basisjaar/Vermogen_Zon)),'.',',') +' mega watt<br>'
			'<br><b>2060</b>' +
			'<br>Woningen: ' + replace(string(RegressieTestIndicatoren/Yr2060/Aantal_kilo_Woningen),'.',',') +' kilo woningen <br>' + 
			'Banen: ' + replace(string(RegressieTestIndicatoren/Yr2060/Aantal_kilo_Banen),'.',',') +' kilo banen <br>' + 
			'Pand Footprint : ' + replace(string(RegressieTestIndicatoren/Yr2060/haPandFootprint_Totaal),'.',',') +' ha <br>' + 
			'Objecten Verblijfsrecreatie : ' + replace(string(sum(RegressieTestIndicatoren/Yr2060/Objecten_Verblijfsrecreatie)),'.',',') +' objecten<br>'  + 
			'Vermogen Wind : ' + replace(string(sum(RegressieTestIndicatoren/Yr2060/Vermogen_Wind)),'.',',') +' mega watt<br>'  + 
			'Vermogen Zon : ' + replace(string(sum(RegressieTestIndicatoren/Yr2060/Vermogen_Zon)),'.',',') +' mega watt</result>';

		parameter<string> result_html := result
		,	StorageType = "str"
		,	storagename = "= results_folder + '/t641_3_RSopen_indicator_results_test.txt'";
	}
	
	container RegressieTestIndicatoren : using = "units"
	{
		container Basisjaar
		{
			parameter<Woning>          Aantal_Woningen_Totaal       := sum(Indicatoren/Basisjaar/Stand/Aantal_Woningen_Totaal);
			parameter<float32>         Aantal_kilo_Woningen         := float32(Aantal_Woningen_Totaal) / 1000f;

			parameter<Job>             Aantal_Banen_Totaal          := sum(Indicatoren/Basisjaar/Stand/Aantal_Banen_Totaal);
			parameter<float32>         Aantal_kilo_Banen            := float32(Aantal_Banen_Totaal) / 1000f;

			parameter<meter2>          m2PandFootprint_Totaal       := sum(Indicatoren/Basisjaar/Stand/m2PandFootprint_Totaal);
			parameter<float32>         haPandFootprint_Totaal       := float32(m2PandFootprint_Totaal) / 10000f;

			parameter<Verblijfsobject> Objecten_Verblijfsrecreatie  := sum(Indicatoren/Basisjaar/Stand/Objecten_Verblijfsrecreatie);
			parameter<MW>              Vermogen_Wind                := sum(Indicatoren/Basisjaar/Stand/Vermogen_Wind);
			parameter<MW>              Vermogen_Zon                 := sum(Indicatoren/Basisjaar/Stand/Vermogen_Zon);
		}
		 container Yr2060
		 {
			parameter<Woning>          Aantal_Woningen_Totaal       := sum(Indicatoren/Y2060/Stand/Aantal_Woningen_Totaal);
			parameter<float32>         Aantal_kilo_Woningen         := float32(Aantal_Woningen_Totaal) / 1000f;
			
			parameter<Job>             Aantal_Banen_Totaal          := sum(Indicatoren/Y2060/Stand/Aantal_Banen_Totaal);
			parameter<float32>         Aantal_kilo_Banen            := float32(Aantal_Banen_Totaal) / 1000f;

			parameter<meter2>          m2PandFootprint_Totaal       := sum(Indicatoren/Y2060/Stand/m2PandFootprint_Totaal);
			parameter<float32>         haPandFootprint_Totaal       := float32(m2PandFootprint_Totaal) / 10000f;

			parameter<Verblijfsobject> Objecten_Verblijfsrecreatie  := sum(Indicatoren/Y2060/Stand/Objecten_Verblijfsrecreatie);
			parameter<MW>              Vermogen_Wind                := sum(Indicatoren/Y2060/Stand/Vermogen_Wind);
			parameter<MW>              Vermogen_Zon                 := sum(Indicatoren/Y2060/Stand/Vermogen_Zon);
		}
	}
}